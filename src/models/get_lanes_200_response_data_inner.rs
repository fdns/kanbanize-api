/*
 * Kanbanize API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@kanbanize.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetLanes200ResponseDataInner {
    #[serde(rename = "workflow", skip_serializing_if = "Option::is_none")]
    pub workflow: Option<Workflow>,
    #[serde(rename = "parent_lane_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub parent_lane_id: Option<Option<i32>>,
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<i32>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "color", skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    /// Lane id.
    #[serde(rename = "lane_id", skip_serializing_if = "Option::is_none")]
    pub lane_id: Option<i32>,
}

impl GetLanes200ResponseDataInner {
    pub fn new() -> GetLanes200ResponseDataInner {
        GetLanes200ResponseDataInner {
            workflow: None,
            parent_lane_id: None,
            position: None,
            name: None,
            description: None,
            color: None,
            lane_id: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Workflow {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for Workflow {
    fn default() -> Workflow {
        Self::Variant0
    }
}

