/*
 * Kanbanize API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@kanbanize.com
 * Generated by: https://openapi-generator.tech
 */

/// UpdateLaneRequest : Lane data.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateLaneRequest {
    /// The id of the parent lane or 0 if you want to make the lane a top lane.
    #[serde(rename = "parent_lane_id", skip_serializing_if = "Option::is_none")]
    pub parent_lane_id: Option<i32>,
    /// The position of the lane within the workflow or its parent.
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<i32>,
    /// The name of the lane.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A description of the lane.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The lane color. 6 hexadecimal characters are expected.
    #[serde(rename = "color", skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
}

impl UpdateLaneRequest {
    /// Lane data.
    pub fn new() -> UpdateLaneRequest {
        UpdateLaneRequest {
            parent_lane_id: None,
            position: None,
            name: None,
            description: None,
            color: None,
        }
    }
}


