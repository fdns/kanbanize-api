/*
 * Kanbanize API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@kanbanize.com
 * Generated by: https://openapi-generator.tech
 */

/// UpdateBlockReasonRequest : Block reason data.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateBlockReasonRequest {
    /// The type of the icon. 0 - system. 1 - user.
    #[serde(rename = "icon_type", skip_serializing_if = "Option::is_none")]
    pub icon_type: Option<i32>,
    /// An icon for the block reason. If set to 0, the block reason will not have an icon.
    #[serde(rename = "icon_id", skip_serializing_if = "Option::is_none")]
    pub icon_id: Option<i32>,
    /// The block reason.
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// The color of the block reason. 6 hexadecimal characters are expected.
    #[serde(rename = "color", skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    /// Controls whether this block reason signifies that the card is blocked because of another card.
    #[serde(rename = "with_cards", skip_serializing_if = "Option::is_none")]
    pub with_cards: Option<WithCards>,
    /// Controls whether this block reason signifies that the card is blocked until a given date.
    #[serde(rename = "with_date", skip_serializing_if = "Option::is_none")]
    pub with_date: Option<WithDate>,
    /// Controls whether this block reason signifies that the card is blocked because of a user.
    #[serde(rename = "with_users", skip_serializing_if = "Option::is_none")]
    pub with_users: Option<WithUsers>,
    /// When set to 0 the block reason has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the block reason is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the block reason is added automatically to all boards and cannot be removed.
    #[serde(rename = "availability", skip_serializing_if = "Option::is_none")]
    pub availability: Option<Availability>,
    /// Controls whether this block reason is enabled.
    #[serde(rename = "is_enabled", skip_serializing_if = "Option::is_none")]
    pub is_enabled: Option<IsEnabled>,
}

impl UpdateBlockReasonRequest {
    /// Block reason data.
    pub fn new() -> UpdateBlockReasonRequest {
        UpdateBlockReasonRequest {
            icon_type: None,
            icon_id: None,
            label: None,
            color: None,
            with_cards: None,
            with_date: None,
            with_users: None,
            availability: None,
            is_enabled: None,
        }
    }
}

/// Controls whether this block reason signifies that the card is blocked because of another card.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum WithCards {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for WithCards {
    fn default() -> WithCards {
        Self::Variant0
    }
}
/// Controls whether this block reason signifies that the card is blocked until a given date.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum WithDate {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for WithDate {
    fn default() -> WithDate {
        Self::Variant0
    }
}
/// Controls whether this block reason signifies that the card is blocked because of a user.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum WithUsers {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for WithUsers {
    fn default() -> WithUsers {
        Self::Variant0
    }
}
/// When set to 0 the block reason has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the block reason is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the block reason is added automatically to all boards and cannot be removed.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Availability {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
}

impl Default for Availability {
    fn default() -> Availability {
        Self::Variant0
    }
}
/// Controls whether this block reason is enabled.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IsEnabled {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for IsEnabled {
    fn default() -> IsEnabled {
        Self::Variant0
    }
}

