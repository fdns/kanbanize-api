/*
 * Kanbanize API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@kanbanize.com
 * Generated by: https://openapi-generator.tech
 */

/// Card : Card data



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Card {
    #[serde(rename = "card_id", skip_serializing_if = "Option::is_none")]
    pub card_id: Option<i32>,
    #[serde(rename = "custom_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub custom_id: Option<Option<String>>,
    #[serde(rename = "board_id", skip_serializing_if = "Option::is_none")]
    pub board_id: Option<i32>,
    #[serde(rename = "workflow_id", skip_serializing_if = "Option::is_none")]
    pub workflow_id: Option<i32>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "owner_user_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub owner_user_id: Option<Option<i32>>,
    #[serde(rename = "type_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub type_id: Option<Option<i32>>,
    #[serde(rename = "color", skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    #[serde(rename = "section", skip_serializing_if = "Option::is_none")]
    pub section: Option<i32>,
    #[serde(rename = "column_id", skip_serializing_if = "Option::is_none")]
    pub column_id: Option<i32>,
    #[serde(rename = "lane_id", skip_serializing_if = "Option::is_none")]
    pub lane_id: Option<i32>,
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<i32>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<f64>,
    #[serde(rename = "priority", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub priority: Option<Option<i32>>,
    #[serde(rename = "deadline", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub deadline: Option<Option<String>>,
    #[serde(rename = "reporter", skip_serializing_if = "Option::is_none")]
    pub reporter: Option<Box<crate::models::CardReporter>>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "revision", skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(rename = "last_modified", skip_serializing_if = "Option::is_none")]
    pub last_modified: Option<String>,
    #[serde(rename = "in_current_position_since", skip_serializing_if = "Option::is_none")]
    pub in_current_position_since: Option<String>,
    #[serde(rename = "is_blocked", skip_serializing_if = "Option::is_none")]
    pub is_blocked: Option<i32>,
    #[serde(rename = "block_reason", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub block_reason: Option<Option<Box<crate::models::BlockReason>>>,
    #[serde(rename = "child_card_stats", skip_serializing_if = "Option::is_none")]
    pub child_card_stats: Option<Box<crate::models::CardChildCardStats>>,
    #[serde(rename = "finished_subtask_count", skip_serializing_if = "Option::is_none")]
    pub finished_subtask_count: Option<i32>,
    #[serde(rename = "unfinished_subtask_count", skip_serializing_if = "Option::is_none")]
    pub unfinished_subtask_count: Option<i32>,
    #[serde(rename = "attachments", skip_serializing_if = "Option::is_none")]
    pub attachments: Option<Vec<crate::models::CardAttachment>>,
    /// A list of card custom field values.
    #[serde(rename = "custom_fields", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<Vec<crate::models::GetCardCustomFields200ResponseDataInner>>,
    #[serde(rename = "stickers", skip_serializing_if = "Option::is_none")]
    pub stickers: Option<Vec<crate::models::CardSticker>>,
    #[serde(rename = "tag_ids", skip_serializing_if = "Option::is_none")]
    pub tag_ids: Option<Vec<i32>>,
    #[serde(rename = "co_owner_ids", skip_serializing_if = "Option::is_none")]
    pub co_owner_ids: Option<Vec<i32>>,
    #[serde(rename = "watchers_ids", skip_serializing_if = "Option::is_none")]
    pub watchers_ids: Option<Vec<i32>>,
    #[serde(rename = "annotations", skip_serializing_if = "Option::is_none")]
    pub annotations: Option<Vec<crate::models::Annotation>>,
    #[serde(rename = "outcomes", skip_serializing_if = "Option::is_none")]
    pub outcomes: Option<Vec<crate::models::CardOutcomeWithId>>,
    #[serde(rename = "subtasks", skip_serializing_if = "Option::is_none")]
    pub subtasks: Option<Vec<crate::models::CardSubtaskWithId>>,
    #[serde(rename = "linked_cards", skip_serializing_if = "Option::is_none")]
    pub linked_cards: Option<Vec<crate::models::CardLinkedCardsInner>>,
}

impl Card {
    /// Card data
    pub fn new() -> Card {
        Card {
            card_id: None,
            custom_id: None,
            board_id: None,
            workflow_id: None,
            title: None,
            owner_user_id: None,
            type_id: None,
            color: None,
            section: None,
            column_id: None,
            lane_id: None,
            position: None,
            description: None,
            size: None,
            priority: None,
            deadline: None,
            reporter: None,
            created_at: None,
            revision: None,
            last_modified: None,
            in_current_position_since: None,
            is_blocked: None,
            block_reason: None,
            child_card_stats: None,
            finished_subtask_count: None,
            unfinished_subtask_count: None,
            attachments: None,
            custom_fields: None,
            stickers: None,
            tag_ids: None,
            co_owner_ids: None,
            watchers_ids: None,
            annotations: None,
            outcomes: None,
            subtasks: None,
            linked_cards: None,
        }
    }
}


