/*
 * Kanbanize API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@kanbanize.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CardComment {
    #[serde(rename = "comment_id", skip_serializing_if = "Option::is_none")]
    pub comment_id: Option<i32>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(rename = "attachments", skip_serializing_if = "Option::is_none")]
    pub attachments: Option<Box<crate::models::CardCommentAttachmentWithId>>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "last_modified", skip_serializing_if = "Option::is_none")]
    pub last_modified: Option<String>,
    #[serde(rename = "author", skip_serializing_if = "Option::is_none")]
    pub author: Option<Box<crate::models::CardCommentAuthorAuthor>>,
    #[serde(rename = "sender", skip_serializing_if = "Option::is_none")]
    pub sender: Option<Box<crate::models::CardCommentAuthorAuthor>>,
    #[serde(rename = "recipients", skip_serializing_if = "Option::is_none")]
    pub recipients: Option<Box<crate::models::CardCommentRecipientsRecipients>>,
}

impl CardComment {
    pub fn new() -> CardComment {
        CardComment {
            comment_id: None,
            r#type: None,
            text: None,
            attachments: None,
            created_at: None,
            last_modified: None,
            author: None,
            sender: None,
            recipients: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "plain")]
    Plain,
    #[serde(rename = "sent as email")]
    SentAsEmail,
    #[serde(rename = "received as email")]
    ReceivedAsEmail,
}

impl Default for Type {
    fn default() -> Type {
        Self::Plain
    }
}

