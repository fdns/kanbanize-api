/*
 * Kanbanize API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@kanbanize.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubtaskWithIdConvertIntoCardRequest {
    #[serde(rename = "subtask_id")]
    pub subtask_id: i32,
    /// The column id of the converted subtask into card.
    #[serde(rename = "column_id", skip_serializing_if = "Option::is_none")]
    pub column_id: Option<i32>,
    /// The lane id of the converted subtask into card.
    #[serde(rename = "lane_id", skip_serializing_if = "Option::is_none")]
    pub lane_id: Option<i32>,
    /// The position of the converted subtask into card.
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<i32>,
    /// The track of the converted subtask into card.
    #[serde(rename = "track", skip_serializing_if = "Option::is_none")]
    pub track: Option<i32>,
    /// The planened start date of the converted subtask into card.
    #[serde(rename = "planned_start_date", skip_serializing_if = "Option::is_none")]
    pub planned_start_date: Option<String>,
    /// The planened end date of the converted subtask into card.
    #[serde(rename = "planned_end_date", skip_serializing_if = "Option::is_none")]
    pub planned_end_date: Option<String>,
    /// The actual start time of the converted subtask into card.
    #[serde(rename = "actual_start_time", skip_serializing_if = "Option::is_none")]
    pub actual_start_time: Option<String>,
    /// The actual end time of the converted subtask into card.
    #[serde(rename = "actual_end_time", skip_serializing_if = "Option::is_none")]
    pub actual_end_time: Option<String>,
    /// The title of the converted subtask into card.
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// The description of the converted subtask into card.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The custom id of the converted subtask into card.
    #[serde(rename = "custom_id", skip_serializing_if = "Option::is_none")]
    pub custom_id: Option<String>,
    /// The user id of assignee of the converted subtask into card.
    #[serde(rename = "owner_user_id", skip_serializing_if = "Option::is_none")]
    pub owner_user_id: Option<i32>,
    /// The type id of the converted subtask into card.
    #[serde(rename = "type_id", skip_serializing_if = "Option::is_none")]
    pub type_id: Option<i32>,
    /// The size of the converted subtask into card.
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<f64>,
    /// The priority of the converted subtask into card.
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<i32>,
    /// The color of the converted subtask into card. 6 hexadecimal characters are expected.
    #[serde(rename = "color", skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    /// The deadline of the converted subtask into card.
    #[serde(rename = "deadline", skip_serializing_if = "Option::is_none")]
    pub deadline: Option<String>,
    /// The reference of converted subtask into card that you can use if you need to find the exact new card in responce.
    #[serde(rename = "reference", skip_serializing_if = "Option::is_none")]
    pub reference: Option<String>,
    #[serde(rename = "block_reason", skip_serializing_if = "Option::is_none")]
    pub block_reason: Option<Box<crate::models::CardBlockReasonSetRequest>>,
    /// A list of strickers which will be added to the converted subtask into card.
    #[serde(rename = "stickers_to_add", skip_serializing_if = "Option::is_none")]
    pub stickers_to_add: Option<Vec<crate::models::CardStickerAddRequest>>,
    /// The tag with ids which will be added to the converted subtask into card.
    #[serde(rename = "tag_ids_to_add", skip_serializing_if = "Option::is_none")]
    pub tag_ids_to_add: Option<Vec<i32>>,
    /// The co-owner ids which will be added to converted subtask into card.
    #[serde(rename = "co_owner_ids_to_add", skip_serializing_if = "Option::is_none")]
    pub co_owner_ids_to_add: Option<Vec<i32>>,
    /// The watcher ids which will be added to the converted subtask into card.
    #[serde(rename = "watcher_ids_to_add", skip_serializing_if = "Option::is_none")]
    pub watcher_ids_to_add: Option<Vec<i32>>,
    /// A list of custom fields will be added or updated for the converted subtask into card.
    #[serde(rename = "custom_fields_to_add_or_update", skip_serializing_if = "Option::is_none")]
    pub custom_fields_to_add_or_update: Option<Vec<crate::models::CardCustomFieldWithIdAddOrUpdateRequest>>,
    /// A list of attachments which will be added to the converted subtask into card.
    #[serde(rename = "attachments_to_add", skip_serializing_if = "Option::is_none")]
    pub attachments_to_add: Option<Vec<crate::models::CardAttachmentCreateRequest>>,
    /// A list of attachments which will be updated to the converted subtask into card.
    #[serde(rename = "attachments_to_update", skip_serializing_if = "Option::is_none")]
    pub attachments_to_update: Option<Vec<crate::models::CardAttachmentWithIdUpdateRequest>>,
    /// A list of attachments which will be removed from the converted subtask into card.
    #[serde(rename = "attachment_ids_to_remove", skip_serializing_if = "Option::is_none")]
    pub attachment_ids_to_remove: Option<Vec<i32>>,
    /// A list of subtasks which will be added to the converted subtask into card.
    #[serde(rename = "subtasks_to_add", skip_serializing_if = "Option::is_none")]
    pub subtasks_to_add: Option<Vec<crate::models::SubtaskCreateRequest>>,
    /// A list of exit criteria.
    #[serde(rename = "column_checklist_items_to_check_or_update", skip_serializing_if = "Option::is_none")]
    pub column_checklist_items_to_check_or_update: Option<Vec<crate::models::CardColumnChecklistItemWithIdAddOrUpdateRequest>>,
    /// A list of links to existing cards which will be add or update.
    #[serde(rename = "links_to_existing_cards_to_add_or_update", skip_serializing_if = "Option::is_none")]
    pub links_to_existing_cards_to_add_or_update: Option<Vec<crate::models::LinkAddOrUpdateRequest>>,
    /// A list of links to new cards which will be added.
    #[serde(rename = "links_to_new_cards_to_add", skip_serializing_if = "Option::is_none")]
    pub links_to_new_cards_to_add: Option<Vec<crate::models::LinkToNewCardToAddRequest>>,
    /// When set to 1 the current user will become a card's watcher.
    #[serde(rename = "watch", skip_serializing_if = "Option::is_none")]
    pub watch: Option<Watch>,
}

impl SubtaskWithIdConvertIntoCardRequest {
    pub fn new(subtask_id: i32) -> SubtaskWithIdConvertIntoCardRequest {
        SubtaskWithIdConvertIntoCardRequest {
            subtask_id,
            column_id: None,
            lane_id: None,
            position: None,
            track: None,
            planned_start_date: None,
            planned_end_date: None,
            actual_start_time: None,
            actual_end_time: None,
            title: None,
            description: None,
            custom_id: None,
            owner_user_id: None,
            type_id: None,
            size: None,
            priority: None,
            color: None,
            deadline: None,
            reference: None,
            block_reason: None,
            stickers_to_add: None,
            tag_ids_to_add: None,
            co_owner_ids_to_add: None,
            watcher_ids_to_add: None,
            custom_fields_to_add_or_update: None,
            attachments_to_add: None,
            attachments_to_update: None,
            attachment_ids_to_remove: None,
            subtasks_to_add: None,
            column_checklist_items_to_check_or_update: None,
            links_to_existing_cards_to_add_or_update: None,
            links_to_new_cards_to_add: None,
            watch: None,
        }
    }
}

/// When set to 1 the current user will become a card's watcher.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Watch {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for Watch {
    fn default() -> Watch {
        Self::Variant0
    }
}

