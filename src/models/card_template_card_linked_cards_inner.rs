/*
 * Kanbanize API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@kanbanize.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CardTemplateCardLinkedCardsInner {
    #[serde(rename = "template_card_id", skip_serializing_if = "Option::is_none")]
    pub template_card_id: Option<i32>,
    #[serde(rename = "link_type", skip_serializing_if = "Option::is_none")]
    pub link_type: Option<LinkType>,
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<i32>,
}

impl CardTemplateCardLinkedCardsInner {
    pub fn new() -> CardTemplateCardLinkedCardsInner {
        CardTemplateCardLinkedCardsInner {
            template_card_id: None,
            link_type: None,
            position: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LinkType {
    #[serde(rename = "child")]
    Child,
    #[serde(rename = "parent")]
    Parent,
    #[serde(rename = "relative")]
    Relative,
    #[serde(rename = "predecessor")]
    Predecessor,
    #[serde(rename = "successor")]
    Successor,
}

impl Default for LinkType {
    fn default() -> LinkType {
        Self::Child
    }
}

