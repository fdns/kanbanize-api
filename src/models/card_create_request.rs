/*
 * Kanbanize API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@kanbanize.com
 * Generated by: https://openapi-generator.tech
 */

/// CardCreateRequest : Card data.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CardCreateRequest {
    /// The template id through which you can make a new card.
    #[serde(rename = "template_id", skip_serializing_if = "Option::is_none")]
    pub template_id: Option<i32>,
    /// A list of card properties to copy.
    #[serde(rename = "card_properties_to_copy", skip_serializing_if = "Option::is_none")]
    pub card_properties_to_copy: Option<Vec<crate::models::CopyCardPropertiesRequest>>,
    /// A list of custom fields to copy.
    #[serde(rename = "custom_fields_to_copy", skip_serializing_if = "Option::is_none")]
    pub custom_fields_to_copy: Option<Vec<crate::models::CopyCustomFieldsRequest>>,
    /// The column id of the new card.
    #[serde(rename = "column_id", skip_serializing_if = "Option::is_none")]
    pub column_id: Option<i32>,
    /// The lane id of the new card.
    #[serde(rename = "lane_id", skip_serializing_if = "Option::is_none")]
    pub lane_id: Option<i32>,
    /// The position of the new card.
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<i32>,
    /// The track of the new card.
    #[serde(rename = "track", skip_serializing_if = "Option::is_none")]
    pub track: Option<i32>,
    /// The planened start date of the new card.
    #[serde(rename = "planned_start_date", skip_serializing_if = "Option::is_none")]
    pub planned_start_date: Option<String>,
    /// The planened end date of the new card.
    #[serde(rename = "planned_end_date", skip_serializing_if = "Option::is_none")]
    pub planned_end_date: Option<String>,
    /// The actual start time of the new card.
    #[serde(rename = "actual_start_time", skip_serializing_if = "Option::is_none")]
    pub actual_start_time: Option<String>,
    /// The actual end time of the new card.
    #[serde(rename = "actual_end_time", skip_serializing_if = "Option::is_none")]
    pub actual_end_time: Option<String>,
    /// The title of the new card.
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// The description of the new card.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The custom id of the new card.
    #[serde(rename = "custom_id", skip_serializing_if = "Option::is_none")]
    pub custom_id: Option<String>,
    /// The user id of assignee of the new card.
    #[serde(rename = "owner_user_id", skip_serializing_if = "Option::is_none")]
    pub owner_user_id: Option<i32>,
    /// The type id of the new card.
    #[serde(rename = "type_id", skip_serializing_if = "Option::is_none")]
    pub type_id: Option<i32>,
    /// The size of the new card.
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<f64>,
    /// The priority of the new card.
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<i32>,
    /// The color of the new card. 6 hexadecimal characters are expected.
    #[serde(rename = "color", skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    /// The deadline of the new card.
    #[serde(rename = "deadline", skip_serializing_if = "Option::is_none")]
    pub deadline: Option<String>,
    /// A reference that you can use if you need to find the exact new card in responce.
    #[serde(rename = "reference", skip_serializing_if = "Option::is_none")]
    pub reference: Option<String>,
    #[serde(rename = "block_reason", skip_serializing_if = "Option::is_none")]
    pub block_reason: Option<Box<crate::models::CardBlockReasonSetRequest>>,
    /// A list of strickers which will be added to the new card.
    #[serde(rename = "stickers_to_add", skip_serializing_if = "Option::is_none")]
    pub stickers_to_add: Option<Vec<crate::models::CardStickerAddRequest>>,
    /// A list of tag ids which will be added to the new card.
    #[serde(rename = "tag_ids_to_add", skip_serializing_if = "Option::is_none")]
    pub tag_ids_to_add: Option<Vec<i32>>,
    /// A list of tag ids which will be removed from the new card.
    #[serde(rename = "tag_ids_to_remove", skip_serializing_if = "Option::is_none")]
    pub tag_ids_to_remove: Option<Vec<i32>>,
    /// A list of co-owner ids which will be added to the new card.
    #[serde(rename = "co_owner_ids_to_add", skip_serializing_if = "Option::is_none")]
    pub co_owner_ids_to_add: Option<Vec<i32>>,
    /// A list of co-owner ids which will be removed from the new card.
    #[serde(rename = "co_owner_ids_to_remove", skip_serializing_if = "Option::is_none")]
    pub co_owner_ids_to_remove: Option<Vec<i32>>,
    /// A list of watcher ids which will be added to the new card.
    #[serde(rename = "watcher_ids_to_add", skip_serializing_if = "Option::is_none")]
    pub watcher_ids_to_add: Option<Vec<i32>>,
    /// A list of watcher ids which will be removed from the new card.
    #[serde(rename = "watcher_ids_to_remove", skip_serializing_if = "Option::is_none")]
    pub watcher_ids_to_remove: Option<Vec<i32>>,
    /// A list of custom fields which will be add or update for the new card.
    #[serde(rename = "custom_fields_to_add_or_update", skip_serializing_if = "Option::is_none")]
    pub custom_fields_to_add_or_update: Option<Vec<crate::models::CardCustomFieldWithIdAddOrUpdateRequest>>,
    /// A list of custom field ids which will be removed from the new card.
    #[serde(rename = "custom_field_ids_to_remove", skip_serializing_if = "Option::is_none")]
    pub custom_field_ids_to_remove: Option<Vec<i32>>,
    /// A list of attachments which will be added to the new card.
    #[serde(rename = "attachments_to_add", skip_serializing_if = "Option::is_none")]
    pub attachments_to_add: Option<Vec<crate::models::CardAttachmentCreateRequest>>,
    /// A list of subtasks which will be added to the new card.
    #[serde(rename = "subtasks_to_add", skip_serializing_if = "Option::is_none")]
    pub subtasks_to_add: Option<Vec<crate::models::SubtaskCreateRequest>>,
    /// A list of exit criteria.
    #[serde(rename = "column_checklist_items_to_check_or_update", skip_serializing_if = "Option::is_none")]
    pub column_checklist_items_to_check_or_update: Option<Vec<crate::models::CardColumnChecklistItemWithIdAddOrUpdateRequest>>,
    /// A list of annotations which will be added to the new card.
    #[serde(rename = "annotations_to_add", skip_serializing_if = "Option::is_none")]
    pub annotations_to_add: Option<Vec<crate::models::AnnotationAddOrUpdateRequest>>,
    /// A list of links to existing cards which will be add or update.
    #[serde(rename = "links_to_existing_cards_to_add_or_update", skip_serializing_if = "Option::is_none")]
    pub links_to_existing_cards_to_add_or_update: Option<Vec<crate::models::LinkAddOrUpdateRequest>>,
    /// A list of links to new cards which will be added.
    #[serde(rename = "links_to_new_cards_to_add", skip_serializing_if = "Option::is_none")]
    pub links_to_new_cards_to_add: Option<Vec<crate::models::LinkToNewCardToAddRequest>>,
    /// When set to 1 the current user will become a card's watcher.
    #[serde(rename = "watch", skip_serializing_if = "Option::is_none")]
    pub watch: Option<Watch>,
    /// The created date and time of the new card.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// When set to 1 the card will be archived.
    #[serde(rename = "is_archived", skip_serializing_if = "Option::is_none")]
    pub is_archived: Option<IsArchived>,
    /// The version id of the new card.
    #[serde(rename = "version_id", skip_serializing_if = "Option::is_none")]
    pub version_id: Option<i32>,
    /// The archived date and time of the new card. Different from discarded date and time;
    #[serde(rename = "archived_at", skip_serializing_if = "Option::is_none")]
    pub archived_at: Option<String>,
    /// When set to 1 the card will be discarded.
    #[serde(rename = "is_discarded", skip_serializing_if = "Option::is_none")]
    pub is_discarded: Option<IsDiscarded>,
    /// The discarded reason id of the new card.
    #[serde(rename = "discard_reason_id", skip_serializing_if = "Option::is_none")]
    pub discard_reason_id: Option<i32>,
    /// The discard comment of the new card.
    #[serde(rename = "discard_comment", skip_serializing_if = "Option::is_none")]
    pub discard_comment: Option<String>,
    /// The discarded date and time of the new card. Different from archived date and time;
    #[serde(rename = "discarded_at", skip_serializing_if = "Option::is_none")]
    pub discarded_at: Option<String>,
}

impl CardCreateRequest {
    /// Card data.
    pub fn new() -> CardCreateRequest {
        CardCreateRequest {
            template_id: None,
            card_properties_to_copy: None,
            custom_fields_to_copy: None,
            column_id: None,
            lane_id: None,
            position: None,
            track: None,
            planned_start_date: None,
            planned_end_date: None,
            actual_start_time: None,
            actual_end_time: None,
            title: None,
            description: None,
            custom_id: None,
            owner_user_id: None,
            type_id: None,
            size: None,
            priority: None,
            color: None,
            deadline: None,
            reference: None,
            block_reason: None,
            stickers_to_add: None,
            tag_ids_to_add: None,
            tag_ids_to_remove: None,
            co_owner_ids_to_add: None,
            co_owner_ids_to_remove: None,
            watcher_ids_to_add: None,
            watcher_ids_to_remove: None,
            custom_fields_to_add_or_update: None,
            custom_field_ids_to_remove: None,
            attachments_to_add: None,
            subtasks_to_add: None,
            column_checklist_items_to_check_or_update: None,
            annotations_to_add: None,
            links_to_existing_cards_to_add_or_update: None,
            links_to_new_cards_to_add: None,
            watch: None,
            created_at: None,
            is_archived: None,
            version_id: None,
            archived_at: None,
            is_discarded: None,
            discard_reason_id: None,
            discard_comment: None,
            discarded_at: None,
        }
    }
}

/// When set to 1 the current user will become a card's watcher.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Watch {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for Watch {
    fn default() -> Watch {
        Self::Variant0
    }
}
/// When set to 1 the card will be archived.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IsArchived {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for IsArchived {
    fn default() -> IsArchived {
        Self::Variant0
    }
}
/// When set to 1 the card will be discarded.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IsDiscarded {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for IsDiscarded {
    fn default() -> IsDiscarded {
        Self::Variant0
    }
}

