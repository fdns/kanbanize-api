/*
 * Kanbanize API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@kanbanize.com
 * Generated by: https://openapi-generator.tech
 */

/// CopyCardPropertiesRequest : Card properties to copy.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CopyCardPropertiesRequest {
    /// A list of card properties.
    #[serde(rename = "properties")]
    pub properties: Vec<Properties>,
    /// A card id.
    #[serde(rename = "card_id")]
    pub card_id: i32,
}

impl CopyCardPropertiesRequest {
    /// Card properties to copy.
    pub fn new(properties: Vec<Properties>, card_id: i32) -> CopyCardPropertiesRequest {
        CopyCardPropertiesRequest {
            properties,
            card_id,
        }
    }
}

/// A list of card properties.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Properties {
    #[serde(rename = "position")]
    Position,
    #[serde(rename = "title")]
    Title,
    #[serde(rename = "description")]
    Description,
    #[serde(rename = "custom_id")]
    CustomId,
    #[serde(rename = "owner")]
    Owner,
    #[serde(rename = "type")]
    Type,
    #[serde(rename = "size")]
    Size,
    #[serde(rename = "priority")]
    Priority,
    #[serde(rename = "color")]
    Color,
    #[serde(rename = "deadline")]
    Deadline,
    #[serde(rename = "block_reason")]
    BlockReason,
    #[serde(rename = "stickers")]
    Stickers,
    #[serde(rename = "tags")]
    Tags,
    #[serde(rename = "contributors")]
    Contributors,
    #[serde(rename = "custom_fields")]
    CustomFields,
    #[serde(rename = "attachments")]
    Attachments,
    #[serde(rename = "subtasks")]
    Subtasks,
    #[serde(rename = "unfinished_subtasks")]
    UnfinishedSubtasks,
    #[serde(rename = "annotations")]
    Annotations,
    #[serde(rename = "comments")]
    Comments,
    #[serde(rename = "parents")]
    Parents,
}

impl Default for Properties {
    fn default() -> Properties {
        Self::Position
    }
}

