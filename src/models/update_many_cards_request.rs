/*
 * Kanbanize API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@kanbanize.com
 * Generated by: https://openapi-generator.tech
 */

/// UpdateManyCardsRequest : Cards data.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateManyCardsRequest {
    #[serde(rename = "cards")]
    pub cards: Vec<crate::models::CardUpdateWithCardIdRequest>,
    /// Exceeding reason data.
    #[serde(rename = "exceeding_reason", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub exceeding_reason: Option<Option<String>>,
    /// The user id of the reporter of converted subtasks if the subtasks are converted on behalf of someone else.
    #[serde(rename = "reporter_user_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub reporter_user_id: Option<Option<i32>>,
    /// The email of the reporter of converted subtasks if the subtasks are converted on behalf of someone else without a known user id.
    #[serde(rename = "reporter_email", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub reporter_email: Option<Option<String>>,
}

impl UpdateManyCardsRequest {
    /// Cards data.
    pub fn new(cards: Vec<crate::models::CardUpdateWithCardIdRequest>) -> UpdateManyCardsRequest {
        UpdateManyCardsRequest {
            cards,
            exceeding_reason: None,
            reporter_user_id: None,
            reporter_email: None,
        }
    }
}


