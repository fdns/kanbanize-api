/*
 * Kanbanize API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@kanbanize.com
 * Generated by: https://openapi-generator.tech
 */

/// BlockReason : Block reason data



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlockReason {
    #[serde(rename = "reason_id", skip_serializing_if = "Option::is_none")]
    pub reason_id: Option<i32>,
    #[serde(rename = "icon_type", skip_serializing_if = "Option::is_none")]
    pub icon_type: Option<IconType>,
    #[serde(rename = "icon_id", skip_serializing_if = "Option::is_none")]
    pub icon_id: Option<i32>,
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(rename = "color", skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    #[serde(rename = "with_cards", skip_serializing_if = "Option::is_none")]
    pub with_cards: Option<WithCards>,
    #[serde(rename = "with_date", skip_serializing_if = "Option::is_none")]
    pub with_date: Option<WithDate>,
    #[serde(rename = "with_users", skip_serializing_if = "Option::is_none")]
    pub with_users: Option<WithUsers>,
    #[serde(rename = "availability", skip_serializing_if = "Option::is_none")]
    pub availability: Option<Availability>,
    #[serde(rename = "is_enabled", skip_serializing_if = "Option::is_none")]
    pub is_enabled: Option<IsEnabled>,
}

impl BlockReason {
    /// Block reason data
    pub fn new() -> BlockReason {
        BlockReason {
            reason_id: None,
            icon_type: None,
            icon_id: None,
            label: None,
            color: None,
            with_cards: None,
            with_date: None,
            with_users: None,
            availability: None,
            is_enabled: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IconType {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for IconType {
    fn default() -> IconType {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum WithCards {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for WithCards {
    fn default() -> WithCards {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum WithDate {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for WithDate {
    fn default() -> WithDate {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum WithUsers {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for WithUsers {
    fn default() -> WithUsers {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Availability {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
}

impl Default for Availability {
    fn default() -> Availability {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IsEnabled {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for IsEnabled {
    fn default() -> IsEnabled {
        Self::Variant0
    }
}

