/*
 * Kanbanize API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@kanbanize.com
 * Generated by: https://openapi-generator.tech
 */

/// CardCustomFieldAddOrUpdateRequest : Cards custom field data.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CardCustomFieldAddOrUpdateRequest {
    /// The value of custom field.
    #[serde(rename = "value", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub value: Option<Option<String>>,
    /// A list of selected values to add or update.
    #[serde(rename = "selected_values_to_add_or_update", skip_serializing_if = "Option::is_none")]
    pub selected_values_to_add_or_update: Option<Vec<crate::models::CardCustomFieldSelectedValueAddOrUpdateRequest>>,
    /// A list of selected values to remove.
    #[serde(rename = "selected_value_ids_to_remove", skip_serializing_if = "Option::is_none")]
    pub selected_value_ids_to_remove: Option<Vec<i32>>,
    /// The other value of custom field.
    #[serde(rename = "other_value", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub other_value: Option<Option<String>>,
    /// The contributor ids which will be added to card custom field.
    #[serde(rename = "contributor_ids_to_add", skip_serializing_if = "Option::is_none")]
    pub contributor_ids_to_add: Option<Vec<i32>>,
    /// The contributor ids which will be removed from card custom field.
    #[serde(rename = "contributor_ids_to_remove", skip_serializing_if = "Option::is_none")]
    pub contributor_ids_to_remove: Option<Vec<i32>>,
    /// A list of files to add.
    #[serde(rename = "files_to_add", skip_serializing_if = "Option::is_none")]
    pub files_to_add: Option<Vec<crate::models::CardCustomFieldFileCreateRequest>>,
    /// A list of files to update.
    #[serde(rename = "files_to_update", skip_serializing_if = "Option::is_none")]
    pub files_to_update: Option<Vec<crate::models::CardCustomFieldFileWithIdUpdateRequest>>,
    /// A list of file ids to remove.
    #[serde(rename = "file_ids_to_remove", skip_serializing_if = "Option::is_none")]
    pub file_ids_to_remove: Option<Vec<i32>>,
    /// Your vote.
    #[serde(rename = "vote", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vote: Option<Option<Vote>>,
    /// A comment about your vote.
    #[serde(rename = "comment", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub comment: Option<Option<String>>,
    /// A list of the selected card ids for the custom field to add or update.
    #[serde(rename = "selected_cards_to_add_or_update", skip_serializing_if = "Option::is_none")]
    pub selected_cards_to_add_or_update: Option<Vec<crate::models::CardCustomFieldSelectedCardAddOrUpdateRequest>>,
    /// A list of the selected card ids for the custom field to remove.
    #[serde(rename = "selected_card_ids_to_remove", skip_serializing_if = "Option::is_none")]
    pub selected_card_ids_to_remove: Option<Vec<i32>>,
}

impl CardCustomFieldAddOrUpdateRequest {
    /// Cards custom field data.
    pub fn new() -> CardCustomFieldAddOrUpdateRequest {
        CardCustomFieldAddOrUpdateRequest {
            value: None,
            selected_values_to_add_or_update: None,
            selected_value_ids_to_remove: None,
            other_value: None,
            contributor_ids_to_add: None,
            contributor_ids_to_remove: None,
            files_to_add: None,
            files_to_update: None,
            file_ids_to_remove: None,
            vote: None,
            comment: None,
            selected_cards_to_add_or_update: None,
            selected_card_ids_to_remove: None,
        }
    }
}

/// Your vote.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Vote {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for Vote {
    fn default() -> Vote {
        Self::Variant0
    }
}

