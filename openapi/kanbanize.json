{
    "openapi": "3.0.0",
    "info": {
        "title": "Kanbanize API v2",
        "contact": {
            "name": "Support",
            "url": "https:\/\/kanbanize.com\/customer-support\/",
            "email": "support@kanbanize.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https:\/\/www.apache.org\/licenses\/LICENSE-2.0"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "https:\/\/demo.kanbanize.com\/api\/v2"
        }
    ],
    "tags": [
        {
            "name": "Workspaces"
        },
        {
            "name": "Workspace Managers"
        },
        {
            "name": "Workspace History"
        },
        {
            "name": "Boards"
        },
        {
            "name": "Board Settings"
        },
        {
            "name": "Board Structure"
        },
        {
            "name": "Board Structure Revisions"
        },
        {
            "name": "Board History"
        },
        {
            "name": "Workflows"
        },
        {
            "name": "Lanes"
        },
        {
            "name": "Columns"
        },
        {
            "name": "Cell Limits"
        },
        {
            "name": "Merged Areas"
        },
        {
            "name": "Lane Section Limits"
        },
        {
            "name": "Board Assignees"
        },
        {
            "name": "Board Block Reasons"
        },
        {
            "name": "Board Discard Reasons"
        },
        {
            "name": "Board Stickers"
        },
        {
            "name": "Board Tags"
        },
        {
            "name": "Board Card Templates"
        },
        {
            "name": "Board Card Types"
        },
        {
            "name": "Board Custom Fields"
        },
        {
            "name": "Board Custom Field Allowed Values"
        },
        {
            "name": "Board Custom Field Default Contributors"
        },
        {
            "name": "Board Visible Standard Fields"
        },
        {
            "name": "Board Teams"
        },
        {
            "name": "Board Child and Parent Cards"
        },
        {
            "name": "Dashboard Pages"
        },
        {
            "name": "Dashboard Page Teams"
        },
        {
            "name": "Dashboard Page Users"
        },
        {
            "name": "Dashboard Page Workspaces"
        },
        {
            "name": "Me"
        },
        {
            "name": "My Dashboard Pages"
        },
        {
            "name": "My Dashboard Page Settings"
        },
        {
            "name": "My Dashboard Page Widgets"
        },
        {
            "name": "My Dashboard Page Workspaces"
        },
        {
            "name": "Related Workflows"
        },
        {
            "name": "Managed Workspaces"
        },
        {
            "name": "Users"
        },
        {
            "name": "User Activity"
        },
        {
            "name": "User Boards"
        },
        {
            "name": "User History"
        },
        {
            "name": "User Involved Business Rules"
        },
        {
            "name": "User Teams"
        },
        {
            "name": "My Api Key Generate"
        },
        {
            "name": "Global User Privileges"
        },
        {
            "name": "Roles"
        },
        {
            "name": "Role Permissions"
        },
        {
            "name": "Block Reasons"
        },
        {
            "name": "Block Reason Boards"
        },
        {
            "name": "Block Reason Cards"
        },
        {
            "name": "Block Reason History"
        },
        {
            "name": "Discard Reasons"
        },
        {
            "name": "Discard Reason Boards"
        },
        {
            "name": "Discard Reason Cards"
        },
        {
            "name": "Discard Reason History"
        },
        {
            "name": "Stickers"
        },
        {
            "name": "Sticker Boards"
        },
        {
            "name": "Sticker Cards"
        },
        {
            "name": "Sticker History"
        },
        {
            "name": "Tags"
        },
        {
            "name": "Tag Boards"
        },
        {
            "name": "Tag Cards"
        },
        {
            "name": "Tag History"
        },
        {
            "name": "Custom Fields"
        },
        {
            "name": "Custom Field Allowed Values"
        },
        {
            "name": "Custom Field Boards"
        },
        {
            "name": "Custom Field Cards"
        },
        {
            "name": "Custom Field History"
        },
        {
            "name": "Teams"
        },
        {
            "name": "Team Boards"
        },
        {
            "name": "Team Users"
        },
        {
            "name": "Team Managers"
        },
        {
            "name": "Team History"
        },
        {
            "name": "Cards"
        },
        {
            "name": "Cards Create Many"
        },
        {
            "name": "Cards Update Many"
        },
        {
            "name": "Cards Delete Many"
        },
        {
            "name": "Card Attachments"
        },
        {
            "name": "Card Co Owners"
        },
        {
            "name": "Card Comments"
        },
        {
            "name": "Card Comment Attachments"
        },
        {
            "name": "Card Outcomes"
        },
        {
            "name": "Card Outcome Checkpoints"
        },
        {
            "name": "Card Outcome Current Value"
        },
        {
            "name": "Card Outcome Values"
        },
        {
            "name": "Card Subtasks"
        },
        {
            "name": "Card Subtask Attachments"
        },
        {
            "name": "Card Watched"
        },
        {
            "name": "Card Watchers"
        },
        {
            "name": "Card Templates"
        },
        {
            "name": "Card Template Cards"
        },
        {
            "name": "Card Template Card Attachments"
        },
        {
            "name": "Card Template Card Child Cards"
        },
        {
            "name": "Card Template Card Co Owners"
        },
        {
            "name": "Card Template Card Custom Fields"
        },
        {
            "name": "Card Template Card Custom Field Selected Values"
        },
        {
            "name": "Card Template Card Custom Field Files"
        },
        {
            "name": "Card Template Card Custom Field Contributors"
        },
        {
            "name": "Card Template Card Parent Cards"
        },
        {
            "name": "Card Template Card Predecessor Cards"
        },
        {
            "name": "Card Template Card Relative Cards"
        },
        {
            "name": "Card Template Card Stickers"
        },
        {
            "name": "Card Template Card Subtasks"
        },
        {
            "name": "Card Template Card Subtask Attachments"
        },
        {
            "name": "Card Template Card Successor Cards"
        },
        {
            "name": "Card Template Card Tags"
        },
        {
            "name": "Card Template Card Watchers"
        },
        {
            "name": "Card Template History"
        },
        {
            "name": "Card Types"
        },
        {
            "name": "Card Type Boards"
        },
        {
            "name": "Card Type Cards"
        },
        {
            "name": "Card Type History"
        },
        {
            "name": "Card Block Reason"
        },
        {
            "name": "Card Stickers"
        },
        {
            "name": "Card Tags"
        },
        {
            "name": "Card Custom Fields"
        },
        {
            "name": "Card Custom Field Selected Values"
        },
        {
            "name": "Card Custom Field Files"
        },
        {
            "name": "Card Custom Field Contributors"
        },
        {
            "name": "Card Custom Field Votes"
        },
        {
            "name": "Card Custom Field Selected Cards"
        },
        {
            "name": "Card Revisions"
        },
        {
            "name": "Linked Cards"
        },
        {
            "name": "Child and Parent Cards"
        },
        {
            "name": "Child Cards"
        },
        {
            "name": "Parent Cards"
        },
        {
            "name": "Relative Cards"
        },
        {
            "name": "Predecessor Cards"
        },
        {
            "name": "Successor Cards"
        },
        {
            "name": "Archived Card Versions"
        },
        {
            "name": "Logged Time"
        },
        {
            "name": "Logged Time History"
        },
        {
            "name": "Webhooks"
        },
        {
            "name": "Webhook History"
        },
        {
            "name": "Check SPF Record"
        },
        {
            "name": "My Favorite Boards"
        },
        {
            "name": "My App Settings"
        },
        {
            "name": "My Board Settings"
        },
        {
            "name": "My Boards Settings"
        },
        {
            "name": "Company Settings"
        },
        {
            "name": "Company Plans"
        },
        {
            "name": "Company Plan Trials"
        },
        {
            "name": "Company Addons"
        },
        {
            "name": "Company Addon Trials"
        },
        {
            "name": "Business Rule Execution History"
        },
        {
            "name": "Email Integration Errors"
        },
        {
            "name": "Email Integration History"
        },
        {
            "name": "Api Request History"
        },
        {
            "name": "Old Api Request History"
        },
        {
            "name": "Api Limits"
        },
        {
            "name": "Old Api Limits"
        },
        {
            "name": "Exports"
        }
    ],
    "paths": {
        "\/workspaces": {
            "get": {
                "tags": [
                    "Workspaces"
                ],
                "summary": "Get a list of workspaces",
                "description": "Get a list of workspaces matching some optional criteria.",
                "operationId": "getWorkspaces",
                "parameters": [
                    {
                        "name": "workspace_ids",
                        "in": "query",
                        "description": "A list of the workspace ids that you want to get.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "When set to 1 you will only get team workspaces. When set to 2 you will only get management workspaces.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                1,
                                2
                            ]
                        }
                    },
                    {
                        "name": "is_archived",
                        "in": "query",
                        "description": "When set to 0 you will only get non-archived workspaces. When set to 1 you will only get archived workspaces.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "if_workspace_manager",
                        "in": "query",
                        "description": "When set to 1 you will only get workspaces for which you are a workspace manager.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "if_assigned_to_boards",
                        "in": "query",
                        "description": "When set to 1 you will only get workspaces in which you are assigned to at least one board.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "board_filter_is_archived",
                        "in": "query",
                        "description": "When set to 0 or 1 and the optional expand parameter includes boards, you will only get non archived \/ archived boards respectively.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "board_filter_if_assigned",
                        "in": "query",
                        "description": "When set to 1 and the optional expand parameter includes boards, you will only get boards you are assigned to.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "A list of fields that you want in the response. The allowed fields are: workspace_id, is_archived and name.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "workspace_id",
                                    "type",
                                    "is_archived",
                                    "name"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "A list of properties for which you want to get additional details. The only allowed property at the moment is boards optionally followed by a list of fields inside square brackets. For boards the allowed fields are board_id, is_archived and name.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of workspaces.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "workspace_id": {
                                                                "description": "Workspace id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/Workspace"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Workspaces"
                ],
                "summary": "Create a workspace",
                "description": "Create a new workspace.",
                "operationId": "createWorkspace",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Workspace data.",
                                "required": [
                                    "name"
                                ],
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "The name of the new workspace.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 100
                                    },
                                    "type": {
                                        "description": "The type of the workspace: 1 - team workspace, 2 - management workspace.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            1,
                                            2
                                        ],
                                        "default": 1
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "allOf": [
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "workspace_id": {
                                                            "description": "Workspace id.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        }
                                                    }
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/Workspace"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/workspaces\/{workspace_id}": {
            "get": {
                "tags": [
                    "Workspaces"
                ],
                "summary": "Get the details of a single workspace",
                "description": "Get the details of a single workspace.",
                "operationId": "getWorkspace",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Workspace"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Workspaces"
                ],
                "summary": "Update a workspace",
                "description": "Update a workspace.",
                "operationId": "updateWorkspace",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Workspace data.",
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "The name of the workspace.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 100
                                    },
                                    "is_archived": {
                                        "description": "Controls whether the workspace is archived or not.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Workspace"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/workspaceIdInPath"
                }
            ]
        },
        "\/workspaces\/{workspace_id}\/managers": {
            "get": {
                "tags": [
                    "Workspace Managers"
                ],
                "summary": "Get a list of workspace managers",
                "description": "Get a list of the workspace managers for a workspace.",
                "operationId": "getWorkspaceManagers",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of workspace managers.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "manager_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/workspaceIdInPath"
                }
            ]
        },
        "\/workspaces\/{workspace_id}\/managers\/{user_id}": {
            "get": {
                "tags": [
                    "Workspace Managers"
                ],
                "summary": "Check if a user is a workspace manager",
                "description": "Check if a user is a workspace manager.",
                "operationId": "checkWorkspaceManager",
                "responses": {
                    "204": {
                        "description": "The user is a workspace manager! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Workspace Managers"
                ],
                "summary": "Make a user a workspace manager",
                "description": "Make a user a workspace manager.",
                "operationId": "addWorkspaceManager",
                "responses": {
                    "204": {
                        "description": "The user is now a workspace manager."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Workspace Managers"
                ],
                "summary": "Make a user not a workspace manager",
                "description": "Make a user not a workspace manager.",
                "operationId": "removeWorkspaceManager",
                "responses": {
                    "204": {
                        "description": "The user is no longer a workspace manager."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/workspaceIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/userIdInPath"
                }
            ]
        },
        "\/workspaces\/history": {
            "get": {
                "tags": [
                    "Workspace History"
                ],
                "summary": "Get a list of workspace management history events.",
                "description": "Get a list of workspace management history events.",
                "operationId": "getWorkspacesHistory",
                "parameters": [
                    {
                        "name": "workspace_ids",
                        "in": "query",
                        "description": "A list of the workspace ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the workspace.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "workspace_created",
                                    "workspace_updated",
                                    "workspace_archived",
                                    "workspace_unarchived",
                                    "board_created",
                                    "board_renamed",
                                    "board_deleted",
                                    "board_archived",
                                    "board_unarchived",
                                    "board_moved_out",
                                    "board_moved_in",
                                    "wm_added",
                                    "wm_removed",
                                    "added_to_dashboard_page",
                                    "removed_from_dashboard_page"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "pagination": {
                                            "type": "object",
                                            "properties": {
                                                "all_pages": {
                                                    "description": "The number of pages the result is split into.",
                                                    "type": "integer"
                                                },
                                                "current_page": {
                                                    "description": "The current page.",
                                                    "type": "integer"
                                                },
                                                "results_per_page": {
                                                    "description": "The number of results per page.",
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "data": {
                                            "description": "A list of workspace management history events.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/WorkspaceHistoryEvent"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/boards": {
            "get": {
                "tags": [
                    "Boards"
                ],
                "summary": "Get a list of boards",
                "description": "Get a list of boards matching some optional criteria.",
                "operationId": "getBoards",
                "parameters": [
                    {
                        "name": "board_ids",
                        "in": "query",
                        "description": "A list of the board ids that you want to get.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "workspace_ids",
                        "in": "query",
                        "description": "A list of the workspace ids holding the boards that you want to get.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "is_archived",
                        "in": "query",
                        "description": "When set to 0 you will only get non-archived boards. When set to 1 you will only get archived boards.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "if_assigned",
                        "in": "query",
                        "description": "When set to 1 you will only get boards to which you are assigned.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "A list of fields that you want in the response. The allowed fields are: board_id, workspace_id, is_archived, name and description.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "board_id",
                                    "workspace_id",
                                    "is_archived",
                                    "name",
                                    "description"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "A list of properties for which you want to get additional details. The allowed properties at the moment are: workflows, settings and structure.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "workflows",
                                    "settings",
                                    "structure"
                                ]
                            }
                        },
                        "explode": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of boards.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "board_id": {
                                                                "description": "Board id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/Board"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Boards"
                ],
                "summary": "Create a board",
                "description": "Create a new board.",
                "operationId": "createBoard",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Board data.",
                                "required": [
                                    "workspace_id",
                                    "name"
                                ],
                                "type": "object",
                                "properties": {
                                    "workspace_id": {
                                        "description": "The id of the workspace to hold the new board.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "name": {
                                        "description": "The name of the new board.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 100
                                    },
                                    "description": {
                                        "description": "The description of the new board.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "allOf": [
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "board_id": {
                                                            "description": "Board id.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        }
                                                    }
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/Board"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/boards\/{board_id}": {
            "get": {
                "tags": [
                    "Boards"
                ],
                "summary": "Get the details of a single board",
                "description": "Get the details of a single board.",
                "operationId": "getBoard",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Board"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Boards"
                ],
                "summary": "Update a board",
                "description": "Update a board.",
                "operationId": "updateBoard",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Board data.",
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "The name of the board.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 100
                                    },
                                    "description": {
                                        "description": "The description of the new board.",
                                        "type": "string"
                                    },
                                    "is_archived": {
                                        "description": "Controls whether the board is archived or not.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Board"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Boards"
                ],
                "summary": "Delete a board",
                "description": "Delete a board.",
                "operationId": "deleteBoard",
                "responses": {
                    "204": {
                        "description": "The board has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/settings": {
            "get": {
                "tags": [
                    "Board Settings"
                ],
                "summary": "Get the values of the board settings",
                "description": "Get the values of the board settings.",
                "operationId": "getBoardSettings",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/BoardSettings"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Board Settings"
                ],
                "summary": "Set the values of the board settings",
                "description": "Set the values of the board settings.",
                "operationId": "setBoardSettings",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/BoardSettings"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/BoardSettings"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/currentStructure": {
            "get": {
                "tags": [
                    "Board Structure"
                ],
                "summary": "Get the current board structure",
                "description": "Get all the information necessary to draw a board: the board details, its settings, workflows, lanes, columns, merged areas and cell limits.",
                "operationId": "getCurrentBoardStructure",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/BoardStructure"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/currentStructure\/revision": {
            "get": {
                "tags": [
                    "Board Structure"
                ],
                "summary": "Get the current revision of the board structure",
                "description": "Get only the revision number of the current board structure.",
                "operationId": "getCurrentBoardStructureRevision",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A role id.",
                                            "type": "object",
                                            "properties": {
                                                "role_id": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/structureRevisions": {
            "get": {
                "tags": [
                    "Board Structure Revisions"
                ],
                "summary": "Get a list of revisions of the board structure",
                "description": "Get a list of the revisions of the board structure and the date and time they were replaced.",
                "operationId": "getBoardStructureRevisions",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A role id.",
                                            "type": "object",
                                            "properties": {
                                                "role_id": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                },
                                                "replaced_at": {
                                                    "format": "date-time",
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/structureRevisions\/{revision}": {
            "get": {
                "tags": [
                    "Board Structure Revisions"
                ],
                "summary": "Get a specific revision of the board structure",
                "description": "Get a specific revision of the board structure.",
                "operationId": "getBoardStructureRevision",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/BoardStructure"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/revisionInPath"
                }
            ]
        },
        "\/boards\/history": {
            "get": {
                "tags": [
                    "Board History"
                ],
                "summary": "Get a list of board management history events.",
                "description": "Get a list of board management history events.",
                "operationId": "getBoardsHistory",
                "parameters": [
                    {
                        "name": "board_ids",
                        "in": "query",
                        "description": "A list of the board ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the board.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "board_created",
                                    "board_updated",
                                    "board_archived",
                                    "board_unarchived",
                                    "board_moved",
                                    "workflow_created",
                                    "workflow_updated",
                                    "workflow_deleted",
                                    "workflow_disabled",
                                    "workflow_enabled",
                                    "lane_created",
                                    "lane_renamed",
                                    "lane_deleted",
                                    "lane_moved",
                                    "column_created",
                                    "column_renamed",
                                    "column_deleted",
                                    "column_moved",
                                    "cell_limits_updated",
                                    "lane_section_limits_updated",
                                    "merged_areas_updated",
                                    "related_boards_updated",
                                    "user_assigned",
                                    "user_unassigned",
                                    "user_role_changed",
                                    "discard_reason_added",
                                    "discard_reason_removed",
                                    "block_reason_added",
                                    "block_reason_removed",
                                    "sticker_added",
                                    "sticker_removed",
                                    "card_type_added",
                                    "card_type_removed",
                                    "tag_added",
                                    "tag_removed",
                                    "card_template_added",
                                    "card_template_removed",
                                    "custom_field_added",
                                    "custom_field_removed",
                                    "team_added",
                                    "team_role_changed",
                                    "team_removed",
                                    "cell_card_orderings_updated"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "pagination": {
                                            "type": "object",
                                            "properties": {
                                                "all_pages": {
                                                    "description": "The number of pages the result is split into.",
                                                    "type": "integer"
                                                },
                                                "current_page": {
                                                    "description": "The current page.",
                                                    "type": "integer"
                                                },
                                                "results_per_page": {
                                                    "description": "The number of results per page.",
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "data": {
                                            "description": "A list of board management history events.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/BoardHistoryEvent"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/boards\/{board_id}\/workflows": {
            "get": {
                "tags": [
                    "Workflows"
                ],
                "summary": "Get workflow details",
                "description": "Check if board workflows exists and get their details.",
                "operationId": "getWorkflows",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "allOf": [
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "workflow_id": {
                                                            "description": "Workflow id.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        }
                                                    }
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/Workflow"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Workflows"
                ],
                "summary": "Create workflow",
                "description": "Create a new workflow",
                "operationId": "createWorkflow",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Workflow data.",
                                "type": "object",
                                "properties": {
                                    "position": {
                                        "description": "Postion of the workflow within the board.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "is_enabled": {
                                        "description": "Controls whether the workflow is enabled.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ],
                                        "default": 1
                                    },
                                    "is_collapsible": {
                                        "description": "Controls whether the workflow is collapsible.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ],
                                        "default": 1
                                    },
                                    "name": {
                                        "description": "The name of the new workflow.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 100
                                    },
                                    "type": {
                                        "description": "The type of workflow can be 0 - cards workflow, 1 - initiatives workflow or 2 - timeline.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1,
                                            2
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "allOf": [
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "workflow_id": {
                                                            "description": "Workflow id.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        }
                                                    }
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/Workflow"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/workflows\/{workflow_id}": {
            "get": {
                "tags": [
                    "Workflows"
                ],
                "summary": "Get workflow details",
                "description": "Check if a workflow exists and get its details.",
                "operationId": "getWorkflow",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Workflow"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Workflows"
                ],
                "summary": "Update workflow",
                "description": "Update workflow`s properties",
                "operationId": "updateWorkflow",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Workflow data.",
                                "type": "object",
                                "properties": {
                                    "position": {
                                        "description": "Postion of the workflow within the board.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "is_enabled": {
                                        "description": "Controls whether the workflow is enabled.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ],
                                        "default": 1
                                    },
                                    "is_collapsible": {
                                        "description": "Controls whether the workflow is collapsible.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ],
                                        "default": 1
                                    },
                                    "name": {
                                        "description": "The name of the new workflow.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 100
                                    },
                                    "type": {
                                        "description": "The type of workflow can be 0 - cards workflow, 1 - initiatives workflow or 2 - timeline.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1,
                                            2
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Workflow"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Workflows"
                ],
                "summary": "Delete a workflow",
                "description": "Delete a workflow.",
                "operationId": "workflowDelete",
                "responses": {
                    "204": {
                        "description": "The workflow has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/workflowIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/workflows\/{workflow_id}\/copy": {
            "post": {
                "tags": [
                    "Workflows"
                ],
                "summary": "Copy a workflow",
                "description": "Copy existing workflow.",
                "operationId": "copyWorkflow",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Workflow data.",
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "Name of the new workflow.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 100
                                    },
                                    "to_board_id": {
                                        "description": "Where the workflow will be copied.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "copy_service_level_expectations": {
                                        "description": "Controls whether to copy service level expectations.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ],
                                        "default": 1
                                    },
                                    "copy_column_checklist_items": {
                                        "description": "Controls whether to copy exit criteria.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ],
                                        "default": 1
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/WorkflowCopy"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/workflowIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/lanes": {
            "get": {
                "tags": [
                    "Lanes"
                ],
                "summary": "Get a list of lanes",
                "description": "Get a list of the lanes in a specified board.",
                "operationId": "getLanes",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "A list of fields that you want in the response. The allowed fields are: lane_id, workflow, parent_lane_id, position, name, description and color.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "lane_id",
                                    "workflow_id",
                                    "parent_lane_id",
                                    "position",
                                    "name",
                                    "description",
                                    "color"
                                ]
                            }
                        },
                        "explode": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of lanes.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "lane_id": {
                                                                "description": "Lane id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/Lane"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Lanes"
                ],
                "summary": "Create a lane",
                "description": "Create a new lane.",
                "operationId": "createLane",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Lane data.",
                                "required": [
                                    "position",
                                    "name"
                                ],
                                "type": "object",
                                "properties": {
                                    "workflow_id": {
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "parent_lane_id": {
                                        "description": "The id of the parent lane. One of workflow and parent_lane_id must be set, but not both!",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "position": {
                                        "description": "The position of the lane within the workflow or its parent.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "name": {
                                        "description": "The name of the new lane.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 100
                                    },
                                    "description": {
                                        "description": "A description of the new lane.",
                                        "type": "string",
                                        "default": null
                                    },
                                    "color": {
                                        "description": "The lane color. 6 hexadecimal characters are expected.",
                                        "type": "string",
                                        "default": "ffffff"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "allOf": [
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "lane_id": {
                                                            "description": "Lane id.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        }
                                                    }
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/Lane"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/lanes\/{lane_id}": {
            "get": {
                "tags": [
                    "Lanes"
                ],
                "summary": "Get the details of a single lane",
                "description": "Get the details of a single lane.",
                "operationId": "getLane",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Lane"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Lanes"
                ],
                "summary": "Update a lane",
                "description": "Update a lane.",
                "operationId": "updateLane",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Lane data.",
                                "type": "object",
                                "properties": {
                                    "parent_lane_id": {
                                        "description": "The id of the parent lane or 0 if you want to make the lane a top lane.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "position": {
                                        "description": "The position of the lane within the workflow or its parent.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "name": {
                                        "description": "The name of the lane.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 100
                                    },
                                    "description": {
                                        "description": "A description of the lane.",
                                        "type": "string"
                                    },
                                    "color": {
                                        "description": "The lane color. 6 hexadecimal characters are expected.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Lane"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Lanes"
                ],
                "summary": "Delete a lane",
                "description": "Delete a lane.",
                "operationId": "deleteLane",
                "parameters": [
                    {
                        "name": "move_cards_to_lane_id",
                        "in": "query",
                        "description": "The id of a lane to which to move the cards from the deleted lane, if there are any.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "move_metrics_to_lane_id",
                        "in": "query",
                        "description": "The id of a lane to which to move the cycle time data associated with the deleted lane, if there is any. If this parameter is not provided or is null the cycle time data will be discarded!",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The lane has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/laneIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/columns": {
            "get": {
                "tags": [
                    "Columns"
                ],
                "summary": "Get a list of columns",
                "description": "Get a list of the columns in a specified board.",
                "operationId": "getColumns",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "A list of fields that you want in the response. The allowed fields are: column_id, workflow, section, parent_column_id, position, name, description, color, limit, cards_per_row and flow_type.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "column_id",
                                    "workflow_id",
                                    "section",
                                    "parent_column_id",
                                    "position",
                                    "name",
                                    "description",
                                    "color",
                                    "limit",
                                    "cards_per_row",
                                    "flow_type"
                                ]
                            }
                        },
                        "explode": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of columns.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "column_id": {
                                                                "description": "Column id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/Column"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Columns"
                ],
                "summary": "Create a column",
                "description": "Create a new column.",
                "operationId": "createColumn",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Column data.",
                                "required": [
                                    "position",
                                    "name"
                                ],
                                "type": "object",
                                "properties": {
                                    "workflow_id": {
                                        "description": "An id that indentifies a workflow.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "section": {
                                        "description": "1 - backlog, 2 - requested, 3 - progress, 4 - done. 2, 3 and 4 are only valid for the cards workflow. Either workflow and section or parent_column_id must be set, but not all of them!",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            1,
                                            2,
                                            3,
                                            4
                                        ]
                                    },
                                    "parent_column_id": {
                                        "description": "The id of the parent column. Either workflow and section or parent_column_id must be set, but not all of them!",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "position": {
                                        "description": "The position of the column within the section or its parent.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "name": {
                                        "description": "The name of the new column.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 100
                                    },
                                    "description": {
                                        "description": "A description of the new column.",
                                        "type": "string",
                                        "default": null
                                    },
                                    "color": {
                                        "description": "The column color. 6 hexadecimal characters or an empty string is expected.",
                                        "type": "string",
                                        "default": null
                                    },
                                    "limit": {
                                        "description": "The WIP limit of the column.",
                                        "format": "int32",
                                        "type": "integer",
                                        "default": 0
                                    },
                                    "cards_per_row": {
                                        "description": "The number of cards per row displayed in the cells of this column.",
                                        "format": "int32",
                                        "type": "integer",
                                        "default": 1
                                    },
                                    "flow_type": {
                                        "description": "1 - if the column is an activity, 2 - if the column is a queue.",
                                        "format": "int32",
                                        "type": "integer",
                                        "default": 1,
                                        "enum": [
                                            1,
                                            2
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "allOf": [
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "column_id": {
                                                            "description": "Column id.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        }
                                                    }
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/Column"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/columns\/{column_id}": {
            "get": {
                "tags": [
                    "Columns"
                ],
                "summary": "Get the details of a single column",
                "description": "Get the details of a single column.",
                "operationId": "getColumn",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Column"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Columns"
                ],
                "summary": "Update a column",
                "description": "Update a column.",
                "operationId": "updateColumn",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Column data.",
                                "type": "object",
                                "properties": {
                                    "section": {
                                        "description": "1 - backlog, 2 - requested, 3 - progress, 4 - done. 2, 3 and 4 are only valid for the cards workflow. Either workflow and section or parent_column_id must be set, but not all of them!",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            1,
                                            2,
                                            3,
                                            4
                                        ]
                                    },
                                    "parent_column_id": {
                                        "description": "The id of the parent column. One of section and parent_column_id may be set, but not both!",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "position": {
                                        "description": "The position of the column within the section or its parent.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "name": {
                                        "description": "The name of the column.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 100
                                    },
                                    "description": {
                                        "description": "A description of the column.",
                                        "type": "string"
                                    },
                                    "color": {
                                        "description": "The column color. 6 hexadecimal characters are expected.",
                                        "type": "string"
                                    },
                                    "limit": {
                                        "description": "The WIP limit of the column.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "cards_per_row": {
                                        "description": "The number of cards per row displayed in the cells of this column.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "flow_type": {
                                        "description": "1 - if the column is an activity, 2 - if the column is a queue.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            1,
                                            2
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Column"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Columns"
                ],
                "summary": "Delete a column",
                "description": "Delete a column.",
                "operationId": "deleteColumn",
                "parameters": [
                    {
                        "name": "move_cards_to_column_id",
                        "in": "query",
                        "description": "The id of a column to which to move the cards from the deleted column, if there are any.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "move_metrics_to_column_id",
                        "in": "query",
                        "description": "The id of a column to which to move the cycle time data associated with the deleted column, if there is any. If this parameter is not provided or is null the cycle time data will be discarded!",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The column has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/columnIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/cellLimits": {
            "get": {
                "tags": [
                    "Cell Limits"
                ],
                "summary": "Get a list of cell limits",
                "description": "Get a list of the cell limits for a specified board.",
                "operationId": "getCellLimits",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of cell limits.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CellLimit"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Cell Limits"
                ],
                "summary": "Set a cell limit",
                "description": "Set a cell limit.",
                "operationId": "setCellLimit",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Cell limit data.",
                                "required": [
                                    "lane_id",
                                    "column_id",
                                    "limit"
                                ],
                                "type": "object",
                                "properties": {
                                    "lane_id": {
                                        "description": "The lane id of the cell.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "column_id": {
                                        "description": "The column id of the cell.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "limit": {
                                        "description": "The WIP limit of the cell. Set to 0 to remove the current WIP limit.",
                                        "format": "int32",
                                        "type": "integer",
                                        "maximum": 10000
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CellLimit"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/mergedAreas": {
            "get": {
                "tags": [
                    "Merged Areas"
                ],
                "summary": "Get a list of merged areas",
                "description": "Get a list of the merged areas in a specified board.",
                "operationId": "getMergedAreas",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of merged areas.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "area_id": {
                                                                "description": "Area id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/MergedArea"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Merged Areas"
                ],
                "summary": "Create a merged area",
                "description": "Create a new merged area.",
                "operationId": "createMergedArea",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Merged area data.",
                                "required": [
                                    "lane_ids",
                                    "column_ids",
                                    "primary_column_id"
                                ],
                                "type": "object",
                                "properties": {
                                    "lane_ids": {
                                        "description": "The ids of the lanes which are a part of the merged area.",
                                        "type": "array",
                                        "items": {
                                            "format": "int32",
                                            "type": "integer"
                                        }
                                    },
                                    "column_ids": {
                                        "description": "The ids of the columns which are a part of the merged area.",
                                        "type": "array",
                                        "items": {
                                            "format": "int32",
                                            "type": "integer"
                                        }
                                    },
                                    "primary_column_id": {
                                        "description": "The id of the primary column.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "limit": {
                                        "description": "The WIP limit of the merged area.",
                                        "format": "int32",
                                        "type": "integer",
                                        "default": 0
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "allOf": [
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "area_id": {
                                                            "description": "Area id.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        }
                                                    }
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/MergedArea"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/mergedAreas\/{area_id}": {
            "get": {
                "tags": [
                    "Merged Areas"
                ],
                "summary": "Get the details of a single merged area",
                "description": "Get the details of a single merged area.",
                "operationId": "getMergedArea",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/MergedArea"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Merged Areas"
                ],
                "summary": "Update a merged area",
                "description": "Update a merged area.",
                "operationId": "updateMergedArea",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Merged area data.",
                                "type": "object",
                                "properties": {
                                    "lane_ids": {
                                        "description": "The ids of the lanes which are a part of the merged area.",
                                        "type": "array",
                                        "items": {
                                            "format": "int32",
                                            "type": "integer"
                                        }
                                    },
                                    "column_ids": {
                                        "description": "The ids of the columns which are a part of the merged area.",
                                        "type": "array",
                                        "items": {
                                            "format": "int32",
                                            "type": "integer"
                                        }
                                    },
                                    "primary_column_id": {
                                        "description": "The id of the primary column.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "limit": {
                                        "description": "The WIP limit of the merged area.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/MergedArea"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Merged Areas"
                ],
                "summary": "Delete a merged area",
                "description": "Split the merged area into its individual cells.",
                "operationId": "deleteMergedArea",
                "responses": {
                    "204": {
                        "description": "The merged area has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/areaIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/laneSectionLimits": {
            "get": {
                "tags": [
                    "Lane Section Limits"
                ],
                "summary": "Get a list of lane section limits",
                "description": "Get a list of the lane section limits for a specified board.",
                "operationId": "getLaneSectionLimits",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of lane section limits.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/LaneSectionLimit"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Lane Section Limits"
                ],
                "summary": "Set a lane section limit",
                "description": "Set a lane section limit.",
                "operationId": "setLaneSectionLimit",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Lane section limit data.",
                                "required": [
                                    "lane_id",
                                    "section",
                                    "limit"
                                ],
                                "type": "object",
                                "properties": {
                                    "lane_id": {
                                        "description": "The lane id.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "section": {
                                        "description": "1 - backlog, 2 - requested, 3 - progress, 4 - done",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            1,
                                            2,
                                            3,
                                            4
                                        ]
                                    },
                                    "limit": {
                                        "description": "The WIP limit of the lane section. Set to 0 to remove the current WIP limit.",
                                        "format": "int32",
                                        "type": "integer",
                                        "maximum": 10000
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/LaneSectionLimit"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/userRoles": {
            "get": {
                "tags": [
                    "Board Assignees"
                ],
                "summary": "Get a list of board assignees",
                "description": "Get a list of the assignees for a board and their roles.",
                "operationId": "getBoardAssignees",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of board assignees and their roles.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "user_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "role_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/userRoles\/{user_id}": {
            "get": {
                "tags": [
                    "Board Assignees"
                ],
                "summary": "Get the role of a board assignee",
                "description": "Check if a user is assigned to a board and with what role.",
                "operationId": "getBoardUserRole",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A role id.",
                                            "type": "object",
                                            "properties": {
                                                "role_id": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Board Assignees"
                ],
                "summary": "Assign a user to a board",
                "description": "Assign a user to a board or change his or her role.",
                "operationId": "setBoardUserRole",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Role data.",
                                "required": [
                                    "role_id"
                                ],
                                "type": "object",
                                "properties": {
                                    "role_id": {
                                        "description": "The role id.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The user is now a board manager."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Board Assignees"
                ],
                "summary": "Unassign a user from a board",
                "description": "Unassign a user from a board.",
                "operationId": "unsetBoardUserRole",
                "responses": {
                    "204": {
                        "description": "The user is no longer a board manager."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/userIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/relatedWorkflows": {
            "get": {
                "tags": [
                    "Related Workflows"
                ],
                "summary": "Get a list of related workflows",
                "description": "Get a list of boards and workflows related to a specified board.",
                "operationId": "getRelatedBoardsWorlflows",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of boards and workflows.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "board_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/relatedWorkflows\/{workflow_id}": {
            "get": {
                "tags": [
                    "Related Workflows"
                ],
                "summary": "Check if a board is related to another board and workflow",
                "description": "Check if a board is related to another board and workflow.",
                "operationId": "checkBoardRelatedWorkflow",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A position in workflow.",
                                            "type": "object",
                                            "properties": {
                                                "position": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Related Workflows"
                ],
                "summary": "Add a related workflow on a board",
                "description": "Add a related workflow on a board.",
                "operationId": "addBoardRelatedWorkflow",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Position of the workflow",
                                "type": "object",
                                "properties": {
                                    "position": {
                                        "description": "The position of the workflow.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A position in workflow.",
                                            "type": "object",
                                            "properties": {
                                                "position": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Related Workflows"
                ],
                "summary": "Update a related workflow on a board",
                "description": "Update a related workflow on a board.",
                "operationId": "updateBoardRelatedWorkflow",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Position of the workflow",
                                "type": "object",
                                "properties": {
                                    "position": {
                                        "description": "The position of the workflow.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A position in workflow.",
                                            "type": "object",
                                            "properties": {
                                                "position": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Related Workflows"
                ],
                "summary": "Remove a related board workflow",
                "description": "Remove a related board workflow.",
                "operationId": "removeBoardRelatedWorkflow",
                "responses": {
                    "204": {
                        "description": "The boards has no longer a realted workflow."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/workflowIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/blockReasons": {
            "get": {
                "tags": [
                    "Board Block Reasons"
                ],
                "summary": "Get a list of block reasons available on a board",
                "description": "Get a list of the block reasons available on a board.",
                "operationId": "getBoardBlockReasons",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of block reasons.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "reason_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/blockReasons\/{reason_id}": {
            "get": {
                "tags": [
                    "Board Block Reasons"
                ],
                "summary": "Check if a block reason is available on a board",
                "description": "Check if a block reason is available on a board.",
                "operationId": "checkBoardBlockReason",
                "responses": {
                    "204": {
                        "description": "The block reason is available on the board! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Board Block Reasons"
                ],
                "summary": "Make a block reason available on a board",
                "description": "Make a block reason available on a board.",
                "operationId": "addBoardBlockReason",
                "responses": {
                    "204": {
                        "description": "The block reason is now available on the board."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Board Block Reasons"
                ],
                "summary": "Make a block reason unavailable on a board",
                "description": "Make a block reason unavailable on a board.",
                "operationId": "removeBoardBlockReason",
                "responses": {
                    "204": {
                        "description": "The block reason is no longer available on the board."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/blockReasonIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/discardReasons": {
            "get": {
                "tags": [
                    "Board Discard Reasons"
                ],
                "summary": "Get a list of discard reasons available on a board",
                "description": "Get a list of the discard reasons available on a board.",
                "operationId": "getBoardDiscardReasons",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of discard reasons.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "reason_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/discardReasons\/{reason_id}": {
            "get": {
                "tags": [
                    "Board Discard Reasons"
                ],
                "summary": "Check if a discard reason is available on a board",
                "description": "Check if a discard reason is available on a board.",
                "operationId": "checkBoardDiscardReason",
                "responses": {
                    "204": {
                        "description": "The discard reason is available on the board! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Board Discard Reasons"
                ],
                "summary": "Make a discard reason available on a board",
                "description": "Make a discard reason available on a board.",
                "operationId": "addBoardDiscardReason",
                "responses": {
                    "204": {
                        "description": "The discard reason is now available on the board."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Board Discard Reasons"
                ],
                "summary": "Make a discard reason unavailable on a board",
                "description": "Make a discard reason unavailable on a board.",
                "operationId": "removeBoardDiscardReason",
                "responses": {
                    "204": {
                        "description": "The discard reason is no longer available on the board."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/discardReasonIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/stickers": {
            "get": {
                "tags": [
                    "Board Stickers"
                ],
                "summary": "Get a list of stickers available on a board",
                "description": "Get a list of the stickers available on a board.",
                "operationId": "getBoardStickers",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of stickers.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "sticker_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/stickers\/{sticker_id}": {
            "get": {
                "tags": [
                    "Board Stickers"
                ],
                "summary": "Check if a sticker is available on a board",
                "description": "Check if a sticker is available on a board.",
                "operationId": "checkBoardSticker",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "title": "Board sticker",
                                            "description": "Board sticker data",
                                            "type": "object",
                                            "properties": {
                                                "limit_per_board": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                },
                                                "limit_per_card": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Board Stickers"
                ],
                "summary": "Make a sticker available on a board",
                "description": "Make a sticker available on a board.",
                "operationId": "addBoardSticker",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Board sticker data.",
                                "type": "object",
                                "properties": {
                                    "limit_per_board": {
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "limit_per_card": {
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "title": "Board sticker",
                                            "description": "Board sticker data",
                                            "type": "object",
                                            "properties": {
                                                "limit_per_board": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                },
                                                "limit_per_card": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Board Stickers"
                ],
                "summary": "Update the properties of a sticker for a board",
                "description": "Update the properties of a sticker for a board.",
                "operationId": "updateBoardSticker",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Board sticker data.",
                                "type": "object",
                                "properties": {
                                    "limit_per_board": {
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "limit_per_card": {
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "title": "Board sticker",
                                            "description": "Board sticker data",
                                            "type": "object",
                                            "properties": {
                                                "limit_per_board": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                },
                                                "limit_per_card": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Board Stickers"
                ],
                "summary": "Make a sticker unavailable on a board",
                "description": "Make a sticker unavailable on a board.",
                "operationId": "removeBoardSticker",
                "responses": {
                    "204": {
                        "description": "The sticker is no longer available on the board."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/stickerIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/tags": {
            "get": {
                "tags": [
                    "Board Tags"
                ],
                "summary": "Get a list of tags available on a board",
                "description": "Get a list of the tags available on a board.",
                "operationId": "getBoardTags",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of tags.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "tag_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/tags\/{tag_id}": {
            "get": {
                "tags": [
                    "Board Tags"
                ],
                "summary": "Check if a tag is available on a board",
                "description": "Check if a tag is available on a board.",
                "operationId": "checkBoardTag",
                "responses": {
                    "204": {
                        "description": "The tag is available on the board! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Board Tags"
                ],
                "summary": "Make a tag available on a board",
                "description": "Make a tag available on a board.",
                "operationId": "addBoardTag",
                "responses": {
                    "204": {
                        "description": "The tag is now available on the board."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Board Tags"
                ],
                "summary": "Make a tag unavailable on a board",
                "description": "Make a tag unavailable on a board.",
                "operationId": "removeBoardTag",
                "responses": {
                    "204": {
                        "description": "The tag is no longer available on the board."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/tagIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/cardTemplates": {
            "get": {
                "tags": [
                    "Board Card Templates"
                ],
                "summary": "Get a list of card templates available on a board",
                "description": "Get a list of the card templates available on a board.",
                "operationId": "getBoardCardTemplates",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of card templates.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "template_id": {
                                                        "description": "Template id.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/cardTemplates\/{template_id}": {
            "get": {
                "tags": [
                    "Board Card Templates"
                ],
                "summary": "Check if a card template is available on a board",
                "description": "Check if a card template is available on a board.",
                "operationId": "checkBoardCardTemplate",
                "responses": {
                    "204": {
                        "description": "The card template is added to the board! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Board Card Templates"
                ],
                "summary": "Make a card template available on a board",
                "description": "Make a card template available on a board.",
                "operationId": "addBoardCardTemplate",
                "responses": {
                    "204": {
                        "description": "The card template is now available on the board."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Board Card Templates"
                ],
                "summary": "Make a card template unavailable on a board",
                "description": "Make a card template unavailable on a board.",
                "operationId": "removeBoardCardTemplate",
                "responses": {
                    "204": {
                        "description": "The card template is no longer available on the board."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/cardTypes": {
            "get": {
                "tags": [
                    "Board Card Types"
                ],
                "summary": "Get a list of card types available on a board",
                "description": "Get a list of the card types available on a board.",
                "operationId": "getBoardCardTypes",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of card types.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "type_id": {
                                                                "description": "Type id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/BoardCardType"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/cardTypes\/{type_id}": {
            "get": {
                "tags": [
                    "Board Card Types"
                ],
                "summary": "Check if a card type is available on a board",
                "description": "Check if a card type is available on a board.",
                "operationId": "checkBoardCardType",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/BoardCardType"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Board Card Types"
                ],
                "summary": "Make a card type available on a board",
                "description": "Make a card type available on a board.",
                "operationId": "addBoardCardType",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/BoardCardTypeCreateOrUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/BoardCardType"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Board Card Types"
                ],
                "summary": "Make a card type available on a board",
                "description": "Make a card type available on a board.",
                "operationId": "updateBoardCardType",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/BoardCardTypeCreateOrUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/BoardCardType"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Board Card Types"
                ],
                "summary": "Make a card type unavailable on a board",
                "description": "Make a card type unavailable on a board.",
                "operationId": "removeBoardCardType",
                "responses": {
                    "204": {
                        "description": "The card type is no longer available on the board."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/typeIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/cardTypes\/{type_id}\/effectiveSettings": {
            "get": {
                "tags": [
                    "Board Card Types"
                ],
                "summary": "Get the effective settings of a card type for a board if it is available on it",
                "description": "Get the effective settings of a card type for a board if it is available on it.",
                "operationId": "getBoardCardTypeEffectiveSettings",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/BoardCardType"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/typeIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/customFields": {
            "get": {
                "tags": [
                    "Board Custom Fields"
                ],
                "summary": "Get a list of custom fields available on a board and their properties",
                "description": "Get a list of the custom fields available on a board and their properties.",
                "operationId": "getBoardCustomFields",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of board custom field properties.",
                                            "type": "array",
                                            "items": {
                                                "oneOf": [
                                                    {
                                                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataSingleLineWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataMultiLineWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataNumberWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataDateWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataLinkWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataDropdownWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataContributorWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataFileWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataVoteWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataCardPickerWithFieldId"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/customFields\/{field_id}": {
            "get": {
                "tags": [
                    "Board Custom Fields"
                ],
                "summary": "Get the details of a custom field for a board if it is available on it",
                "description": "Get the details of a custom field for a board if it is available on it.",
                "operationId": "getBoardCustomField",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataSingleLine"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataMultiLine"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataNumber"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataDate"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataLink"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataDropdown"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataContributor"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataFile"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataVote"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataCardPicker"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Board Custom Fields"
                ],
                "summary": "Add a custom field to a board",
                "description": "Add a custom field to a board.",
                "operationId": "addBoardCustomField",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestSingleLine"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestMultiLine"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestNumber"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestDate"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestLink"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestDropdown"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestContributor"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestFile"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestVote"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestCardPicker"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataSingleLine"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataMultiLine"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataNumber"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataDate"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataLink"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataDropdown"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataContributor"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataFile"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataVote"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataCardPicker"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Board Custom Fields"
                ],
                "summary": "Update the properties of a custom field for a board",
                "description": "Update the properties of a custom field for a board.",
                "operationId": "updateBoardCustomField",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestSingleLine"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestMultiLine"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestNumber"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestDate"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestLink"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestDropdown"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestContributor"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestFile"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestVote"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestCardPicker"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataSingleLine"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataMultiLine"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataNumber"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataDate"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataLink"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataDropdown"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataContributor"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataFile"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataVote"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/BoardCustomFieldDataCardPicker"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Board Custom Fields"
                ],
                "summary": "Make a custom field unavailable on a board",
                "description": "Make a custom field unavailable on a board.",
                "operationId": "removeBoardCustomField",
                "responses": {
                    "204": {
                        "description": "The custom field is no longer available on the board."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/customFields\/{field_id}\/allowedValues": {
            "get": {
                "tags": [
                    "Board Custom Field Allowed Values"
                ],
                "summary": "Get a list of the allowed values of a custom field of type dropdown for a board",
                "description": "Get a list of the allowed values of a custom field of type dropdown for a board.",
                "operationId": "getBoardCustomFieldAllowedValues",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of allowed values.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "value_id": {
                                                                "description": "Value id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/BoardCustomFieldAllowedValue"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/customFields\/{field_id}\/allowedValues\/{value_id}": {
            "get": {
                "tags": [
                    "Board Custom Field Allowed Values"
                ],
                "summary": "Get the details of a single allowed value for a custom field for a board",
                "description": "Get the details of a single allowed value for a custom field for a board.",
                "operationId": "getBoardCustomFieldAllowedValue",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/BoardCustomFieldAllowedValue"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Board Custom Field Allowed Values"
                ],
                "summary": "Add or update an allowed value for a custom field for a board",
                "description": "Add or update an allowed value for a custom field for a board.",
                "operationId": "addOrUpdateBoardCustomFieldAllowedValue",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Board custom field allowed value data.",
                                "type": "object",
                                "properties": {
                                    "position": {
                                        "description": "The position of the value within the dropdown.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "is_default": {
                                        "description": "Controls whether the value is selected by default.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/BoardCustomFieldAllowedValue"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Board Custom Field Allowed Values"
                ],
                "summary": "Update an allowed value for a custom field for a board",
                "description": "Update an allowed value for a custom field for a board.",
                "operationId": "updateBoardCustomFieldAllowedValue",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Board custom field allowed value data.",
                                "type": "object",
                                "properties": {
                                    "position": {
                                        "description": "The position of the value within the dropdown.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "is_default": {
                                        "description": "Controls whether the value is selected by default.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/BoardCustomFieldAllowedValue"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Board Custom Field Allowed Values"
                ],
                "summary": "Remove an allowed value for a custom field for a board",
                "description": "Remove an allowed value for a custom field for a board.",
                "operationId": "removeBoardCustomFieldAllowedValue",
                "responses": {
                    "204": {
                        "description": "The allowed value has been removed."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/valueIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/customFields\/{field_id}\/defaultContributors": {
            "get": {
                "tags": [
                    "Board Custom Field Default Contributors"
                ],
                "summary": "Get a list of the default contributors for a custom field for a board",
                "description": "Get a list of the default contributors for a custom field for a board.",
                "operationId": "getBoardCustomFieldDefaultContributors",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of default contributors.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "user_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/customFields\/{field_id}\/defaultContributors\/{user_id}": {
            "get": {
                "tags": [
                    "Board Custom Field Default Contributors"
                ],
                "summary": "Check if a contributor is one of the default for a custom field for a board",
                "description": "Check if a contributor is one of the default for a custom field for a board.",
                "operationId": "checkBoardCustomFieldDefaultContributor",
                "responses": {
                    "204": {
                        "description": "The contributor is one of the default for the custom field for the board! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Board Custom Field Default Contributors"
                ],
                "summary": "Make a contributor one of the default for a custom field for a board",
                "description": "Make a contributor one of the default for a custom field for a board.",
                "operationId": "addBoardCustomFieldDefaultContributor",
                "responses": {
                    "204": {
                        "description": "The contributor is now one of the default for the custom field for the board."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Board Custom Field Default Contributors"
                ],
                "summary": "Remove a contributor from the default for a board",
                "description": "Remove a contributor from the default for a board.",
                "operationId": "removeBoardCustomFieldDefaultContributor",
                "responses": {
                    "204": {
                        "description": "The contributor is no longer one of the default for the custom field for the board."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/userIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/visibleStandardFields": {
            "get": {
                "tags": [
                    "Board Visible Standard Fields"
                ],
                "summary": "Get a list of standard fields visible on a board",
                "description": "Get a list of the standard fields visible on a board.",
                "operationId": "getBoardVisibleStandardFields",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "board_id": {
                                            "description": "Board id.",
                                            "format": "int32",
                                            "type": "integer"
                                        },
                                        "last_modified": {
                                            "description": "Last modified.",
                                            "format": "int32",
                                            "type": "integer",
                                            "enum": [
                                                0,
                                                1
                                            ],
                                            "default": 0
                                        },
                                        "in_current_position_since": {
                                            "description": "In current position since.",
                                            "format": "int32",
                                            "type": "integer",
                                            "enum": [
                                                0,
                                                1
                                            ],
                                            "default": 0
                                        },
                                        "created_at": {
                                            "description": "Created at.",
                                            "format": "int32",
                                            "type": "integer",
                                            "enum": [
                                                0,
                                                1
                                            ],
                                            "default": 0
                                        },
                                        "reporter": {
                                            "description": "Reporter.",
                                            "format": "int32",
                                            "type": "integer",
                                            "enum": [
                                                0,
                                                1
                                            ],
                                            "default": 0
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/visibleStandardFields\/{field_name}": {
            "get": {
                "tags": [
                    "Board Visible Standard Fields"
                ],
                "summary": "Check if a standard field is visible on a board",
                "description": "Check if a standard field is visible on a board.",
                "operationId": "checkBoardStandardField",
                "responses": {
                    "204": {
                        "description": "The standard field is visible on the board! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Board Visible Standard Fields"
                ],
                "summary": "Make a standard field visible on a board",
                "description": "Make a standard field visible on a board.",
                "operationId": "addBoardStandardField",
                "responses": {
                    "204": {
                        "description": "The standard field is now visible on the board."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Board Visible Standard Fields"
                ],
                "summary": "Make a standard field unvisible on a board",
                "description": "Make a standard field unvisible on a board.",
                "operationId": "removeBoardStandardField",
                "responses": {
                    "204": {
                        "description": "The standard field is no longer visible on the board."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldName"
                }
            ]
        },
        "\/boards\/{board_id}\/mySettings": {
            "get": {
                "tags": [
                    "My Board Settings"
                ],
                "summary": "Get a list of all board settings and the values you have selected",
                "description": "Get a list of all board settings and the values you have selected.",
                "operationId": "getMyBoardSettings",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of settings.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/Setting"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/mySettings\/{setting_name}": {
            "get": {
                "tags": [
                    "My Board Settings"
                ],
                "summary": "Get the details of an board setting and the value you have set for it",
                "description": "Get the details of an board setting and the value you have set for it.",
                "operationId": "getMyBoardSetting",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Setting"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "My Board Settings"
                ],
                "summary": "Set the value of an board setting",
                "description": "Set the value of an board setting.",
                "operationId": "setMyBoardSetting",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "The value of the setting.",
                                "required": [
                                    "value"
                                ],
                                "type": "object",
                                "properties": {
                                    "value": {
                                        "description": "The value of the setting.",
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The value has been set."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "My Board Settings"
                ],
                "summary": "Remove the value of an board setting",
                "description": "Remove the value of an board setting.",
                "operationId": "removeMyBoardSetting",
                "responses": {
                    "204": {
                        "description": "The value has been removed."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/settingName"
                }
            ]
        },
        "\/myBoardSettingsBatchUpdate": {
            "post": {
                "tags": [
                    "My Boards Settings"
                ],
                "summary": "Set the values of board settings for a list of boards",
                "description": "Set the values of board settings for a list of boards.",
                "operationId": "setMySettingsBoards",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Settings boards data.",
                                "required": [
                                    "board_ids",
                                    "settings"
                                ],
                                "type": "object",
                                "properties": {
                                    "board_ids": {
                                        "description": "A list of board ids where you want to set a list of settings.",
                                        "type": "array",
                                        "items": {
                                            "format": "int32",
                                            "type": "integer"
                                        }
                                    },
                                    "settings": {
                                        "description": "A list of settings whitch you want to set for a list of boards.",
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "setting"
                                            ],
                                            "type": "object",
                                            "properties": {
                                                "setting": {
                                                    "description": "The name of the setting.",
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "The value of the setting.",
                                                    "oneOf": [
                                                        {
                                                            "type": "integer"
                                                        },
                                                        {
                                                            "type": "string"
                                                        }
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The values has been set."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/boards\/{board_id}\/teams": {
            "get": {
                "tags": [
                    "Board Teams"
                ],
                "summary": "Get a list of teams having access to a board",
                "description": "Get a list of the teams having access to a board.",
                "operationId": "getBoardTeams",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of teams and their roles.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "team_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "role_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/boards\/{board_id}\/teams\/{team_id}": {
            "get": {
                "tags": [
                    "Board Teams"
                ],
                "summary": "Get the role of a team for the current board.",
                "description": "Get the role of a team for the current board.",
                "operationId": "getBoardTeamRole",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A role id.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "role_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Board Teams"
                ],
                "summary": "Give a team access to a board",
                "description": "Give a team access to a board.",
                "operationId": "addBoardTeam",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Board role.",
                                "type": "object",
                                "required": [
                                    "role_id"
                                ],
                                "properties": {
                                    "role_id": {
                                        "description": "Board role of the team",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Board Teams"
                ],
                "summary": "Deny a team access to a board",
                "description": "Deny a team access to a board.",
                "operationId": "removeBoardTeam",
                "responses": {
                    "204": {
                        "description": "The team no longer has access to the board."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/teamIdInPath"
                }
            ]
        },
        "\/dashboardPages": {
            "get": {
                "tags": [
                    "Dashboard Pages"
                ],
                "summary": "Get a list of dashboard pages",
                "description": "Get a list of dashboard pages matching some optional criteria.",
                "operationId": "getDashboardPages",
                "parameters": [
                    {
                        "name": "dashboard_page_ids",
                        "in": "query",
                        "description": "A list of the dashboard page ids that you want to get.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "A list of fields that you want in the response. The allowed fields are: dashboard_page_id and name.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "dashboard_page_id",
                                    "name"
                                ]
                            }
                        },
                        "explode": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of dashboard pages.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/DashboardPage"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Dashboard Pages"
                ],
                "summary": "Create a dashboard page",
                "description": "Create a new dashboard page.",
                "operationId": "createDashBoardPage",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Dashboard page data.",
                                "required": [
                                    "name"
                                ],
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "The name of the new board.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 250
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/DashboardPage"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/dashboardPages\/{dashboard_page_id}": {
            "get": {
                "tags": [
                    "Dashboard Pages"
                ],
                "summary": "Get the details of a single dashboard page",
                "description": "Get the details of a single dashboard page.",
                "operationId": "getDashboardPage",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/DashboardPage"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Dashboard Pages"
                ],
                "summary": "Update a dashboard page",
                "description": "Update a dashboard page.",
                "operationId": "updateDashboardPage",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Dashboard page data.",
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "The name of the board.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 250
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/DashboardPage"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Dashboard Pages"
                ],
                "summary": "Delete a dashboard page",
                "description": "Delete a dashboard page.",
                "operationId": "deleteDashboardPage",
                "responses": {
                    "204": {
                        "description": "The dashboard page has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/dashboardPageIdInPath"
                }
            ]
        },
        "\/dashboardPages\/{dashboard_page_id}\/teams": {
            "get": {
                "tags": [
                    "Dashboard Page Teams"
                ],
                "summary": "Get a list of teams having access to a dashboard page",
                "description": "Get a list of the teams having access to a dashboard page.",
                "operationId": "getDashboardPageTeams",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of teams and their roles can manage dashboard page.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "dashboard_page_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "team_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "can_edit": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/dashboardPageIdInPath"
                }
            ]
        },
        "\/dashboardPages\/{dashboard_page_id}\/teams\/{team_id}": {
            "get": {
                "tags": [
                    "Dashboard Page Teams"
                ],
                "summary": "Check if a team is added to a dashboard page",
                "description": "Check if a team is added to a dashboard page.",
                "operationId": "checkDashboardPageTeam",
                "responses": {
                    "204": {
                        "description": "The team is added to the dashboard page! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Dashboard Page Teams"
                ],
                "summary": "Give a team access to a dashboard page or set\/unset as a manager of a dashboard page",
                "description": "Give a team access to a dashboard page or set\/unset as a manager of a dashboard page.",
                "operationId": "addDashboardPageTeamOrMakeTeamMannager",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#\/components\/schemas\/DashboardPageTeam"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/DashboardPageTeamAsManager"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The team is added to the dashboard page or is set\/unset as a manager of the dashboard page! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Dashboard Page Teams"
                ],
                "summary": "Deny a team access to a dashboard page",
                "description": "Deny a team access to a dashboard page.",
                "operationId": "removeDashboardPageTeam",
                "responses": {
                    "204": {
                        "description": "The team no longer has access to the dashboard page."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/dashboardPageIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/teamIdInPath"
                }
            ]
        },
        "\/dashboardPages\/{dashboard_page_id}\/users": {
            "get": {
                "tags": [
                    "Dashboard Page Users"
                ],
                "summary": "Get a list of users having access to a dashboard page",
                "description": "Get a list of the users having access to a dashboard page.",
                "operationId": "getDashboardPageUsers",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of users and their roles can manage dashboard page.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "dashboard_page_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "user_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "can_edit": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/dashboardPageIdInPath"
                }
            ]
        },
        "\/dashboardPages\/{dashboard_page_id}\/users\/{user_id}": {
            "get": {
                "tags": [
                    "Dashboard Page Users"
                ],
                "summary": "Check if a user is added to a dashboard page",
                "description": "Check if a user is added to a dashboard page.",
                "operationId": "checkDashboardPageUser",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "User dashboard page data",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "dashboard_page_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "user_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "can_edit": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Dashboard Page Users"
                ],
                "summary": "Give a user access to a dashboard page or set\/unset as a manager of a dashboard page",
                "description": "Give a user access to a dashboard page or set\/unset as a manager of a dashboard page.",
                "operationId": "addDashboardPageUserOrMakeUserMannager",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#\/components\/schemas\/DashboardPageUser"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/DashboardPageUserAsManager"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The user is added to the dashboard page or is set\/unset as a manager of the dashboard page! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Dashboard Page Users"
                ],
                "summary": "Deny a user access to a dashboard page",
                "description": "Deny a user access to a dashboard page.",
                "operationId": "removeDashboardPageUser",
                "responses": {
                    "204": {
                        "description": "The user no longer has access to the dashboard page."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/dashboardPageIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/userIdInPath"
                }
            ]
        },
        "\/dashboardPages\/{dashboard_page_id}\/workspaces": {
            "get": {
                "tags": [
                    "Dashboard Page Workspaces"
                ],
                "summary": "Get a list of workspaces added to a dashboard page",
                "description": "Get a list of the workspaces added to a dashboard page.",
                "operationId": "getDashboardPageWorkspaces",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of the workspaces added to a dashboard page.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "dashboard_page_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "workspace_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/dashboardPageIdInPath"
                }
            ]
        },
        "\/dashboardPages\/{dashboard_page_id}\/workspaces\/{workspace_id}": {
            "get": {
                "tags": [
                    "Dashboard Page Workspaces"
                ],
                "summary": "Check if a workspace is added to a dashboard page",
                "description": "Check if a workspaces is added to a dashboard page.",
                "operationId": "checkDashboardPageWorkspace",
                "responses": {
                    "204": {
                        "description": "The workspace is added to the dashboard page! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Dashboard Page Workspaces"
                ],
                "summary": "Make a workspace available on a dashboard page",
                "description": "Make a workspace available on a dashboard page.",
                "operationId": "addDashboardPageWorkspace",
                "responses": {
                    "204": {
                        "description": "The workspace is now available on the dashboard page."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Dashboard Page Workspaces"
                ],
                "summary": "Remove a workspace from a dashboard page",
                "description": "Remove a workspace from a dashboard page.",
                "operationId": "removeDashboardPageWorkspace",
                "responses": {
                    "204": {
                        "description": "The workspace is no longer available on the dashboard page."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/dashboardPageIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/workspaceIdInPath"
                }
            ]
        },
        "\/me": {
            "get": {
                "tags": [
                    "Me"
                ],
                "summary": "Get the data about the active user",
                "description": "Get the data about the active user.",
                "operationId": "getActiveUserData",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "The data about the active user.",
                                            "type": "object",
                                            "properties": {
                                                "email": {
                                                    "description": "The email of the active user.",
                                                    "format": "email",
                                                    "type": "string"
                                                },
                                                "username": {
                                                    "description": "The username of the active user.",
                                                    "type": "string"
                                                },
                                                "realname": {
                                                    "description": "The realname of the active user.",
                                                    "type": "string"
                                                },
                                                "avatar": {
                                                    "description": "The file name of avatar of the active user.",
                                                    "type": "string"
                                                },
                                                "is_tfa_enabled": {
                                                    "description": "Controls whether the user has two-factor authentication enabled or not.",
                                                    "format": "int32",
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1
                                                    ]
                                                },
                                                "is_enabled": {
                                                    "description": "Controls whether the user is enabled or not.",
                                                    "format": "int32",
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1
                                                    ]
                                                },
                                                "is_confirmed": {
                                                    "description": "Controls whether the user is confirmed or not.",
                                                    "format": "int32",
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1
                                                    ]
                                                },
                                                "registration_date": {
                                                    "description": "The registration date of the active user.",
                                                    "format": "date",
                                                    "type": "string"
                                                },
                                                "timezone": {
                                                    "description": "The timezone of the active user.",
                                                    "type": "string"
                                                },
                                                "language": {
                                                    "description": "The selected language of the active user.",
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/myDashboardPages": {
            "get": {
                "tags": [
                    "My Dashboard Pages"
                ],
                "summary": "Get a list of my dashboard pages",
                "description": "Get a list of my dashboard pages.",
                "operationId": "getMyDashboardPages",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of my dashboard pages.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/MyDashboardPage"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/myDashboardPages\/{dashboard_page_id}": {
            "get": {
                "tags": [
                    "My Dashboard Pages"
                ],
                "summary": "Get the details of one of mine dashboard pages",
                "description": "Get the details of one of mine dashboard pages.",
                "operationId": "getMyDashboardPage",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/MyDashboardPage"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "My Dashboard Pages"
                ],
                "summary": "Update position of one of mine dashboard pages",
                "description": "Update position of one of mine dashboard pages.",
                "operationId": "updateMyDashboardPagePosition",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "My dashboard page data.",
                                "type": "object",
                                "properties": {
                                    "position": {
                                        "description": "The position of the my dashboard page.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/MyDashboardPage"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/dashboardPageIdInPath"
                }
            ]
        },
        "\/myDashboardPages\/{dashboard_page_id}\/settings": {
            "get": {
                "tags": [
                    "My Dashboard Page Settings"
                ],
                "summary": "Get a list of settings added to one of mine dashboard pages",
                "description": "Get a list of settings added to one of mine dashboard pages.",
                "operationId": "getMyDashboardPageSettings",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of the settings added to one of mine dashboard pages.",
                                            "type": "array",
                                            "items": {
                                                "oneOf": [
                                                    {
                                                        "$ref": "#\/components\/schemas\/MyDashboardPageSettingBackgroundSettingsColor"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/MyDashboardPageSettingBackgroundSettingsImage"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/MyDashboardPageSettingTabSettingsColor"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/MyDashboardPageTabSettingsIsHidden"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/dashboardPageIdInPath"
                }
            ]
        },
        "\/myDashboardPages\/{dashboard_page_id}\/settings\/{setting_name}": {
            "get": {
                "tags": [
                    "My Dashboard Page Settings"
                ],
                "summary": "Get the details of a single setting added to one of mine dashboard pages",
                "description": "Get the details of a single setting added to one of mine dashboard pages.",
                "operationId": "getMyDashboardPageSingleSettingDetails",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#\/components\/schemas\/MyDashboardPageSettingBackgroundSettingsColor"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/MyDashboardPageSettingBackgroundSettingsImage"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/MyDashboardPageSettingTabSettingsColor"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/MyDashboardPageTabSettingsIsHidden"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "My Dashboard Page Settings"
                ],
                "summary": "Update a single setting added to one of mine dashboard pages",
                "description": "Update a single setting added to one of mine dashboard pages.",
                "operationId": "updateMyDashboardPageSingleSetting",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#\/components\/schemas\/MyDashboardPageSettingBackgroundSettingsColorUpdateValue"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/MyDashboardPageSettingBackgroundSettingsImageUpdateValue"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/MyDashboardPageSettingTabSettingsColorUpdateValue"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/MyDashboardPageTabSettingsIsHiddenUpdateValue"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The setting is now updated! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "My Dashboard Page Settings"
                ],
                "summary": "Unset a single setting added to one of mine dashboard pages",
                "description": "Unset a single setting added to one of mine dashboard pages.",
                "operationId": "unsetMyDashboardPageSingleSetting",
                "responses": {
                    "204": {
                        "description": "The setting is not available already for one of mine dashboard pages."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/dashboardPageIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/settingName"
                }
            ]
        },
        "\/myDashboardPages\/{dashboard_page_id}\/widgets": {
            "get": {
                "tags": [
                    "My Dashboard Page Widgets"
                ],
                "summary": "Get a list of widgets added to one of mine dashboard pages",
                "description": "Get a list of widgets added to one of mine dashboard pages.",
                "operationId": "getMyDashboardPageWidgets",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of the widgets added to one of mine dashboard pages and their positions.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "dashboard_page_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "widget_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "position": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/dashboardPageIdInPath"
                }
            ]
        },
        "\/myDashboardPages\/{dashboard_page_id}\/workspaces": {
            "get": {
                "tags": [
                    "My Dashboard Page Workspaces"
                ],
                "summary": "Get a list of workspaces added to one of mine dashboard pages",
                "description": "Get a list of workspaces added to one of mine dashboard pages.",
                "operationId": "getMyDashboardPageWorkspaces",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of the workspaces added to one of mine dashboard pages and their positions.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "dashboard_page_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "workspace_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "position": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/dashboardPageIdInPath"
                }
            ]
        },
        "\/myDashboardPages\/{dashboard_page_id}\/widgets\/{widget_id}": {
            "get": {
                "tags": [
                    "My Dashboard Page Widgets"
                ],
                "summary": "Check if a widget is added to one of mine dashboard pages",
                "description": "Check if a widget is added to one of mine dashboard pages.",
                "operationId": "checkMyDashboardPageWidget",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "The widget data which is added to one of mine dashboard pages.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "widget_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "position": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "My Dashboard Page Widgets"
                ],
                "summary": "Update position of a single widget on one of mine dashboard pages",
                "description": "Update position of a single widget on one of mine dashboard pages.",
                "operationId": "updateMyDashboardPageWidgetPosition",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "My dashboard page widget data.",
                                "type": "object",
                                "properties": {
                                    "position": {
                                        "description": "The position of the widget on one of mine dashboard pages.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/MyDashboardPage"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/dashboardPageIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/widgetIdInPath"
                }
            ]
        },
        "\/myDashboardPages\/{dashboard_page_id}\/workspaces\/{workspace_id}": {
            "get": {
                "tags": [
                    "My Dashboard Page Workspaces"
                ],
                "summary": "Check if a workspace is added to one of mine dashboard pages",
                "description": "Check if a workspace is added to one of mine dashboard pages.",
                "operationId": "checkMyDashboardPageWorkspace",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "The workspace data which is added to one of mine dashboard pages.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "workspace_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "position": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "My Dashboard Page Workspaces"
                ],
                "summary": "Update position of a single workspace on one of mine dashboard pages",
                "description": "Update position of a single workspace on one of mine dashboard pages.",
                "operationId": "updateMyDashboardPageWorkspacePosition",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "My dashboard page workspace data.",
                                "type": "object",
                                "properties": {
                                    "position": {
                                        "description": "The position of the workspace on one of mine dashboard pages.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/MyDashboardPage"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/dashboardPageIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/workspaceIdInPath"
                }
            ]
        },
        "\/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get a list of users",
                "description": "Get a list of users matching some optional criteria.",
                "operationId": "getUsers",
                "parameters": [
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of the user ids that you want to get.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "is_enabled",
                        "in": "query",
                        "description": "When set to 1 you will only get enabled users. When set to 0 you will only get disabled users.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "is_confirmed",
                        "in": "query",
                        "description": "When set to 1 you will only get users who have confirmed their invitation. When set to 0 you will only get users who have not confirmed their invitation.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "if_assigned_where_i_am",
                        "in": "query",
                        "description": "When set to 1 you will only get users which are assigned to the boards you are assigned to.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "A list of fields that you want in the response. The allowed fields are: user_id, email, username, realname, avatar, is_enabled, is_confirmed, is_tfa_enabled and registration_date.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "user_id",
                                    "email",
                                    "username",
                                    "realname",
                                    "avatar",
                                    "is_enabled",
                                    "is_confirmed",
                                    "is_tfa_enabled",
                                    "registration_date",
                                    "timezone",
                                    "language"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "A list of properties for which you want to get additional details. The allowed properties at the moment are: invitation_status, global_privileges, board_roles, managed_workspaces and last_activity.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "invitation_status",
                                    "global_privileges",
                                    "board_roles",
                                    "managed_workspaces",
                                    "last_activity"
                                ]
                            }
                        },
                        "explode": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of users.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "user_id": {
                                                                "description": "User id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/User"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/users\/invite": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Invite a user",
                "description": "Invite a new user.",
                "operationId": "inviteUser",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Email",
                                "required": [
                                    "email"
                                ],
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "description": "The email of the new user.",
                                        "format": "email",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "allOf": [
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "user_id": {
                                                            "description": "User id.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        }
                                                    }
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/User"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/users\/{user_id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get the details of a single user",
                "description": "Get the details of a single user.",
                "operationId": "getUser",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/User"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Update a user",
                "description": "Update a user.",
                "operationId": "updateUser",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "User data.",
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "description": "The email of the user.",
                                        "format": "email",
                                        "type": "string"
                                    },
                                    "username": {
                                        "description": "The username of the user.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 100
                                    },
                                    "realname": {
                                        "description": "The full name of the user.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 100
                                    },
                                    "is_enabled": {
                                        "description": "Controls whether the user is enabled or not.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ]
                                    },
                                    "is_tfa_enabled": {
                                        "description": "Controls whether the user has two-factor authentication enabled or not.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/User"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user",
                "description": "Delete a user.",
                "operationId": "deleteUser",
                "responses": {
                    "204": {
                        "description": "The user has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/userIdInPath"
                }
            ]
        },
        "\/users\/{user_id}\/managedWorkspaces": {
            "get": {
                "tags": [
                    "Managed Workspaces"
                ],
                "summary": "Get a list of managed workspaces",
                "description": "Get a list of the workspaces in which the user is a workspace manager.",
                "operationId": "getManagedWorkspace",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of managed workspaces.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "workspace_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/userIdInPath"
                }
            ]
        },
        "\/users\/{user_id}\/lastActivity": {
            "get": {
                "tags": [
                    "User Activity"
                ],
                "summary": "Get the last activity of a user",
                "description": "Get the last activity of a user.",
                "operationId": "getUserLastActivity",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "The last activity of a user.",
                                            "type": "object",
                                            "properties": {
                                                "last_activity": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/userIdInPath"
                }
            ]
        },
        "\/users\/{user_id}\/boardRoles": {
            "get": {
                "tags": [
                    "User Boards"
                ],
                "summary": "Get a list of boards the user is assigned to",
                "description": "Get a list of the boards to which the user is assigned and with what role.",
                "operationId": "getUserBoardRoles",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of boards and board roles.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "board_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "role_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/userIdInPath"
                }
            ]
        },
        "\/users\/history": {
            "get": {
                "tags": [
                    "User History"
                ],
                "summary": "Get a list of user management history events.",
                "description": "Get a list of user management history events.",
                "operationId": "getUsersHistory",
                "parameters": [
                    {
                        "name": "affected_user_ids",
                        "in": "query",
                        "description": "A list of the user ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the user.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "user_confirmed",
                                    "user_deleted",
                                    "email_changed",
                                    "username_changed",
                                    "realname_changed",
                                    "avatar_changed",
                                    "tfa_changed",
                                    "tfa_enabled",
                                    "tfa_disabled",
                                    "tfa_key_changed",
                                    "tfa_key_reset",
                                    "api_key_changed",
                                    "timezone_changed",
                                    "language_changed",
                                    "password_changed",
                                    "user_disabled",
                                    "user_enabled",
                                    "wip_limits_changed",
                                    "global_privilege_added",
                                    "global_privilege_removed",
                                    "made_wm",
                                    "made_non_wm",
                                    "assigned_to_board",
                                    "unassigned_from_board",
                                    "board_role_changed",
                                    "invitation_sent",
                                    "invitation_code_changed"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "pagination": {
                                            "type": "object",
                                            "properties": {
                                                "all_pages": {
                                                    "description": "The number of pages the result is split into.",
                                                    "type": "integer"
                                                },
                                                "current_page": {
                                                    "description": "The current page.",
                                                    "type": "integer"
                                                },
                                                "results_per_page": {
                                                    "description": "The number of results per page.",
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "data": {
                                            "description": "A list of user management history events.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/UserHistoryEvent"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/users\/{user_id}\/involvedBusinessRules": {
            "get": {
                "tags": [
                    "User Involved Business Rules"
                ],
                "summary": "Get a list of business rules where the user is involved",
                "description": "Get a list of business rules where the user is involved.",
                "operationId": "getUserInvolvedBusinessRules",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of involved business rules.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "rule_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/userIdInPath"
                }
            ]
        },
        "\/users\/{user_id}\/globalPrivileges": {
            "get": {
                "tags": [
                    "Global User Privileges"
                ],
                "summary": "Get a list of all possible global privileges and whether the user has them",
                "description": "Get a list of all possible global privileges and whether the user has them.",
                "operationId": "getGlobalUserPrivileges",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of global privileges.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/Privilege"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/userIdInPath"
                }
            ]
        },
        "\/users\/{user_id}\/globalPrivileges\/{privilege_name}": {
            "get": {
                "tags": [
                    "Global User Privileges"
                ],
                "summary": "Check if a user has a global privilege",
                "description": "Check if a user has a global privilege.",
                "operationId": "getGlobalUserPrivilege",
                "responses": {
                    "204": {
                        "description": "The user has the global privilege! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Global User Privileges"
                ],
                "summary": "Give the user a global privilege",
                "description": "Give the user a global privilege.",
                "operationId": "setGlobalUserPrivilege",
                "responses": {
                    "204": {
                        "description": "The global privilege has been given."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Global User Privileges"
                ],
                "summary": "Remove a global privilege from the user",
                "description": "Remove a global privilege from the user.",
                "operationId": "removeGlobalUserPrivilege",
                "responses": {
                    "204": {
                        "description": "The global privilege has been removed."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/userIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/privilegeName"
                }
            ]
        },
        "\/users\/{user_id}\/resendInvitation": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Resend an invitation",
                "description": "Send a new invitation email to the user.",
                "operationId": "resendInvitation",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "A user id.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "A new invitation email has been sent."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/users\/{user_id}\/teams": {
            "get": {
                "tags": [
                    "User Teams"
                ],
                "summary": "Get a list of teams where the user is a member",
                "description": "Get a list of teams where the user is a member.",
                "operationId": "getUserTeams",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of teams.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "team_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/userIdInPath"
                }
            ]
        },
        "\/users\/{user_id}\/teams\/{team_id}": {
            "get": {
                "tags": [
                    "User Teams"
                ],
                "summary": "Check if the users is a member of the team",
                "description": "Check if the users is a member of the team.",
                "operationId": "checkUserTeam",
                "responses": {
                    "204": {
                        "description": "The users is a memeber of the team! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/userIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/teamIdInPath"
                }
            ]
        },
        "\/my\/apiKey\/generate": {
            "post": {
                "tags": [
                    "My Api Key Generate"
                ],
                "summary": "Generate an api key",
                "description": "Generate an api key.",
                "operationId": "generateApiKey",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "Generated api key.",
                                            "type": "object",
                                            "properties": {
                                                "api_key": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/roles": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "Get a list of roles",
                "description": "Get a list of roles matching some optional criteria.",
                "operationId": "getRoles",
                "parameters": [
                    {
                        "name": "role_ids",
                        "in": "query",
                        "description": "A list of the role ids that you want to get.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "A list of properties for which you want to get additional details. The only allowed property at the moment is permissions.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of roles.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "role_id": {
                                                                "description": "Role id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/Role"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Roles"
                ],
                "summary": "Create a role",
                "description": "Create a new role.",
                "operationId": "createRole",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Role data.",
                                "required": [
                                    "name"
                                ],
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "The name of the new role.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 100
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "allOf": [
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "role_id": {
                                                            "description": "Role id.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        }
                                                    }
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/Role"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/roles\/{role_id}": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "Get the details of a single role",
                "description": "Get the details of a single role.",
                "operationId": "getRole",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Role"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Roles"
                ],
                "summary": "Update a role",
                "description": "Update a role.",
                "operationId": "updateRole",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Role data.",
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "The name of the new role.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 100
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Role"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Roles"
                ],
                "summary": "Delete a role",
                "description": "Delete a role.",
                "operationId": "deleteRole",
                "parameters": [
                    {
                        "name": "replace_with_role_id",
                        "in": "query",
                        "description": "The id of a role which will be given to the users which currently have the role which is about to be deleted.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The role has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/roleIdInPath"
                }
            ]
        },
        "\/roles\/{role_id}\/permissions": {
            "get": {
                "tags": [
                    "Role Permissions"
                ],
                "summary": "Get a list of all possible role permissions and whether the role has them",
                "description": "Get a list of all possible role permissions and whether the role has them.",
                "operationId": "getRolePermissions",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of permissions.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/Permission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/roleIdInPath"
                }
            ]
        },
        "\/roles\/{role_id}\/permissions\/{permission_name}": {
            "get": {
                "tags": [
                    "Role Permissions"
                ],
                "summary": "Check if a role has a permission",
                "description": "Check if a role has a permission.",
                "operationId": "getRolePermission",
                "responses": {
                    "204": {
                        "description": "The role has the permission! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Role Permissions"
                ],
                "summary": "Give the role a permission",
                "description": "Give the role a permission.",
                "operationId": "setRolePermission",
                "responses": {
                    "204": {
                        "description": "The permission has been given."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Role Permissions"
                ],
                "summary": "Remove a permission from the role",
                "description": "Remove a permission from the role.",
                "operationId": "removeRolePermission",
                "responses": {
                    "204": {
                        "description": "The permission has been removed."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/roleIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/permissionName"
                }
            ]
        },
        "\/blockReasons": {
            "get": {
                "tags": [
                    "Block Reasons"
                ],
                "summary": "Get a list of block reasons",
                "description": "Get a list of block reasons matching some optional criteria.",
                "operationId": "getBlockReasons",
                "parameters": [
                    {
                        "name": "reason_ids",
                        "in": "query",
                        "description": "A list of the block reason ids that you want to get.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "label",
                        "in": "query",
                        "description": "Find a block reason by its full label.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "availability",
                        "in": "query",
                        "description": "A list of the availability values that you want to get.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1,
                                    2
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "is_enabled",
                        "in": "query",
                        "description": "When set to 1 you will only get enabled block reasons. When set to 0 you will only get disabled block reasons.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "A list of fields that you want in the response. The allowed fields are: reason_id, icon_type, icon_id, label, color, with_cards, with_date, with_users, availability and is_enabled.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "reason_id",
                                    "icon_type",
                                    "icon_id",
                                    "label",
                                    "color",
                                    "with_cards",
                                    "with_date",
                                    "with_users",
                                    "availability",
                                    "is_enabled"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count, card_ids, card_count and business_rules.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "board_ids",
                                    "board_count",
                                    "card_ids",
                                    "card_count",
                                    "business_rules"
                                ]
                            }
                        },
                        "explode": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of block reasons.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/BlockReason"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Block Reasons"
                ],
                "summary": "Create a block reason",
                "description": "Create a new block reason.",
                "operationId": "createBlockReason",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Block reason data.",
                                "required": [
                                    "label"
                                ],
                                "type": "object",
                                "properties": {
                                    "icon_type": {
                                        "description": "The type of the icon. 0 - system. 1 - user.",
                                        "format": "int32",
                                        "type": "integer",
                                        "default": 0
                                    },
                                    "icon_id": {
                                        "description": "An icon for the block reason. If set to 0, the block reason will not have an icon.",
                                        "format": "int32",
                                        "type": "integer",
                                        "default": 0
                                    },
                                    "label": {
                                        "description": "The block reason.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 250
                                    },
                                    "color": {
                                        "description": "The color of the block reason. 6 hexadecimal characters are expected.",
                                        "type": "string",
                                        "default": null
                                    },
                                    "with_cards": {
                                        "description": "Controls whether this block reason signifies that the card is blocked because of another card.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ],
                                        "default": 0
                                    },
                                    "with_date": {
                                        "description": "Controls whether this block reason signifies that the card is blocked until a given date.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ],
                                        "default": 0
                                    },
                                    "with_users": {
                                        "description": "Controls whether this block reason signifies that the card is blocked because of a user.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ],
                                        "default": 0
                                    },
                                    "availability": {
                                        "description": "When set to 0 the block reason has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the block reason is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the block reason is added automatically to all boards and cannot be removed.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1,
                                            2
                                        ],
                                        "default": 0
                                    },
                                    "is_enabled": {
                                        "description": "Controls whether this block reason is enabled.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ],
                                        "default": 1
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/BlockReason"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/blockReasons\/{reason_id}": {
            "get": {
                "tags": [
                    "Block Reasons"
                ],
                "summary": "Get the details of a single block reason",
                "description": "Get the details of a single block reason.",
                "operationId": "getBlockReason",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/BlockReason"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Block Reasons"
                ],
                "summary": "Update a block reason",
                "description": "Update a block reason.",
                "operationId": "updateBlockReason",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Block reason data.",
                                "type": "object",
                                "properties": {
                                    "icon_type": {
                                        "description": "The type of the icon. 0 - system. 1 - user.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "icon_id": {
                                        "description": "An icon for the block reason. If set to 0, the block reason will not have an icon.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "label": {
                                        "description": "The block reason.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 250
                                    },
                                    "color": {
                                        "description": "The color of the block reason. 6 hexadecimal characters are expected.",
                                        "type": "string"
                                    },
                                    "with_cards": {
                                        "description": "Controls whether this block reason signifies that the card is blocked because of another card.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ]
                                    },
                                    "with_date": {
                                        "description": "Controls whether this block reason signifies that the card is blocked until a given date.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ]
                                    },
                                    "with_users": {
                                        "description": "Controls whether this block reason signifies that the card is blocked because of a user.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ]
                                    },
                                    "availability": {
                                        "description": "When set to 0 the block reason has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the block reason is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the block reason is added automatically to all boards and cannot be removed.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1,
                                            2
                                        ]
                                    },
                                    "is_enabled": {
                                        "description": "Controls whether this block reason is enabled.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/BlockReason"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Block Reasons"
                ],
                "summary": "Delete a block reason",
                "description": "Delete a block reason.",
                "operationId": "deleteBlockReason",
                "parameters": [
                    {
                        "name": "replace_with_reason_id",
                        "in": "query",
                        "description": "The id of a block reason with which to block the cards which are currently blocked with the block reason which is about to be deleted.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The block reason has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/blockReasonIdInPath"
                }
            ]
        },
        "\/blockReasons\/{reason_id}\/boards": {
            "get": {
                "tags": [
                    "Block Reason Boards"
                ],
                "summary": "Get a list of boards where the block reason is available",
                "description": "Get a list of the boards on which the block reason is available.",
                "operationId": "getBlockReasonBoards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of boards.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "board_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/blockReasonIdInPath"
                }
            ]
        },
        "\/blockReasons\/{reason_id}\/batchBoardOperations": {
            "post": {
                "tags": [
                    "Block Reason Boards"
                ],
                "summary": "Make a block reason available or unavailable on several boards",
                "description": "Make a block reason available or unavailable on several boards.",
                "operationId": "updateBlockReasonBoards",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Block resaon boards data.",
                                "type": "object",
                                "properties": {
                                    "board_ids_to_add": {
                                        "description": "A list of board ids where you want to be available the block reason.",
                                        "type": "array",
                                        "items": {
                                            "format": "int32",
                                            "type": "integer"
                                        }
                                    },
                                    "board_ids_to_remove": {
                                        "description": "A list of board ids where you want to be unavailable the block reason.",
                                        "type": "array",
                                        "items": {
                                            "format": "int32",
                                            "type": "integer"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The block reason is now available or unavailable on the boards."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/blockReasonIdInPath"
                }
            ]
        },
        "\/blockReasons\/{reason_id}\/cards": {
            "get": {
                "tags": [
                    "Block Reason Cards"
                ],
                "summary": "Get a list of cards where the block reason is available",
                "description": "Get a list of the cards on which the block reason is available.",
                "operationId": "getBlockReasonCards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of cards.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "card_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/blockReasonIdInPath"
                }
            ]
        },
        "\/blockReasons\/history": {
            "get": {
                "tags": [
                    "Block Reason History"
                ],
                "summary": "Get a list of block reasons creation, deletion, update events",
                "description": "Get a list of block reasons creation, deletion, update events matching some optional criteria.",
                "operationId": "getBlockReasonsHistory",
                "parameters": [
                    {
                        "name": "reason_ids",
                        "in": "query",
                        "description": "A list of the block reason ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the block reason.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "reason_created",
                                    "reason_updated",
                                    "reason_disabled",
                                    "reason_enabled",
                                    "reason_deleted",
                                    "reason_added_to_board",
                                    "reason_removed_from_board"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "pagination": {
                                            "type": "object",
                                            "properties": {
                                                "all_pages": {
                                                    "description": "The number of pages the result is split into.",
                                                    "type": "integer"
                                                },
                                                "current_page": {
                                                    "description": "The current page.",
                                                    "type": "integer"
                                                },
                                                "results_per_page": {
                                                    "description": "The number of results per page.",
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "data": {
                                            "description": "A list of block reasons creation, deletion, update events.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/BlockReasonHistoryEvent"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/discardReasons": {
            "get": {
                "tags": [
                    "Discard Reasons"
                ],
                "summary": "Get a list of discard reasons",
                "description": "Get a list of discard reasons matching some optional criteria.",
                "operationId": "getDiscardReasons",
                "parameters": [
                    {
                        "name": "reason_ids",
                        "in": "query",
                        "description": "A list of the discard reason ids that you want to get.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "label",
                        "in": "query",
                        "description": "Find a discard reason by its full label.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "availability",
                        "in": "query",
                        "description": "A list of the availability values that you want to get.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1,
                                    2
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "is_enabled",
                        "in": "query",
                        "description": "When set to 1 you will only get enabled discard reasons. When set to 0 you will only get disabled discard reasons.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "A list of fields that you want in the response. The allowed fields are: reason_id, label, availability and is_enabled.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "reason_id",
                                    "label",
                                    "availability",
                                    "is_enabled"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count, card_ids and card_count.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "board_ids",
                                    "board_count",
                                    "card_ids",
                                    "card_count"
                                ]
                            }
                        },
                        "explode": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of discard reasons.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/DiscardReason"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Discard Reasons"
                ],
                "summary": "Create a discard reason",
                "description": "Create a new discard reason.",
                "operationId": "createDiscardReason",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Discard reason data.",
                                "required": [
                                    "label"
                                ],
                                "type": "object",
                                "properties": {
                                    "label": {
                                        "description": "The discard reason.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 250
                                    },
                                    "availability": {
                                        "description": "When set to 0 the discard reason has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the discard reason is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the discard reason is added automatically to all boards and cannot be removed.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1,
                                            2
                                        ],
                                        "default": 0
                                    },
                                    "is_enabled": {
                                        "description": "Controls whether this discard reason is enabled.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ],
                                        "default": 1
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/DiscardReason"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/discardReasons\/{reason_id}": {
            "get": {
                "tags": [
                    "Discard Reasons"
                ],
                "summary": "Get the details of a single discard reason",
                "description": "Get the details of a single discard reason.",
                "operationId": "getDiscardReason",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/DiscardReason"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Discard Reasons"
                ],
                "summary": "Update a discard reason",
                "description": "Update a discard reason.",
                "operationId": "updateDiscardReason",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Discard reason data.",
                                "type": "object",
                                "properties": {
                                    "label": {
                                        "description": "The discard reason.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 250
                                    },
                                    "availability": {
                                        "description": "When set to 0 the discard reason has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the discard reason is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the discard reason is added automatically to all boards and cannot be removed.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1,
                                            2
                                        ]
                                    },
                                    "is_enabled": {
                                        "description": "Controls whether this discard reason is enabled.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/DiscardReason"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Discard Reasons"
                ],
                "summary": "Delete a discard reason",
                "description": "Delete a discard reason.",
                "operationId": "deleteDiscardReason",
                "parameters": [
                    {
                        "name": "replace_with_reason_id",
                        "in": "query",
                        "description": "The id of a discard reason with which to discard the cards which are currently discarded with the discard reason which is about to be deleted.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The discard reason has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/discardReasonIdInPath"
                }
            ]
        },
        "\/discardReasons\/{reason_id}\/boards": {
            "get": {
                "tags": [
                    "Discard Reason Boards"
                ],
                "summary": "Get a list of boards where the discard reason is available",
                "description": "Get a list of the boards on which the discard reason is available.",
                "operationId": "getDiscardReasonBoards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of boards.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "board_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/discardReasonIdInPath"
                }
            ]
        },
        "\/discardReasons\/{reason_id}\/cards": {
            "get": {
                "tags": [
                    "Discard Reason Cards"
                ],
                "summary": "Get a list of cards where the discard reason is available",
                "description": "Get a list of the cards on which the discard reason is available.",
                "operationId": "getDiscardReasonCards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of cards.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "card_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/discardReasonIdInPath"
                }
            ]
        },
        "\/discardReasons\/history": {
            "get": {
                "tags": [
                    "Discard Reason History"
                ],
                "summary": "Get a list of discard reasons creation, deletion, update events",
                "description": "Get a list of discard reasons creation, deletion, update events matching some optional criteria.",
                "operationId": "getDiscardReasonsHistory",
                "parameters": [
                    {
                        "name": "reason_ids",
                        "in": "query",
                        "description": "A list of the discard reason ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the discard reason.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "reason_created",
                                    "reason_updated",
                                    "reason_disabled",
                                    "reason_enabled",
                                    "reason_deleted",
                                    "reason_added_to_board",
                                    "reason_removed_from_board"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "pagination": {
                                            "type": "object",
                                            "properties": {
                                                "all_pages": {
                                                    "description": "The number of pages the result is split into.",
                                                    "type": "integer"
                                                },
                                                "current_page": {
                                                    "description": "The current page.",
                                                    "type": "integer"
                                                },
                                                "results_per_page": {
                                                    "description": "The number of results per page.",
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "data": {
                                            "description": "A list of discard reasons creation, deletion, update events",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/DiscardReasonHistoryEvent"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/stickers": {
            "get": {
                "tags": [
                    "Stickers"
                ],
                "summary": "Get a list of stickers",
                "description": "Get a list of stickers matching some optional criteria.",
                "operationId": "getStickers",
                "parameters": [
                    {
                        "name": "sticker_ids",
                        "in": "query",
                        "description": "A list of the sticker ids that you want to get.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "label",
                        "in": "query",
                        "description": "Find a sticker by its full label.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "availability",
                        "in": "query",
                        "description": "A list of the availability values that you want to get.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1,
                                    2
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "is_enabled",
                        "in": "query",
                        "description": "When set to 1 you will only get enabled stickers. When set to 0 you will only get disabled stickers.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "A list of fields that you want in the response. The allowed fields are: sticker_id, icon_type, icon_id, label, color, availability and is_enabled.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "sticker_id",
                                    "icon_type",
                                    "icon_id",
                                    "label",
                                    "color",
                                    "availability",
                                    "is_enabled"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count, card_ids, card_count and business_rules.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "board_ids",
                                    "board_count",
                                    "card_ids",
                                    "card_count",
                                    "business_rules"
                                ]
                            }
                        },
                        "explode": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of stickers.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/Sticker"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Stickers"
                ],
                "summary": "Create a sticker",
                "description": "Create a new sticker.",
                "operationId": "createSticker",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Sticker data.",
                                "required": [
                                    "label"
                                ],
                                "type": "object",
                                "properties": {
                                    "icon_type": {
                                        "description": "The type of the icon. 0 - system. 1 - user.",
                                        "format": "int32",
                                        "type": "integer",
                                        "default": 0
                                    },
                                    "icon_id": {
                                        "description": "An icon for the sticker. If set to 0, the sticker will not have an icon.",
                                        "format": "int32",
                                        "type": "integer",
                                        "default": 0
                                    },
                                    "label": {
                                        "description": "A label for the new sticker.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 250
                                    },
                                    "color": {
                                        "description": "The color of the sticker. 6 hexadecimal characters are expected.",
                                        "type": "string",
                                        "default": null
                                    },
                                    "availability": {
                                        "description": "When set to 0 the sticker has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the sticker is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the sticker is added automatically to all boards and cannot be removed.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1,
                                            2
                                        ],
                                        "default": 0
                                    },
                                    "is_enabled": {
                                        "description": "Controls whether this sticker is enabled.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ],
                                        "default": 1
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Sticker"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/stickers\/{sticker_id}": {
            "get": {
                "tags": [
                    "Stickers"
                ],
                "summary": "Get the details of a single sticker",
                "description": "Get the details of a single sticker.",
                "operationId": "getSticker",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Sticker"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Stickers"
                ],
                "summary": "Update a sticker",
                "description": "Update a sticker.",
                "operationId": "updateSticker",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Sticker data.",
                                "type": "object",
                                "properties": {
                                    "icon_type": {
                                        "description": "The type of the icon. 0 - system. 1 - user.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "icon_id": {
                                        "description": "An icon for the sticker. If set to 0, the sticker will not have an icon.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "label": {
                                        "description": "The label for the sticker.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 250
                                    },
                                    "color": {
                                        "description": "The color of the sticker. 6 hexadecimal characters are expected.",
                                        "type": "string"
                                    },
                                    "availability": {
                                        "description": "When set to 0 the sticker has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the sticker is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the sticker is added automatically to all boards and cannot be removed.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1,
                                            2
                                        ]
                                    },
                                    "is_enabled": {
                                        "description": "Controls whether this sticker is enabled.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Sticker"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Stickers"
                ],
                "summary": "Delete a sticker",
                "description": "Delete a sticker.",
                "operationId": "deleteSticker",
                "parameters": [
                    {
                        "name": "replace_with_sticker_id",
                        "in": "query",
                        "description": "The id of a sticker with which to replace the one to be deleted on the cards using it.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The sticker has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/stickerIdInPath"
                }
            ]
        },
        "\/stickers\/{sticker_id}\/boards": {
            "get": {
                "tags": [
                    "Sticker Boards"
                ],
                "summary": "Get a list of boards where the sticker is available",
                "description": "Get a list of the boards on which the sticker is available.",
                "operationId": "getStickerBoards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of boards.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "board_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/stickerIdInPath"
                }
            ]
        },
        "\/stickers\/{sticker_id}\/batchBoardOperations": {
            "post": {
                "tags": [
                    "Sticker Boards"
                ],
                "summary": "Make a sticker available or unavailable on several boards",
                "description": "Make a sticker available or unavailable on several boards.",
                "operationId": "updateStickerBoards",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Sticker boards data.",
                                "type": "object",
                                "properties": {
                                    "boards_to_add_or_update": {
                                        "description": "A list of board ids where you want to be available the sticker or to update it.",
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "board_id"
                                            ],
                                            "type": "object",
                                            "properties": {
                                                "board_id": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                },
                                                "limit_per_board": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                },
                                                "limit_per_card": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    },
                                    "board_ids_to_remove": {
                                        "description": "A list of board ids where you want to be unavailable the sticker.",
                                        "type": "array",
                                        "items": {
                                            "format": "int32",
                                            "type": "integer"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "oneOf": [
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "board_id": {
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "limit_per_board": {
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "limit_per_card": {
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "maxItems": 0
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/stickerIdInPath"
                }
            ]
        },
        "\/stickers\/{sticker_id}\/cards": {
            "get": {
                "tags": [
                    "Sticker Cards"
                ],
                "summary": "Get a list of cards where the sticker is available",
                "description": "Get a list of the cards on which the sticker is available.",
                "operationId": "getStickerCards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of cards.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "card_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/stickerIdInPath"
                }
            ]
        },
        "\/stickers\/history": {
            "get": {
                "tags": [
                    "Sticker History"
                ],
                "summary": "Get a list of stickers creation, deletion, update events",
                "description": "Get a list of stickers creation, deletion, update events matching some optional criteria.",
                "operationId": "getStickersHistory",
                "parameters": [
                    {
                        "name": "sticker_ids",
                        "in": "query",
                        "description": "A list of the sticker ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the sticker.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "sticker_created",
                                    "sticker_updated",
                                    "sticker_disabled",
                                    "sticker_enabled",
                                    "sticker_deleted",
                                    "sticker_added_to_board",
                                    "sticker_removed_from_board"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "pagination": {
                                            "type": "object",
                                            "properties": {
                                                "all_pages": {
                                                    "description": "The number of pages the result is split into.",
                                                    "type": "integer"
                                                },
                                                "current_page": {
                                                    "description": "The current page.",
                                                    "type": "integer"
                                                },
                                                "results_per_page": {
                                                    "description": "The number of results per page.",
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "data": {
                                            "description": "A list of stickers creation, deletion, update events.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/StickerHistoryEvent"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/tags": {
            "get": {
                "tags": [
                    "Tags"
                ],
                "summary": "Get a list of tags",
                "description": "Get a list of tags matching some optional criteria.",
                "operationId": "getTags",
                "parameters": [
                    {
                        "name": "tag_ids",
                        "in": "query",
                        "description": "A list of the tag ids that you want to get.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "label",
                        "in": "query",
                        "description": "Find a tag by its full label.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "availability",
                        "in": "query",
                        "description": "A list of the availability values that you want to get.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1,
                                    2
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "is_enabled",
                        "in": "query",
                        "description": "When set to 1 you will only get enabled tags. When set to 0 you will only get disabled tags.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "A list of fields that you want in the response. The allowed fields are: tag_id, label, color, availability and is_enabled.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "tag_id",
                                    "label",
                                    "color",
                                    "availability",
                                    "is_enabled"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count, card_ids, card_count and business_rules.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "board_ids",
                                    "board_count",
                                    "card_ids",
                                    "card_count",
                                    "business_rules"
                                ]
                            }
                        },
                        "explode": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of tags.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/Tag"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Tags"
                ],
                "summary": "Create a tag",
                "description": "Create a new tag.",
                "operationId": "createTag",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Tag data.",
                                "required": [
                                    "label"
                                ],
                                "type": "object",
                                "properties": {
                                    "label": {
                                        "description": "A label for the new tag.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 250
                                    },
                                    "color": {
                                        "description": "The color of the tag. 6 hexadecimal characters are expected.",
                                        "type": "string",
                                        "default": null
                                    },
                                    "availability": {
                                        "description": "When set to 0 the tag has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the tag is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the tag is added automatically to all boards and cannot be removed.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1,
                                            2
                                        ],
                                        "default": 0
                                    },
                                    "is_enabled": {
                                        "description": "Controls whether this tag is enabled.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ],
                                        "default": 1
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Tag"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/tags\/{tag_id}": {
            "get": {
                "tags": [
                    "Tags"
                ],
                "summary": "Get the details of a single tag",
                "description": "Get the details of a single tag.",
                "operationId": "getTag",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Tag"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Tags"
                ],
                "summary": "Update a tag",
                "description": "Update a tag.",
                "operationId": "updateTag",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Tag data.",
                                "type": "object",
                                "properties": {
                                    "label": {
                                        "description": "The label for the tag.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 250
                                    },
                                    "color": {
                                        "description": "The color of the tag. 6 hexadecimal characters are expected.",
                                        "type": "string"
                                    },
                                    "availability": {
                                        "description": "When set to 0 the tag has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the tag is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the tag is added automatically to all boards and cannot be removed.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1,
                                            2
                                        ]
                                    },
                                    "is_enabled": {
                                        "description": "Controls whether this tag is enabled.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Tag"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Tags"
                ],
                "summary": "Delete a tag",
                "description": "Delete a tag.",
                "operationId": "deleteTag",
                "parameters": [
                    {
                        "name": "replace_with_tag_id",
                        "in": "query",
                        "description": "The id of a tag with which to replace the one to be deleted on the cards using it.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The tag has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/tagIdInPath"
                }
            ]
        },
        "\/tags\/{tag_id}\/boards": {
            "get": {
                "tags": [
                    "Tag Boards"
                ],
                "summary": "Get a list of boards where the tag is available",
                "description": "Get a list of the boards on which the tag is available.",
                "operationId": "getTagBoards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of boards.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "board_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/tagIdInPath"
                }
            ]
        },
        "\/tags\/{tag_id}\/batchBoardOperations": {
            "post": {
                "tags": [
                    "Tag Boards"
                ],
                "summary": "Make a tag available or unavailable on several boards",
                "description": "Make a tag available or unavailable on several boards.",
                "operationId": "updateTagBoards",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Tag boards data.",
                                "type": "object",
                                "properties": {
                                    "board_ids_to_add": {
                                        "description": "A list of board ids where you want to be available the tag.",
                                        "type": "array",
                                        "items": {
                                            "format": "int32",
                                            "type": "integer"
                                        }
                                    },
                                    "board_ids_to_remove": {
                                        "description": "A list of board ids where you want to be unavailable the tag.",
                                        "type": "array",
                                        "items": {
                                            "format": "int32",
                                            "type": "integer"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The tag is now available or unavailable on the boards."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/tagIdInPath"
                }
            ]
        },
        "\/tags\/{tag_id}\/cards": {
            "get": {
                "tags": [
                    "Tag Cards"
                ],
                "summary": "Get a list of cards where the tag is available",
                "description": "Get a list of the cards on which the tag is available.",
                "operationId": "getTagCards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of cards.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "card_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/tagIdInPath"
                }
            ]
        },
        "\/tags\/history": {
            "get": {
                "tags": [
                    "Tag History"
                ],
                "summary": "Get a list of tags creation, deletion, update events",
                "description": "Get a list of tags creation, deletion, update events matching some optional criteria.",
                "operationId": "getTagsHistory",
                "parameters": [
                    {
                        "name": "tag_ids",
                        "in": "query",
                        "description": "A list of the tag ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the tag.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "tag_created",
                                    "tag_updated",
                                    "tag_disabled",
                                    "tag_enabled",
                                    "tag_deleted",
                                    "tag_added_to_board",
                                    "tag_removed_from_board"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "pagination": {
                                            "type": "object",
                                            "properties": {
                                                "all_pages": {
                                                    "description": "The number of pages the result is split into.",
                                                    "type": "integer"
                                                },
                                                "current_page": {
                                                    "description": "The current page.",
                                                    "type": "integer"
                                                },
                                                "results_per_page": {
                                                    "description": "The number of results per page.",
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "data": {
                                            "description": "A list of tags creation, deletion, update events.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/TagHistoryEvent"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/customFields": {
            "get": {
                "tags": [
                    "Custom Fields"
                ],
                "summary": "Get a list of custom fields",
                "description": "Get a list of custom fields matching some optional criteria.",
                "operationId": "getCustomFields",
                "parameters": [
                    {
                        "name": "field_ids",
                        "in": "query",
                        "description": "A list of the field ids that you want to get.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Find a custom field by its full name.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "availability",
                        "in": "query",
                        "description": "A list of the availability values that you want to get.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1,
                                    2
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "is_enabled",
                        "in": "query",
                        "description": "When set to 1 you will only get enabled custom fields. When set to 0 you will only get disabled custom fields.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "is_immutable",
                        "in": "query",
                        "description": "When set to 1 you will only get immutable custom fields. When set to 0 you will only get mutable custom fields.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "is_always_present",
                        "in": "query",
                        "description": "When set to 1 you will only get the custom fields which are always present. When set to 0 you will only get the custom fields which are not always present.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "types",
                        "in": "query",
                        "description": "A list of the types of custom fiels that you want to get. The allowed fields are: single_line_text, multi_line_text, number, date, link, dropdown, contributor, file, vote and card_picker.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "single_line_text",
                                    "multi_line_text",
                                    "number",
                                    "date",
                                    "link",
                                    "dropdown",
                                    "contributor",
                                    "file",
                                    "vote",
                                    "card_picker"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "A list of properties for which you want to get additional details. The allowed properties at the moment are: allowed_values, boards, board_count, card_ids, card_count, outcome_count, default_contributors and business_rules.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "allowed_values",
                                    "boards",
                                    "board_count",
                                    "card_ids",
                                    "card_count",
                                    "outcome_count",
                                    "default_contributors",
                                    "business_rules"
                                ]
                            }
                        },
                        "explode": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of custom fields.",
                                            "type": "array",
                                            "items": {
                                                "oneOf": [
                                                    {
                                                        "$ref": "#\/components\/schemas\/CustomFieldDataSingleLineWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CustomFieldDataMultiLineWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CustomFieldDataNumberWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CustomFieldDataDateWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CustomFieldDataLinkWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CustomFieldDataDropdownWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CustomFieldDataContributorWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CustomFieldDataFileWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CustomFieldDataVoteWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CustomFieldDataCardPickerWithFieldId"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Custom Fields"
                ],
                "summary": "Create a custom field",
                "description": "Create a new custom field.",
                "operationId": "createCustomField",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#\/components\/schemas\/CustomFieldCreateRequestSingleLine"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/CustomFieldCreateRequestMultiLine"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/CustomFieldCreateRequestNumber"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/CustomFieldCreateRequestDate"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/CustomFieldCreateRequestLink"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/CustomFieldCreateRequestDropdown"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/CustomFieldCreateRequestContributor"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/CustomFieldCreateRequestFile"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/CustomFieldCreateRequestVote"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/CustomFieldCreateRequestCardPicker"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataSingleLineWithFieldId"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataMultiLineWithFieldId"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataNumberWithFieldId"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataDateWithFieldId"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataLinkWithFieldId"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataDropdownWithFieldId"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataContributorWithFieldId"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataFileWithFieldId"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataVoteWithFieldId"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataCardPickerWithFieldId"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/customFields\/{field_id}": {
            "get": {
                "tags": [
                    "Custom Fields"
                ],
                "summary": "Get the details of a single custom field",
                "description": "Get the details of a single custom field.",
                "operationId": "getCustomField",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataSingleLine"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataMultiLine"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataNumber"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataDate"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataLink"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataDropdown"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataContributor"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataFile"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataVote"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataCardPicker"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Custom Fields"
                ],
                "summary": "Update a custom field",
                "description": "Update a custom field.",
                "operationId": "updateCustomField",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#\/components\/schemas\/CustomFieldUpdateRequestSingleLine"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/CustomFieldUpdateRequestMultiLine"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/CustomFieldUpdateRequestNumber"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/CustomFieldUpdateRequestDate"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/CustomFieldUpdateRequestLink"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/CustomFieldUpdateRequestDropdown"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/CustomFieldUpdateRequestContributor"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/CustomFieldUpdateRequestFile"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/CustomFieldUpdateRequestVote"
                                    },
                                    {
                                        "$ref": "#\/components\/schemas\/CustomFieldUpdateRequestCardPicker"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataSingleLine"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataMultiLine"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataNumber"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataDate"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataLink"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataDropdown"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataContributor"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataFile"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataVote"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldDataCardPicker"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Custom Fields"
                ],
                "summary": "Delete a custom field",
                "description": "Delete a custom field.",
                "operationId": "deleteCustomField",
                "responses": {
                    "204": {
                        "description": "The custom field has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                }
            ]
        },
        "\/customFields\/{field_id}\/allowedValues": {
            "get": {
                "tags": [
                    "Custom Field Allowed Values"
                ],
                "summary": "Get a list of the allowed values of a custom field of type dropdown",
                "description": "Get a list of the allowed values of a custom field of type dropdown.",
                "operationId": "getCustomFieldAllowedValues",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of allowed values.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "value_id": {
                                                                "description": "Value id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CustomFieldAllowedValue"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Custom Field Allowed Values"
                ],
                "summary": "Create an allowed value",
                "description": "Create a new allowed value.",
                "operationId": "createCustomFieldAllowedValue",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Custom field allowed value data.",
                                "required": [
                                    "value"
                                ],
                                "type": "object",
                                "properties": {
                                    "position": {
                                        "description": "The position of the value within the dropdown.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "is_default": {
                                        "description": "Controls whether the value is selected by default.",
                                        "format": "int32",
                                        "type": "integer",
                                        "default": 0,
                                        "enum": [
                                            0,
                                            1
                                        ]
                                    },
                                    "value": {
                                        "description": "The new value.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 250
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "allOf": [
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "value_id": {
                                                            "description": "Value id.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        }
                                                    }
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CustomFieldAllowedValue"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                }
            ]
        },
        "\/customFields\/{field_id}\/allowedValues\/{value_id}": {
            "get": {
                "tags": [
                    "Custom Field Allowed Values"
                ],
                "summary": "Get the details of a single allowed value",
                "description": "Get the details of a single allowed value.",
                "operationId": "getCustomFieldAllowedValue",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CustomFieldAllowedValue"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Custom Field Allowed Values"
                ],
                "summary": "Update an allowed value",
                "description": "Update an allowed value.",
                "operationId": "updateCustomFieldAllowedValue",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Custom field allowed value data.",
                                "type": "object",
                                "properties": {
                                    "position": {
                                        "description": "The position of the value within the dropdown.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "is_default": {
                                        "description": "Controls whether the value is selected by default.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ]
                                    },
                                    "value": {
                                        "description": "The new value.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 250
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CustomFieldAllowedValue"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Custom Field Allowed Values"
                ],
                "summary": "Delete an allowed value",
                "description": "Delete an allowed value.",
                "operationId": "deleteCustomFieldAllowedValue",
                "parameters": [
                    {
                        "name": "replace_with_value_id",
                        "in": "query",
                        "description": "The id of a value with which to replace the one to be deleted on the cards using it.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The allowed value has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/valueIdInPath"
                }
            ]
        },
        "\/customFields\/{field_id}\/boards": {
            "get": {
                "tags": [
                    "Custom Field Boards"
                ],
                "summary": "Get a list of boards where the custom field is available and its properties",
                "description": "Get a list of the boards on which the custom field is available and its properties.",
                "operationId": "getCustomFieldBoards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of board custom field properties.",
                                            "type": "array",
                                            "items": {
                                                "oneOf": [
                                                    {
                                                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataSingleLine"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataMultiLine"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataNumber"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataDate"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataLink"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataDropdown"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataContributor"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataFile"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataVote"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataCardPicker"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                }
            ]
        },
        "\/customFields\/{field_id}\/batchBoardOperations": {
            "post": {
                "tags": [
                    "Custom Field Boards"
                ],
                "summary": "Make a custom field available or unavailable on several boards",
                "description": "Make a custom field available or unavailable on several boards.",
                "operationId": "updateCustomFieldBoards",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Custom field boards data.",
                                "type": "object",
                                "properties": {
                                    "boards_to_add_or_update": {
                                        "description": "A list of board ids where you want to be available the custom field or to update it.",
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "board_id"
                                            ],
                                            "type": "object",
                                            "properties": {
                                                "board_id": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                },
                                                "color": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "is_always_present": {
                                                    "format": "int32",
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1
                                                    ],
                                                    "nullable": true
                                                },
                                                "position": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    },
                                    "board_ids_to_remove": {
                                        "description": "A list of board ids where you want to be unavailable the custom field.",
                                        "type": "array",
                                        "items": {
                                            "format": "int32",
                                            "type": "integer"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "oneOf": [
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "oneOf": [
                                                            {
                                                                "$ref": "#\/components\/schemas\/BoardCustomFieldDataSingleLineWithBoardId"
                                                            },
                                                            {
                                                                "$ref": "#\/components\/schemas\/BoardCustomFieldDataMultiLineWithBoardId"
                                                            },
                                                            {
                                                                "$ref": "#\/components\/schemas\/BoardCustomFieldDataNumberWithBoardId"
                                                            },
                                                            {
                                                                "$ref": "#\/components\/schemas\/BoardCustomFieldDataDateWithBoardId"
                                                            },
                                                            {
                                                                "$ref": "#\/components\/schemas\/BoardCustomFieldDataLinkWithBoardId"
                                                            },
                                                            {
                                                                "$ref": "#\/components\/schemas\/BoardCustomFieldDataDropdownWithBoardId"
                                                            },
                                                            {
                                                                "$ref": "#\/components\/schemas\/BoardCustomFieldDataContributorWithBoardId"
                                                            },
                                                            {
                                                                "$ref": "#\/components\/schemas\/BoardCustomFieldDataFileWithBoardId"
                                                            },
                                                            {
                                                                "$ref": "#\/components\/schemas\/BoardCustomFieldDataVoteWithBoardId"
                                                            },
                                                            {
                                                                "$ref": "#\/components\/schemas\/BoardCustomFieldDataCardPickerWithBoardId"
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "maxItems": 0
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                }
            ]
        },
        "\/customFields\/{field_id}\/cards": {
            "get": {
                "tags": [
                    "Custom Field Cards"
                ],
                "summary": "Get a list of the cards to which a custom field is added and its values",
                "description": "Get a list of the cards to which a custom field is added and its values.",
                "operationId": "getCustomFieldCards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of card custom field values.",
                                            "type": "array",
                                            "items": {
                                                "oneOf": [
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardCustomFieldDataSingleLine"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardCustomFieldDataMultiLine"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardCustomFieldDataNumber"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardCustomFieldDataDate"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardCustomFieldDataLink"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardCustomFieldDataDropdown"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardCustomFieldDataContributor"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardCustomFieldDataFile"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardCustomFieldDataVote"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardCustomFieldDataCardPicker"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                }
            ]
        },
        "\/customFields\/history": {
            "get": {
                "tags": [
                    "Custom Field History"
                ],
                "summary": "Get a list of custom field management history events.",
                "description": "Get a list of custom field management history events.",
                "operationId": "getCustomFieldHistory",
                "parameters": [
                    {
                        "name": "field_ids",
                        "in": "query",
                        "description": "A list of ids of the custom fields that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the custom field.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "custom_field_created",
                                    "custom_field_updated",
                                    "custom_field_deleted",
                                    "custom_field_shared",
                                    "custom_field_unshared",
                                    "custom_field_added_to_board",
                                    "custom_field_removed_from_board",
                                    "custom_field_board_properties_updated"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "pagination": {
                                            "type": "object",
                                            "properties": {
                                                "all_pages": {
                                                    "description": "The number of pages the result is split into.",
                                                    "type": "integer"
                                                },
                                                "current_page": {
                                                    "description": "The current page.",
                                                    "type": "integer"
                                                },
                                                "results_per_page": {
                                                    "description": "The number of results per page.",
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "data": {
                                            "description": "A list of custom field management history events.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CustomFieldHistoryEvent"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/teams": {
            "get": {
                "tags": [
                    "Teams"
                ],
                "summary": "Get a list of teams",
                "description": "Get a list of teams matching some optional criteria.",
                "operationId": "getTeams",
                "parameters": [
                    {
                        "name": "team_ids",
                        "in": "query",
                        "description": "A list of the team ids that you want to get.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Find a team by its full name.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "A list of fields that you want in the response. The allowed fields are: team_id, name, description.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "team_id",
                                    "name",
                                    "description"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "A list of properties for which you want to get additional details. The allowed properties at the moment are: boards and user_ids.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "boards",
                                    "user_ids"
                                ]
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of teams.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/Team"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Teams"
                ],
                "summary": "Create a team",
                "description": "Create a new team.",
                "operationId": "createTeam",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Team data.",
                                "required": [
                                    "name"
                                ],
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "A name for the new team.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 250
                                    },
                                    "description": {
                                        "description": "The description of the team.",
                                        "type": "string",
                                        "default": null
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Team"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/teams\/{team_id}": {
            "get": {
                "tags": [
                    "Teams"
                ],
                "summary": "Get the details of a single team",
                "description": "Get the details of a single team.",
                "operationId": "getTeam",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Team"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Teams"
                ],
                "summary": "Update a team",
                "description": "Update a team.",
                "operationId": "updateTeam",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Team data.",
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "The name for the team.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 250
                                    },
                                    "description": {
                                        "description": "The description of the team.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Team"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Teams"
                ],
                "summary": "Delete a team",
                "description": "Delete a team.",
                "operationId": "deleteTeam",
                "responses": {
                    "204": {
                        "description": "The team has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/teamIdInPath"
                }
            ]
        },
        "\/teams\/{team_id}\/boards": {
            "get": {
                "tags": [
                    "Team Boards"
                ],
                "summary": "Get a list of boards where the team is available",
                "description": "Get a list of the boards on which the team is available.",
                "operationId": "getTeamBoards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of boards.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "board_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/teamIdInPath"
                }
            ]
        },
        "\/teams\/{team_id}\/users": {
            "get": {
                "tags": [
                    "Team Users"
                ],
                "summary": "Get a list of users added to the team",
                "description": "Get a list of users added to the team.",
                "operationId": "getTeamUsers",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of users.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "user_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/teamIdInPath"
                }
            ]
        },
        "\/teams\/{team_id}\/users\/{user_id}": {
            "get": {
                "tags": [
                    "Team Users"
                ],
                "summary": "Check if a user is added to a team",
                "description": "Check if a user is added to a team.",
                "operationId": "checkTeamUser",
                "responses": {
                    "204": {
                        "description": "The user is added to the team! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Team Users"
                ],
                "summary": "Add a user to the team",
                "description": "Add a user to the team.",
                "operationId": "addTeamUser",
                "responses": {
                    "204": {
                        "description": "The user is now member of the team."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Team Users"
                ],
                "summary": "Remove a user from the team",
                "description": "Remove a user from the team.",
                "operationId": "removeTeamUser",
                "responses": {
                    "204": {
                        "description": "The user is no longer member of the board."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/teamIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/userIdInPath"
                }
            ]
        },
        "\/teams\/{team_id}\/managers": {
            "get": {
                "tags": [
                    "Team Managers"
                ],
                "summary": "Get a list of users who can manage the team",
                "description": "Get a list of users who can manage the team.",
                "operationId": "getTeamManagers",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of managers.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "user_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/teamIdInPath"
                }
            ]
        },
        "\/teams\/{team_id}\/managers\/{user_id}": {
            "get": {
                "tags": [
                    "Team Managers"
                ],
                "summary": "Check if a user is added as a team manager to a team",
                "description": "Check if a user is added as a team manager to a team.",
                "operationId": "checkTeamManager",
                "responses": {
                    "204": {
                        "description": "The user is added to the team as team manager! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Team Managers"
                ],
                "summary": "Set a user as a manager of the team",
                "description": "Set a user as a manager of the team.",
                "operationId": "addTeamManager",
                "responses": {
                    "204": {
                        "description": "The user is now a manager of the team."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Team Managers"
                ],
                "summary": "Remove a user as a manager of the team",
                "description": "Remove a user as a manager of the team.",
                "operationId": "removeTeamManager",
                "responses": {
                    "204": {
                        "description": "The user is no longer a manager of the board."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/teamIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/userIdInPath"
                }
            ]
        },
        "\/teams\/history": {
            "get": {
                "tags": [
                    "Team History"
                ],
                "summary": "Get a list of teams creation, deletion, update events",
                "description": "Get a list of teams creation, deletion, update events matching some optional criteria.",
                "operationId": "getTeamsHistory",
                "parameters": [
                    {
                        "name": "team_ids",
                        "in": "query",
                        "description": "A list of the team ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the team.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "team_created",
                                    "team_updated",
                                    "team_deleted",
                                    "team_added_to_board",
                                    "team_change_role_for_board",
                                    "team_removed_from_board",
                                    "user_added_to_team",
                                    "user_removed_from_team",
                                    "user_added_to_team_managers",
                                    "user_removed_from_team_managers"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "pagination": {
                                            "type": "object",
                                            "properties": {
                                                "all_pages": {
                                                    "description": "The number of pages the result is split into.",
                                                    "type": "integer"
                                                },
                                                "current_page": {
                                                    "description": "The current page.",
                                                    "type": "integer"
                                                },
                                                "results_per_page": {
                                                    "description": "The number of results per page.",
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "data": {
                                            "description": "A list of teams creation, deletion, update events.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/TeamHistoryEvent"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/cards": {
            "get": {
                "tags": [
                    "Cards"
                ],
                "summary": "Get a list of cards",
                "description": "Get a list of cards matching some optional criteria.",
                "operationId": "getCards",
                "parameters": [
                    {
                        "name": "card_ids",
                        "in": "query",
                        "description": "A list of the card ids that you want to get.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "board_ids",
                        "in": "query",
                        "description": "A list of the board ids for which you want to get the results.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "workflow_ids",
                        "in": "query",
                        "description": "A list of the workflows ids for which you want to get the results.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "The state value of cards that you want to get. By default it's the active state.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "archived",
                                "discarded"
                            ]
                        },
                        "explode": false
                    },
                    {
                        "name": "created_from",
                        "in": "query",
                        "description": "The first date and time of created cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "created_from_date",
                        "in": "query",
                        "description": "The first date of created cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "created_to",
                        "in": "query",
                        "description": "The last date and time of created cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "created_to_date",
                        "in": "query",
                        "description": "The last date of created cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "last_modified_from",
                        "in": "query",
                        "description": "The first date and time of last modified cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "last_modified_from_date",
                        "in": "query",
                        "description": "The first date of last modified cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "last_modified_to",
                        "in": "query",
                        "description": "The last date and time of last modified cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "last_modified_to_date",
                        "in": "query",
                        "description": "The last date of last modified cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "in_current_position_since_from",
                        "in": "query",
                        "description": "The first date and time of in current position since cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "in_current_position_since_from_date",
                        "in": "query",
                        "description": "The first date of in current position since cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "in_current_position_since_to",
                        "in": "query",
                        "description": "The last date and time of in current position since cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "in_current_position_since_to_date",
                        "in": "query",
                        "description": "The last date of in current position since cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "is_blocked",
                        "in": "query",
                        "description": "When set to 1 you will only get blocked cards. When set to 0 you will only get non blocked cards.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "custom_ids",
                        "in": "query",
                        "description": "A list of the custom ids for which you want to get the results.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "owner_user_ids",
                        "in": "query",
                        "description": "A list of the user ids of assignees for which you want to get the results.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "type_ids",
                        "in": "query",
                        "description": "A list of the type ids for which you want to get the results.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "sizes",
                        "in": "query",
                        "description": "A list of the sizes for which you want to get the results.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "priorities",
                        "in": "query",
                        "description": "A list of the priorities for which you want to get the results.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 250
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "colors",
                        "in": "query",
                        "description": "A list of the colors for which you want to get the results.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "deadline_from",
                        "in": "query",
                        "description": "The first date and time of deadline cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "deadline_from_date",
                        "in": "query",
                        "description": "The first date of deadline cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "deadline_to",
                        "in": "query",
                        "description": "The last date and time of deadline cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "deadline_to_date",
                        "in": "query",
                        "description": "The last date of deadline cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "column_ids",
                        "in": "query",
                        "description": "A list of the column ids for which you want to get the results.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "lane_ids",
                        "in": "query",
                        "description": "A list of the lane ids for which you want to get the results.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "sections",
                        "in": "query",
                        "description": "A list of the sections for which you want to get the results.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "last_column_ids",
                        "in": "query",
                        "description": "A list of the last column ids for which you want to get the results.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "last_lane_ids",
                        "in": "query",
                        "description": "A list of the last lane ids for which you want to get the results.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "version_ids",
                        "in": "query",
                        "description": "A list of the version ids for which you want to get the results.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "archived_from",
                        "in": "query",
                        "description": "The first date and time of archived cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "archived_from_date",
                        "in": "query",
                        "description": "The first date of archived cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "archived_to",
                        "in": "query",
                        "description": "The last date and time of archived cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "archived_to_date",
                        "in": "query",
                        "description": "The last date of archived cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "reason_ids",
                        "in": "query",
                        "description": "A list of the reasons ids for which you want to get the results.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "discarded_from",
                        "in": "query",
                        "description": "The first date and time of discarded cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "discarded_from_date",
                        "in": "query",
                        "description": "The first date of discarded cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "discarded_to",
                        "in": "query",
                        "description": "The last date and time of discarded cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "discarded_to_date",
                        "in": "query",
                        "description": "The last date of discarded cards for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "include_logged_time_for_subtasks",
                        "in": "query",
                        "description": "Controls whether this include logged times for subtasks.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "include_logged_time_for_child_cards",
                        "in": "query",
                        "description": "Controls whether this include logged times for child cards.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 200 and the maximum is 1000.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "A list of fields that you want in the response. The allowed fields are: card_id, title, description, custom_id, owner_user_id, type_id, size, priority, color, deadline, reporter, created_at, revision, last_modified, in_current_position_since, board_id, workflow_id, column_id, lane_id, section, position, last_column_id, last_lane_id, version_id, archived_at, reason_id, discard_comment, discarded_at, is_blocked, block_reason, current_block_time, current_logged_time, current_cycle_time, child_card_stats, finished_subtask_count, unfinished_subtask_count and comment_count.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "card_id",
                                    "title",
                                    "description",
                                    "custom_id",
                                    "owner_user_id",
                                    "type_id",
                                    "size",
                                    "priority",
                                    "color",
                                    "deadline",
                                    "reporter",
                                    "created_at",
                                    "revision",
                                    "last_modified",
                                    "in_current_position_since",
                                    "board_id",
                                    "workflow_id",
                                    "column_id",
                                    "lane_id",
                                    "section",
                                    "position",
                                    "last_column_id",
                                    "last_lane_id",
                                    "version_id",
                                    "archived_at",
                                    "reason_id",
                                    "discard_comment",
                                    "discarded_at",
                                    "is_blocked",
                                    "block_reason",
                                    "current_block_time",
                                    "current_logged_time",
                                    "current_cycle_time",
                                    "child_card_stats",
                                    "finished_subtask_count",
                                    "unfinished_subtask_count",
                                    "comment_count"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "A list of properties for which you want to get additional details. The allowed properties at the moment are: custom_fields, stickers, tag_ids, co_owner_ids, watcher_ids, attachments, checked_column_checklist_items, initiative_details, annotations, subtasks, linked_cards, transitions, block_times, logged_times, logged_times_for_child_cards.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "custom_fields",
                                    "stickers",
                                    "tag_ids",
                                    "co_owner_ids",
                                    "watcher_ids",
                                    "attachments",
                                    "checked_column_checklist_items",
                                    "initiative_details",
                                    "annotations",
                                    "subtasks",
                                    "linked_cards",
                                    "transitions",
                                    "block_times",
                                    "logged_times",
                                    "logged_times_for_child_cards",
                                    "lead_time_per_column",
                                    "outcomes",
                                    "outcome_current_values"
                                ]
                            }
                        },
                        "explode": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "pagination": {
                                                    "type": "object",
                                                    "properties": {
                                                        "all_pages": {
                                                            "description": "The number of pages the result is split into.",
                                                            "type": "integer"
                                                        },
                                                        "current_page": {
                                                            "description": "The current page.",
                                                            "type": "integer"
                                                        },
                                                        "results_per_page": {
                                                            "description": "The number of results per page.",
                                                            "type": "integer"
                                                        }
                                                    }
                                                },
                                                "data": {
                                                    "description": "A list of cards.",
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#\/components\/schemas\/Card"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Cards"
                ],
                "summary": "Create a card",
                "description": "Create a new card.",
                "operationId": "createCard",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#\/components\/schemas\/CardCreateRequest"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "exceeding_reason": {
                                                "description": "Exceeding reason data.",
                                                "type": "string",
                                                "nullable": true
                                            },
                                            "reporter_user_id": {
                                                "description": "The user id of the reporter if the card is created on behalf of someone else.",
                                                "type": "integer",
                                                "nullable": true
                                            },
                                            "reporter_email": {
                                                "description": "The email of the reporter if the card is created on behalf of someone else without a known user id.",
                                                "format": "email",
                                                "type": "string",
                                                "nullable": true
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of cards.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/Card"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/cards\/createMany": {
            "post": {
                "tags": [
                    "Cards Create Many"
                ],
                "summary": "Create many cards",
                "description": "Create many cards.",
                "operationId": "createManyCards",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Cards data.",
                                "type": "object",
                                "required": [
                                    "cards"
                                ],
                                "properties": {
                                    "cards": {
                                        "description": "A list of cards data.",
                                        "type": "array",
                                        "items": {
                                            "$ref": "#\/components\/schemas\/CardCreateRequest"
                                        }
                                    },
                                    "exceeding_reason": {
                                        "description": "Exceeding reason data.",
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "reporter_user_id": {
                                        "description": "The user id of the reporter if the cards are created on behalf of someone else.",
                                        "type": "integer",
                                        "nullable": true
                                    },
                                    "reporter_email": {
                                        "description": "The email of the reporter if the cards are created on behalf of someone else without a known user id.",
                                        "format": "email",
                                        "type": "string",
                                        "nullable": true
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of cards.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/Card"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/cards\/updateMany": {
            "post": {
                "tags": [
                    "Cards Update Many"
                ],
                "summary": "Update many cards",
                "description": "Update many cards.",
                "operationId": "updateManyCards",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Cards data.",
                                "type": "object",
                                "required": [
                                    "cards"
                                ],
                                "properties": {
                                    "cards": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#\/components\/schemas\/CardUpdateWithCardIdRequest"
                                        }
                                    },
                                    "exceeding_reason": {
                                        "description": "Exceeding reason data.",
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "reporter_user_id": {
                                        "description": "The user id of the reporter of converted subtasks if the subtasks are converted on behalf of someone else.",
                                        "type": "integer",
                                        "nullable": true
                                    },
                                    "reporter_email": {
                                        "description": "The email of the reporter of converted subtasks if the subtasks are converted on behalf of someone else without a known user id.",
                                        "format": "email",
                                        "type": "string",
                                        "nullable": true
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of cards.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/Card"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/cards\/deleteMany": {
            "post": {
                "tags": [
                    "Cards Delete Many"
                ],
                "summary": "Delete many cards",
                "description": "Delete many cards.",
                "operationId": "deleteManyCards",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Card ids data.",
                                "type": "object",
                                "required": [
                                    "card_ids"
                                ],
                                "properties": {
                                    "card_ids": {
                                        "description": "A list of card ids.",
                                        "type": "array",
                                        "items": {
                                            "format": "int32",
                                            "type": "integer"
                                        }
                                    },
                                    "exceeding_reason": {
                                        "description": "Exceeding reason data.",
                                        "type": "string",
                                        "nullable": true
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The cards has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/cards\/{card_id}": {
            "get": {
                "tags": [
                    "Cards"
                ],
                "summary": "Get the details of a single card",
                "description": "Get the details of a single card.",
                "operationId": "getCard",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Card"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Cards"
                ],
                "summary": "Update a card",
                "description": "Update a card.",
                "operationId": "updateCard",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#\/components\/schemas\/CardUpdateRequest"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "exceeding_reason": {
                                                "description": "Exceeding reason data.",
                                                "type": "string",
                                                "nullable": true
                                            },
                                            "reporter_user_id": {
                                                "description": "The user id of the reporter of converted subtasks if the subtasks are converted on behalf of someone else.",
                                                "type": "integer",
                                                "nullable": true
                                            },
                                            "reporter_email": {
                                                "description": "The email of the reporter of converted subtasks if the subtasks are converted on behalf of someone else without a known user id.",
                                                "format": "email",
                                                "type": "string",
                                                "nullable": true
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Card"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Cards"
                ],
                "summary": "Delete a card",
                "description": "Delete a card.",
                "operationId": "deleteCard",
                "parameters": [
                    {
                        "name": "exceeding_reason",
                        "in": "query",
                        "description": "Exceeding reason.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The card has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/attachments": {
            "get": {
                "tags": [
                    "Card Attachments"
                ],
                "summary": "Get a card's attachments",
                "description": "Get a card's attachments.",
                "operationId": "getCardAttachments",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardAttachmentWithPosition"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Card Attachments"
                ],
                "summary": "Add a card's attachment",
                "description": "Add a card's attachment.",
                "operationId": "addCardAttachment",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardAttachmentCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardAttachmentWithPosition"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/attachments\/{attachment_id}": {
            "get": {
                "tags": [
                    "Card Attachments"
                ],
                "summary": "Get the details of an attachment for a card",
                "description": "Get the details of an attachment for a card.",
                "operationId": "getCardAttachment",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardAttachmentWithPosition"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Card Attachments"
                ],
                "summary": "Update the details of an attachment for a card",
                "description": "Update the details of an attachment for a card.",
                "operationId": "updateCardAttachment",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardAttachmentUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardAttachmentWithPosition"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "The change was made but you do not have the permission required to view the result."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Attachments"
                ],
                "summary": "Delete an attachment for a card",
                "description": "Delete an attachment for a card.",
                "operationId": "deleteCardAttachment",
                "responses": {
                    "204": {
                        "description": "The card attachment has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/attachmentIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/coOwners": {
            "get": {
                "tags": [
                    "Card Co Owners"
                ],
                "summary": "Get a card's co-owners",
                "description": "Get a card's co-owners.",
                "operationId": "getCardCoOwners",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of card co-owners.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "user_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/coOwners\/{user_id}": {
            "get": {
                "tags": [
                    "Card Co Owners"
                ],
                "summary": "Check if a co-owner is one for the card",
                "description": "Check if a co-owner is one for the card.",
                "operationId": "checkCardCoOwner",
                "responses": {
                    "204": {
                        "description": "The co-owner is one for the card! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Card Co Owners"
                ],
                "summary": "Add a user as a co-owner for a card",
                "description": "Add a user as a co-owner for a card.",
                "operationId": "addCardCoOwner",
                "responses": {
                    "204": {
                        "description": "The user is now a co-owner for the card."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Co Owners"
                ],
                "summary": "Remove a user as a co-owner for a card",
                "description": "Remove a user as a co-owner for a card.",
                "operationId": "removeCardCoOwner",
                "responses": {
                    "204": {
                        "description": "The user is no longer a co-owner for the card."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/userIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/comments": {
            "get": {
                "tags": [
                    "Card Comments"
                ],
                "summary": "Get a card's comments",
                "description": "Get a card's comments.",
                "operationId": "getCardComments",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardComment"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Card Comments"
                ],
                "summary": "Add a comment to a card",
                "description": "Add a comment to a card.",
                "operationId": "addCardComment",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CommentCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardComment"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/comments\/{comment_id}": {
            "get": {
                "tags": [
                    "Card Comments"
                ],
                "summary": "Get the details of a comment for a card",
                "description": "Get the details of a comment for a card.",
                "operationId": "getCardComment",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardComment"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Card Comments"
                ],
                "summary": "Update the details of a comment for a card",
                "description": "Update the details of a comment for a card.",
                "operationId": "updateCardComment",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CommentUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardComment"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "The change was made but you do not have the permission required to view the result."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Comments"
                ],
                "summary": "Delete a comment for a card",
                "description": "Delete a comment for a card.",
                "operationId": "deleteCardComment",
                "responses": {
                    "204": {
                        "description": "The card comment has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/commentIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/comments\/{comment_id}\/attachments": {
            "get": {
                "tags": [
                    "Card Comment Attachments"
                ],
                "summary": "Get a card comment's attachments",
                "description": "Get a card comment's attachments.",
                "operationId": "getCardCommentAttachments",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardCommentAttachmentWithId"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Card Comment Attachments"
                ],
                "summary": "Add a card comment's attachment",
                "description": "Add a card comment's attachment.",
                "operationId": "addCarCommentAttachment",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CommentAttachmentCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardCommentAttachmentWithId"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/commentIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/comments\/{comment_id}\/attachments\/{attachment_id}": {
            "get": {
                "tags": [
                    "Card Comment Attachments"
                ],
                "summary": "Get the details of an attachment for a card comment",
                "description": "Get the details of an attachment for a card comment.",
                "operationId": "getCardCommentAttachment",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardCommentAttachment"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "The change was made but you do not have the permission required to view the result."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Comment Attachments"
                ],
                "summary": "Delete an attachment for a card comment",
                "description": "Delete an attachment for a card comment.",
                "operationId": "deleteCardCommentAttachment",
                "responses": {
                    "204": {
                        "description": "The card comment attachment has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/commentIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/attachmentIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/outcomes": {
            "get": {
                "tags": [
                    "Card Outcomes"
                ],
                "summary": "Get a card's outcomes",
                "description": "Get a card's outcomes.",
                "operationId": "getCardOutcomes",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardOutcomeWithId"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Card Outcomes"
                ],
                "summary": "Add an outcome to a card",
                "description": "Add an outcome to a card.",
                "operationId": "addCardOutcome",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardOutcomeCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardOutcomeWithId"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/outcomes\/{outcome_id}": {
            "get": {
                "tags": [
                    "Card Outcomes"
                ],
                "summary": "Get the details of an outcome for a card",
                "description": "Get the details of an outcome for a card.",
                "operationId": "getCardOutcome",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardOutcome"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Card Outcomes"
                ],
                "summary": "Update the details of an outcome for a card",
                "description": "Update the details of an outcome for a card.",
                "operationId": "updateCardOutcome",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardOutcomeUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardOutcome"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "The change was made but you do not have the permission required to view the result."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Outcomes"
                ],
                "summary": "Delete an outcome for a card",
                "description": "Delete an outcome for a card.",
                "operationId": "deleteCardOutcome",
                "responses": {
                    "204": {
                        "description": "The card outcome has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/outcomeIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/outcomes\/{outcome_id}\/checkpoints": {
            "get": {
                "tags": [
                    "Card Outcome Checkpoints"
                ],
                "summary": "Get a card outcome's checkpoints",
                "description": "Get a card outcome's checkpoints.",
                "operationId": "getCardOutcomeCheckpoints",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardOutcomeCheckpointWithId"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Card Outcome Checkpoints"
                ],
                "summary": "Add a card outcome's checkpoint",
                "description": "Add a card outcome's checkpoint.",
                "operationId": "addCardOutcomeCheckpoint",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardOutcomeCheckpointCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardOutcomeCheckpointWithId"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/outcomeIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/outcomes\/{outcome_id}\/checkpoints\/{checkpoint_id}": {
            "get": {
                "tags": [
                    "Card Outcome Checkpoints"
                ],
                "summary": "Get the details of a checkpoint for a card outcome",
                "description": "Get the details of a checkpoint for a card outcome.",
                "operationId": "getCardOutcomeCheckpoint",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardOutcomeCheckpointWithId"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "The change was made but you do not have the permission required to view the result."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Card Outcome Checkpoints"
                ],
                "summary": "Update the details of a checkpoint for a card outcome",
                "description": "Update the details of a checkpoint for a card outcome.",
                "operationId": "updateCardOutcomeCheckpoint",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardOutcomeCheckpointUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardOutcomeCheckpointWithId"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Outcome Checkpoints"
                ],
                "summary": "Delete a checkpoint for a card outcome",
                "description": "Delete a checkpoint for a card outcome.",
                "operationId": "deleteCardOutcomeCheckpoint",
                "responses": {
                    "204": {
                        "description": "The card outcome checkpoint has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/outcomeIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/checkpointIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/outcomes\/{outcome_id}\/currentValue": {
            "get": {
                "tags": [
                    "Card Outcome Current Value"
                ],
                "summary": "Get the details of a current value for a card outcome",
                "description": "Get the details of a current value for a card outcome.",
                "operationId": "getCardOutcomeCurrentValue",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardOutcomeValueWithId"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/outcomeIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/outcomes\/{outcome_id}\/values": {
            "get": {
                "tags": [
                    "Card Outcome Values"
                ],
                "summary": "Get a card outcome's values",
                "description": "Get a card outcome's values.",
                "operationId": "getCardOutcomeValues",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardOutcomeValueWithId"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Card Outcome Values"
                ],
                "summary": "Add a card outcome's value",
                "description": "Add a card outcome's value.",
                "operationId": "addCardOutcomeValue",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardOutcomeValueCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardOutcomeValueWithId"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/outcomeIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/outcomes\/{outcome_id}\/values\/{value_id}": {
            "get": {
                "tags": [
                    "Card Outcome Values"
                ],
                "summary": "Get the details of a value for a card outcome",
                "description": "Get the details of a value for a card outcome.",
                "operationId": "getCardOutcomeValue",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardOutcomeValueWithIdAndOutcomeId"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "The change was made but you do not have the permission required to view the result."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Card Outcome Values"
                ],
                "summary": "Update the details of a value for a card outcome",
                "description": "Update the details of a value for a card outcome.",
                "operationId": "updateCardOutcomeValue",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardOutcomeValueUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardOutcomeValueWithIdAndOutcomeId"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Outcome Values"
                ],
                "summary": "Delete a value for a card outcome",
                "description": "Delete a value for a card outcome.",
                "operationId": "deleteCardOutcomeValue",
                "responses": {
                    "204": {
                        "description": "The card outcome value has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/outcomeIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/valueIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/subtasks": {
            "get": {
                "tags": [
                    "Card Subtasks"
                ],
                "summary": "Get a card's subtasks",
                "description": "Get a card's subtasks.",
                "operationId": "getCardSubtasks",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardSubtaskWithId"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Card Subtasks"
                ],
                "summary": "Add a subtask to a card",
                "description": "Add a subtask to a card.",
                "operationId": "addCardSubtask",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/SubtaskCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardSubtaskWithId"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/subtasks\/{subtask_id}": {
            "get": {
                "tags": [
                    "Card Subtasks"
                ],
                "summary": "Get the details of a subtask for a card",
                "description": "Get the details of a subtask for a card.",
                "operationId": "getCardSubtask",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardSubtaskWithId"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Card Subtasks"
                ],
                "summary": "Update the details of a subtask for a card",
                "description": "Update the details of a subtask for a card.",
                "operationId": "updateCardSubtask",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/SubtaskUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardSubtaskWithId"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "The change was made but you do not have the permission required to view the result."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Subtasks"
                ],
                "summary": "Delete a subtask for a card",
                "description": "Delete a subtask for a card.",
                "operationId": "deleteCardSubtask",
                "responses": {
                    "204": {
                        "description": "The card subtask has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/subtaskIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/subtasks\/{subtask_id}\/attachments": {
            "get": {
                "tags": [
                    "Card Subtask Attachments"
                ],
                "summary": "Get a card subtask's attachments",
                "description": "Get a card subtask's attachments.",
                "operationId": "getCardSubtaskAttachments",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardAttachmentWithPosition"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Card Subtask Attachments"
                ],
                "summary": "Add a card subtask's attachment",
                "description": "Add a card subtask's attachment.",
                "operationId": "addCarSubtaskAttachment",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardAttachmentCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardAttachmentWithPosition"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/subtaskIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/subtasks\/{subtask_id}\/attachments\/{attachment_id}": {
            "get": {
                "tags": [
                    "Card Subtask Attachments"
                ],
                "summary": "Get the details of an attachment for a card subtask",
                "description": "Get the details of an attachment for a card subtask.",
                "operationId": "getCardSubtaskAttachment",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardAttachmentWithPosition"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "The change was made but you do not have the permission required to view the result."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Card Subtask Attachments"
                ],
                "summary": "Update the details of an attachment for a card subtask",
                "description": "Update the details of an attachment for a card subtask.",
                "operationId": "updateCardSubtaskAttachment",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardAttachmentUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardAttachmentWithPosition"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Subtask Attachments"
                ],
                "summary": "Delete an attachment for a card subtask",
                "description": "Delete an attachment for a card subtask.",
                "operationId": "deleteCardSubtaskAttachment",
                "responses": {
                    "204": {
                        "description": "The card subtask attachment has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/subtaskIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/attachmentIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/watched": {
            "get": {
                "tags": [
                    "Card Watched"
                ],
                "summary": "Check current user is a watcher for the card",
                "description": "Check current user is a watcher for the card",
                "operationId": "checkCurrentUserIsCardWatcher",
                "responses": {
                    "204": {
                        "description": "The current user is a watcher for the card! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Card Watched"
                ],
                "summary": "Make a current user a watcher for the card",
                "description": "Make a current user a watcher for the card.",
                "operationId": "addCurrentUserForCardWatcher",
                "responses": {
                    "204": {
                        "description": "The current user is now a watcher for the card."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Watched"
                ],
                "summary": "Make a current user not a watcher for the card",
                "description": "Make a current user not a watcher for the card.",
                "operationId": "removeCurrentUserCardWatcher",
                "responses": {
                    "204": {
                        "description": "The current user is no longer a watcher for the card."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/watchers": {
            "get": {
                "tags": [
                    "Card Watchers"
                ],
                "summary": "Get a card's watchers",
                "description": "Get a card's watchers.",
                "operationId": "getCardWatchers",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of card watchers.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "user_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/watchers\/{user_id}": {
            "get": {
                "tags": [
                    "Card Watchers"
                ],
                "summary": "Check the user with a user id is a watcher for the card",
                "description": "Check the user with a user id is a watcher for the card",
                "operationId": "checkUserIsCardWatcher",
                "responses": {
                    "204": {
                        "description": "The user with a user id is a watcher for the card! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Card Watchers"
                ],
                "summary": "Make a user a watcher for the card",
                "description": "Make a user a watcher for the card.",
                "operationId": "addCardWatcher",
                "responses": {
                    "204": {
                        "description": "The user is now a watcher for the card."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Watchers"
                ],
                "summary": "Make a user not a watcher for the card",
                "description": "Make a user not a watcher for the card.",
                "operationId": "removeCardWatcher",
                "responses": {
                    "204": {
                        "description": "The user is no longer a watcher for the card."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/userIdInPath"
                }
            ]
        },
        "\/cardTemplates": {
            "get": {
                "tags": [
                    "Card Templates"
                ],
                "summary": "Get a list of card templates",
                "description": "Get a list of card templates matching some optional criteria.",
                "operationId": "getCardTemplates",
                "parameters": [
                    {
                        "name": "template_ids",
                        "in": "query",
                        "description": "A list of the card template ids that you want to get.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Find a card template by its full name.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "availability",
                        "in": "query",
                        "description": "A list of the availability values that you want to get.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1,
                                    2
                                ]
                            }
                        }
                    },
                    {
                        "name": "is_enabled",
                        "in": "query",
                        "description": "When set to 1 you will only get enabled card templates. When set to 0 you will only get disabled card templates.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "A list of fields that you want in the response. The allowed fields are: template_id, name, description, primary_template_card_id, availability and is_enabled.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "template_id",
                                    "name",
                                    "description",
                                    "primary_template_card_id",
                                    "availability",
                                    "is_enabled"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count and template_cards.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "board_ids",
                                    "board_count",
                                    "template_cards"
                                ]
                            }
                        },
                        "explode": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of card templates.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardTemplate"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Card Templates"
                ],
                "summary": "Create a new card template",
                "description": "Create a new card template.",
                "operationId": "createCardTemplate",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardTemplateCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardTemplate"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/cardTemplates\/{template_id}": {
            "get": {
                "tags": [
                    "Card Templates"
                ],
                "summary": "Get the details of a single card template",
                "description": "Get the details of a single card template.",
                "operationId": "getCardTemplate",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardTemplate"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Card Templates"
                ],
                "summary": "Update a card template",
                "description": "Update a card template.",
                "operationId": "updateCardTemplate",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardTemplateUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardTemplate"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Templates"
                ],
                "summary": "Delete a card template",
                "description": "Delete a card template.",
                "operationId": "deleteCardTemplate",
                "responses": {
                    "204": {
                        "description": "The card template has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards": {
            "get": {
                "tags": [
                    "Card Template Cards"
                ],
                "summary": "Get a list of cards for the card template",
                "description": "Get a list of cards for the card template.",
                "operationId": "getCardTemplateCards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of cards for the card template.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardTemplateCard"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Card Template Cards"
                ],
                "summary": "Add a card to the card template",
                "description": "Add a card to the card template.",
                "operationId": "addCardTemplateCard",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardTemplateCardInExistingTemplateCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardTemplateCard"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}": {
            "get": {
                "tags": [
                    "Card Template Cards"
                ],
                "summary": "Get the details of a single card for the card template",
                "description": "Get the details of a single card for the card template.",
                "operationId": "getCardTemplateCard",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardTemplateCard"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Card Template Cards"
                ],
                "summary": "Update a card of the card template",
                "description": "Update a card of the card template.",
                "operationId": "updateCardTemplateCard",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardTemplateCardUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardTemplateCard"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Template Cards"
                ],
                "summary": "Delete a card for the card template",
                "description": "Delete a card for the card template",
                "operationId": "deleteCardTemplateCard",
                "responses": {
                    "204": {
                        "description": "The card for the card template has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/attachments": {
            "get": {
                "tags": [
                    "Card Template Card Attachments"
                ],
                "summary": "Get a list of attachments of a card for the card template",
                "description": "Get a list of attachments of a card for the card template.",
                "operationId": "getCardTemplateCardAttachments",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardAttachmentWithPosition"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Card Template Card Attachments"
                ],
                "summary": "Add an attachment of a card for the card template",
                "description": "Add an attachment of a card for the card template.",
                "operationId": "addCardTemplateCardAttachment",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardTemplateAttachmentCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardAttachmentWithPosition"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/attachments\/{attachment_id}": {
            "get": {
                "tags": [
                    "Card Template Card Attachments"
                ],
                "summary": "Get the details of an attachment of a card for the card template",
                "description": "Get the details of an attachment of a card for the card template.",
                "operationId": "getCardTemplateCardAttachment",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardAttachmentWithPosition"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Card Template Card Attachments"
                ],
                "summary": "Update the details of an attachment of a card for the card template",
                "description": "Update the details of an attachment of a card for the card template.",
                "operationId": "updateCardTemplateCardAttachment",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardTemplateAttachmentUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardAttachmentWithPosition"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Template Card Attachments"
                ],
                "summary": "Delete an attachment of a card for the card template",
                "description": "Delete an attachment of a card for the card template.",
                "operationId": "deleteCardTemplateCardAttachment",
                "responses": {
                    "204": {
                        "description": "The attachment of a card for the card template has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/attachmentIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/children": {
            "get": {
                "tags": [
                    "Card Template Card Child Cards"
                ],
                "summary": "Get a list of child cards of a card for the card template",
                "description": "Get a list of child cards of a card for the card template.",
                "operationId": "getCardTemplateCardChildCards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of child cards of a card for the card template.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "template_card_id": {
                                                                "description": "Template card id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/LinkedCard"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/children\/{child_card_id}": {
            "get": {
                "tags": [
                    "Card Template Card Child Cards"
                ],
                "summary": "Check if a card is a child of a given card for the card template",
                "description": "Check if a card is a child of a given card for the card template and get its position in the parent's list of linked cards.",
                "operationId": "checkCardTemplateCardChildCard",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/LinkedCard"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Card Template Card Child Cards"
                ],
                "summary": "Make a card a child of a given card for the card template",
                "description": "Make a card a child of a given card for the card template.",
                "operationId": "addCardTemplateCardChildCard",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Link data.",
                                "type": "object",
                                "properties": {
                                    "template_card_position": {
                                        "description": "The position of the parent card within the child's list of linked cards.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "linked_template_card_position": {
                                        "description": "The position of the child card within the parent's list of linked cards.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "The position of the child card within the parent's list of linked cards.",
                                            "type": "object",
                                            "properties": {
                                                "position": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Template Card Child Cards"
                ],
                "summary": "Remove the link between a parent card and a child card",
                "description": "Remove the link between a parent card and a child card.",
                "operationId": "removeCardTemplateCardChildCard",
                "responses": {
                    "204": {
                        "description": "The two cards are no longer a parent and a child."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "name": "child_card_id",
                    "in": "path",
                    "description": "A child card id.",
                    "required": true,
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/coOwners": {
            "get": {
                "tags": [
                    "Card Template Card Co Owners"
                ],
                "summary": "Get a list of co-owners of a card for the card template",
                "description": "Get a list of co-owners of a card for the card template.",
                "operationId": "getCardTemplateCardCoOwners",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of co-owners of a card for the card template.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "user_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/coOwners\/{user_id}": {
            "get": {
                "tags": [
                    "Card Template Card Co Owners"
                ],
                "summary": "Check if a co-owner is one for the card for the card template",
                "description": "Check if a co-owner is one for the card for the card template.",
                "operationId": "checkCardTemplateCardCoOwner",
                "responses": {
                    "204": {
                        "description": "The co-owner is one for the card for the card template! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Card Template Card Co Owners"
                ],
                "summary": "Add a user as a co-owner for a card for the card template",
                "description": "Add a user as a co-owner for a card for the card template.",
                "operationId": "addCardTemplateCardCoOwner",
                "responses": {
                    "204": {
                        "description": "The user is now a co-owner for the card for the card template."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Template Card Co Owners"
                ],
                "summary": "Remove a user as a co-owner for the card for the card template",
                "description": "Remove a user as a co-owner for the card for the card template.",
                "operationId": "removeCardTemplateCardCoOwner",
                "responses": {
                    "204": {
                        "description": "The user is no longer a co-owner for the card for the card template."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/userIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/customFields": {
            "get": {
                "tags": [
                    "Card Template Card Custom Fields"
                ],
                "summary": "Get a list of custom fields of a card for the card template",
                "description": "Get a list of the custom fields added to a card for the card template.",
                "operationId": "getCardTemplateCardCustomFields",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of custom fields of a card for the card template.",
                                            "type": "array",
                                            "items": {
                                                "oneOf": [
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataSingleLineWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataMultiLineWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataNumberWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataDateWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataLinkWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataDropdownWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataContributorWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataFileWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataVoteWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataCardPickerWithFieldId"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/customFields\/{field_id}": {
            "get": {
                "tags": [
                    "Card Template Card Custom Fields"
                ],
                "summary": "Get the details of a custom field for a card for the card template if it is applied to it",
                "description": "Get the details of a custom field for a card for the card template if it is applied to it.",
                "operationId": "getCardTemplateCardCustomField",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataSingleLine"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataMultiLine"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataNumber"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataDate"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataLink"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataDropdown"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataContributor"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataFile"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataVote"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataCardPicker"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Card Template Card Custom Fields"
                ],
                "summary": "Add a custom field to a card for the card template",
                "description": "Add a custom field to a card for the card template.",
                "operationId": "addCardTemplateCardCustomField",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardTemplateCustomFieldAddOrUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The custom field was added to the card for the card template."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Template Card Custom Fields"
                ],
                "summary": "Remove a custom field from a card for the card template",
                "description": "Remove a custom field from a card for the card template.",
                "operationId": "removeCardTemplateCardCustomField",
                "responses": {
                    "204": {
                        "description": "The custom field was removed from the card for the card template."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/customFields\/{field_id}\/selectedValues": {
            "get": {
                "tags": [
                    "Card Template Card Custom Field Selected Values"
                ],
                "summary": "Get a list of the selected values for a custom field of type dropdown for a card for the card template",
                "description": "Get a list of the selected values for a custom field of type dropdown for a card for the card template.",
                "operationId": "getCardTemplateCardCustomFieldSelectedValues",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of selected values.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardTemplateCustomFieldSelectedValue"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Card Template Card Custom Field Selected Values"
                ],
                "summary": "Add a selected value for a custom field for a card for the card template",
                "description": "Add or update a selected value for a custom field for a card for the card template.",
                "operationId": "addCardTemplateCardCustomFieldSelectedValues",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardTemplateCustomFieldSelectedValueAddOrUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardTemplateCustomFieldSelectedValue"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/customFields\/{field_id}\/selectedValues\/{value_id}": {
            "get": {
                "tags": [
                    "Card Template Card Custom Field Selected Values"
                ],
                "summary": "Get the details of a selected value for a custom field for a card for the card template",
                "description": "Get the details of a selected value for a custom field for a card for the card template.",
                "operationId": "getCardTemplateCardCustomFieldSelectedValue",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "The position of the value within the list of selected values.",
                                            "type": "object",
                                            "properties": {
                                                "position": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Card Template Card Custom Field Selected Values"
                ],
                "summary": "Add or update a selected value for a custom field for a card for the card template",
                "description": "Add or update a selected value for a custom field for a card for the card template.",
                "operationId": "addOrUpdateCardTemplateCardCustomFieldSelectedValues",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Card custom field selected value data for the card template.",
                                "type": "object",
                                "properties": {
                                    "position": {
                                        "description": "The position of the value within the list of selected values.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "The position of the value within the list of selected values.",
                                            "type": "object",
                                            "properties": {
                                                "position": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Template Card Custom Field Selected Values"
                ],
                "summary": "Remove a selected value for a custom field for a card for the card template",
                "description": "Remove a selected value for a custom field for a card for the card template.",
                "operationId": "removeCardTemplateCardCustomFieldSelectedValues",
                "responses": {
                    "204": {
                        "description": "The selected value has been removed."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/valueIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/customFields\/{field_id}\/files": {
            "get": {
                "tags": [
                    "Card Template Card Custom Field Files"
                ],
                "summary": "Get a list of the files for a custom field for a card for the card template",
                "description": "Get a list of the files for a custom field for a card for the card template.",
                "operationId": "getCardTemplateCardCustomFieldFiles",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of files.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardTemplateCustomFieldFile"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Card Template Card Custom Field Files"
                ],
                "summary": "Add a file for a custom field for a card for the card template",
                "description": "Add a file for a custom field for a card for the card template.",
                "operationId": "addCardTemplateCardCustomFieldFile",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardTemplateCustomFieldFileCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardTemplateCustomFieldFile"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/customFields\/{field_id}\/files\/{id}": {
            "get": {
                "tags": [
                    "Card Template Card Custom Field Files"
                ],
                "summary": "Get the details of a single file for a custom field for a card for the card template",
                "description": "Get the details of a single file for a custom field for a card for the card template.",
                "operationId": "getCardTemplateCardCustomFieldFile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardTemplateCustomFieldFile"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Card Template Card Custom Field Files"
                ],
                "summary": "Update a file for a custom field for a card for the card template",
                "description": "Update a file for a custom field for a card for the card template.",
                "operationId": "updateCardTemplateCardCustomFieldFile",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardTemplateCustomFieldFileUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardTemplateCustomFieldFile"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Template Card Custom Field Files"
                ],
                "summary": "Delete a file for a custom field for a card for the card template",
                "description": "Delete a file for a custom field for a card for the card template.",
                "operationId": "deleteCardTemplateCardCustomFieldFile",
                "responses": {
                    "204": {
                        "description": "The file has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                },
                {
                    "name": "id",
                    "in": "path",
                    "description": "A file id.",
                    "required": true,
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/customFields\/{field_id}\/contributors": {
            "get": {
                "tags": [
                    "Card Template Card Custom Field Contributors"
                ],
                "summary": "Get a list of the default contributors for a custom field for a card for the card template",
                "description": "Get a list of the default contributors for a custom field for a card for the card template.",
                "operationId": "getCardTemplateCardCustomFieldContributors",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of default contributors.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "user_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/customFields\/{field_id}\/contributors\/{user_id}": {
            "get": {
                "tags": [
                    "Card Template Card Custom Field Contributors"
                ],
                "summary": "Check if a user is a contributor for a custom field for a card for the card template",
                "description": "Check if a user is a contributor for a custom field for a card for the card template.",
                "operationId": "checkCardTemplateCardCustomFieldContributor",
                "responses": {
                    "204": {
                        "description": "The user is a contributor for the custom field for the card for the card template! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Card Template Card Custom Field Contributors"
                ],
                "summary": "Add a user as a contributor for a custom field for a card for the card template",
                "description": "Add a user as a contributor for a custom field for a card for the card template.",
                "operationId": "addCardTemplateCardCustomFieldContributor",
                "responses": {
                    "204": {
                        "description": "The user is now a contributor for the custom field for the card for the card template."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Template Card Custom Field Contributors"
                ],
                "summary": "Remove a user as a contributor for a custom field for a card for the card template",
                "description": "Remove a user as a contributor for a custom field for a card  for the card template.",
                "operationId": "removeCardTemplateCardCustomFieldContributor",
                "responses": {
                    "204": {
                        "description": "The user is no longer a contributor for the custom field for the card for the card template."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/userIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/parents": {
            "get": {
                "tags": [
                    "Card Template Card Parent Cards"
                ],
                "summary": "Get a list of parent cards of a card for the card template",
                "description": "Get a list of parent cards of a card for the card template.",
                "operationId": "getCardTemplateCardParentCards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of parent cards.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "template_card_id": {
                                                                "description": "Template card id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/LinkedCard"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/parents\/{parent_card_id}": {
            "get": {
                "tags": [
                    "Card Template Card Parent Cards"
                ],
                "summary": "Check if a card is a parent of a given card for the card template",
                "description": "Check if a card is a parent of a given card for the card template and get its position in the child's list of linked cards.",
                "operationId": "checkCardTemplateCardParentCard",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/LinkedCard"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Card Template Card Parent Cards"
                ],
                "summary": "Make a card a parent of a given card for the card template",
                "description": "Make a card a parent of a given card for the card template.",
                "operationId": "addCardTemplateCardParentCard",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Link data.",
                                "type": "object",
                                "properties": {
                                    "template_card_position": {
                                        "description": "The position of the child card within the parent's list of linked cards.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "linked_template_card_position": {
                                        "description": "The position of the parent card within the child's list of linked cards.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "The position of the parent card within the child's list of linked cards.",
                                            "type": "object",
                                            "properties": {
                                                "position": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Template Card Parent Cards"
                ],
                "summary": "Remove the link between a child card and a parent card",
                "description": "Remove the link between a child card and a parent card.",
                "operationId": "removeCardTemplateCardParentCard",
                "responses": {
                    "204": {
                        "description": "The two cards are no longer a child and a parent."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "name": "parent_card_id",
                    "in": "path",
                    "description": "A parent card id.",
                    "required": true,
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/predecessors": {
            "get": {
                "tags": [
                    "Card Template Card Predecessor Cards"
                ],
                "summary": "Get a list of predecessor cards of a card for the card template",
                "description": "Get a list of predecessor cards of a card for the card template.",
                "operationId": "getCardTemplateCardPredecessorCards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of predecessor cards.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "template_card_id": {
                                                                "description": "Template card id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/LinkedCard"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/predecessors\/{predecessor_card_id}": {
            "get": {
                "tags": [
                    "Card Template Card Predecessor Cards"
                ],
                "summary": "Check if a card is a predecessor of a given card for the card template",
                "description": "Check if a card is a predecessor of a given card for the card template and get its position in the successor's list of linked cards.",
                "operationId": "checkCardTemplateCardPredecessorCard",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/LinkedCard"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Card Template Card Predecessor Cards"
                ],
                "summary": "Make a card a predecessor of a given card for the card template",
                "description": "Make a card a predecessor of a given card for the card template.",
                "operationId": "addCardTemplateCardPredecessorCard",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Link data.",
                                "type": "object",
                                "properties": {
                                    "linked_card_position": {
                                        "description": "The position of the predecessor card within the successor's list of linked cards.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "card_position": {
                                        "description": "The position of the successor card within the predecessor's list of linked cards.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "The position of the predecessor card within the successor's list of linked cards.",
                                            "type": "object",
                                            "properties": {
                                                "position": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Template Card Predecessor Cards"
                ],
                "summary": "Remove the link between a successor card and a predecessor card",
                "description": "Remove the link between a successor card and a predecessor card.",
                "operationId": "removeCardTemplateCardPredecessorCard",
                "responses": {
                    "204": {
                        "description": "The two cards are no longer a successor and a predecessor."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "name": "predecessor_card_id",
                    "in": "path",
                    "description": "A predecessor card id.",
                    "required": true,
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/relatives": {
            "get": {
                "tags": [
                    "Card Template Card Relative Cards"
                ],
                "summary": "Get a list of relative cards of a card for the card template",
                "description": "Get a list of relative cards of a card for the card template.",
                "operationId": "getCardTemplateCardRelativeCards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of relative cards.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "template_card_id": {
                                                                "description": "Template card id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/LinkedCard"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/relatives\/{related_card_id}": {
            "get": {
                "tags": [
                    "Card Template Card Relative Cards"
                ],
                "summary": "Check if a card is a relative of a given card for the card template",
                "description": "Check if a card is a relative of a given card for the card template and get its position in that card's list of linked cards.",
                "operationId": "checkCardTemplateCardRelatedCard",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/LinkedCard"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Card Template Card Relative Cards"
                ],
                "summary": "Make a card a relative of a given card for the card template",
                "description": "Make a card a relative of a given card for the card template.",
                "operationId": "addCardTemplateCardRelatedCard",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Link data.",
                                "type": "object",
                                "properties": {
                                    "template_card_position": {
                                        "description": "The position of the card within the related card's list of linked cards.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "linked_template_card_position": {
                                        "description": "The position of the related card within the card's list of linked cards.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "The position of the related card within the card's list of linked cards.",
                                            "type": "object",
                                            "properties": {
                                                "position": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Template Card Relative Cards"
                ],
                "summary": "Remove the link between a card and a related card",
                "description": "Remove the link between a card and a related card.",
                "operationId": "removeCardTemplateCardRelatedCard",
                "responses": {
                    "204": {
                        "description": "The two cards are no longer related."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "name": "related_card_id",
                    "in": "path",
                    "description": "A related card id.",
                    "required": true,
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/stickers": {
            "get": {
                "tags": [
                    "Card Template Card Stickers"
                ],
                "summary": "Get a list of stickers of a card for the card template",
                "description": "Get a list of stickers of a card for the card template. The stickers are listed in the order in which they were added.",
                "operationId": "getCardTemplateCardStickers",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardTemplateCardSticker"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Card Template Card Stickers"
                ],
                "summary": "Add a sticker of a card for the card template",
                "description": "Add a sticker of a card for the card template.",
                "operationId": "addCardTemplateCardSticker",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Sticker data.",
                                "type": "object",
                                "properties": {
                                    "sticker_id": {
                                        "description": "The id of the sticker.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardTemplateCardSticker"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/stickers\/{sticker_id}": {
            "delete": {
                "tags": [
                    "Card Template Card Stickers"
                ],
                "summary": "Remove a sticker from a card for the card template",
                "description": "Remove a sticker from a card for the card template.",
                "operationId": "removeCardTemplateCardSticker",
                "responses": {
                    "204": {
                        "description": "The sticker is now removed."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/stickerIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/subtasks": {
            "get": {
                "tags": [
                    "Card Template Card Subtasks"
                ],
                "summary": "Get a list of subtasks of a card for the card template",
                "description": "Get a list of subtasks of a card for the card template.",
                "operationId": "getCardTemplateCardSubtasks",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardTemplateCardSubtaskWithPosition"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Card Template Card Subtasks"
                ],
                "summary": "Add a subtask of a card for the card template",
                "description": "Add a subtask of a card for the card template.",
                "operationId": "addCardTemplateCardSubtask",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardTemplateSubtaskCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardTemplateCardSubtaskWithPosition"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/subtasks\/{subtask_id}": {
            "get": {
                "tags": [
                    "Card Template Card Subtasks"
                ],
                "summary": "Get the details of a subtask of a card for the card template",
                "description": "Get the details of a subtask of a card for the card template.",
                "operationId": "getCardTemplateCardSubtask",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardTemplateCardSubtaskWithPosition"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Card Template Card Subtasks"
                ],
                "summary": "Update the details of a subtask of a card for the card template",
                "description": "Update the details of a subtask of a card for the card template.",
                "operationId": "updateCardTemplateCardSubtask",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardTemplateSubtaskUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardTemplateCardSubtaskWithPosition"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Template Card Subtasks"
                ],
                "summary": "Delete a subtask for a card for the card template",
                "description": "Delete a subtask for a card for the card template.",
                "operationId": "deleteCardTemplateCardSubtask",
                "responses": {
                    "204": {
                        "description": "The subtask of a card for the card template has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/subtaskIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/subtasks\/{subtask_id}\/attachments": {
            "get": {
                "tags": [
                    "Card Template Card Subtask Attachments"
                ],
                "summary": "Get a list of attachments of a subtask of a card for the card template",
                "description": "Get a list of attachments of a subtask of a card for the card template.",
                "operationId": "getCardTemplateCardSubtaskAttachments",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardAttachmentWithPosition"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Card Template Card Subtask Attachments"
                ],
                "summary": "Add an attachment of a subtask of a card for the card template",
                "description": "Add an attachment of a subtask of a card for the card template.",
                "operationId": "addCardTemplateCarSubtaskAttachment",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardTemplateAttachmentCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardAttachmentWithPosition"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/subtaskIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/subtasks\/{subtask_id}\/attachments\/{attachment_id}": {
            "get": {
                "tags": [
                    "Card Template Card Subtask Attachments"
                ],
                "summary": "Get the details of an attachment of a subtask for a card for the card template",
                "description": "Get the details of an attachment of a subtask for a card for the card template.",
                "operationId": "getCardTemplateCardSubtaskAttachment",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardAttachmentWithPosition"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Card Template Card Subtask Attachments"
                ],
                "summary": "Update the details of an attachment of a subtask for a card for the card template",
                "description": "Update the details of an attachment of a subtask for a card for the card template.",
                "operationId": "updateCardTemplateCardSubtaskAttachment",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardTemplateAttachmentUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardAttachmentWithPosition"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Template Card Subtask Attachments"
                ],
                "summary": "Delete an attachment of a subtask for a card for the card template",
                "description": "Delete an attachment of a subtask for a card for the card template.",
                "operationId": "deleteCardTemplateCardSubtaskAttachment",
                "responses": {
                    "204": {
                        "description": "The attachment of a subtask for a card for the card template has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/subtaskIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/attachmentIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/successors": {
            "get": {
                "tags": [
                    "Card Template Card Successor Cards"
                ],
                "summary": "Get a list of successor cards of a card for the card template",
                "description": "Get a list of successor cards of a card for the card template.",
                "operationId": "getCardTemplateCardSuccessorCards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of successor cards.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "template_card_id": {
                                                                "description": "Template card id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/LinkedCard"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/successors\/{successor_card_id}": {
            "get": {
                "tags": [
                    "Card Template Card Successor Cards"
                ],
                "summary": "Check if a card is a successor of a given card for the card template",
                "description": "Check if a card is a successor of a given card for the card template and get its position in the predecessor's list of linked cards.",
                "operationId": "checkCardTemplateCardSuccessorCard",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/LinkedCard"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Card Template Card Successor Cards"
                ],
                "summary": "Make a card a successor of a given card for the card template",
                "description": "Make a card a successor of a given card for the card template.",
                "operationId": "addCardTemplateCardSuccessorCard",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Link data.",
                                "type": "object",
                                "properties": {
                                    "linked_card_position": {
                                        "description": "The position of the successor card within the predecessor's list of linked cards.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "card_position": {
                                        "description": "The position of the predecessor card within the successor's list of linked cards.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "The position of the successor card within the predecessor's list of linked cards.",
                                            "type": "object",
                                            "properties": {
                                                "position": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Template Card Successor Cards"
                ],
                "summary": "Remove the link between a predecessor card and a successor card",
                "description": "Remove the link between a predecessor card and a successor card.",
                "operationId": "removeCardTemplateCardSuccessorCard",
                "responses": {
                    "204": {
                        "description": "The two cards are no longer a predecessor and a successor."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "name": "successor_card_id",
                    "in": "path",
                    "description": "A successor card id.",
                    "required": true,
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/tags": {
            "get": {
                "tags": [
                    "Card Template Card Tags"
                ],
                "summary": "Get a list of tags of a card for the card template",
                "description": "Get a list of tags of a card for the card template. The tags are listed in the order in which they were added.",
                "operationId": "getCardTemplateCardTags",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardTag"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/tags\/{tag_id}": {
            "get": {
                "tags": [
                    "Card Template Card Tags"
                ],
                "summary": "Check if a tag is added to a card for the card template",
                "description": "Check if a tag is added to a card for the card template.",
                "operationId": "checkCardTemplateCardTag",
                "responses": {
                    "204": {
                        "description": "The tag is added to the card for the card template! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Card Template Card Tags"
                ],
                "summary": "Add a tag to a card for the card template",
                "description": "Add a tag to a card for the card template.",
                "operationId": "addCardTemplateCardTag",
                "responses": {
                    "204": {
                        "description": "The tag is now available on the card for the card template."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Template Card Tags"
                ],
                "summary": "Remove a tag from a card for the card template",
                "description": "Remove a tag from a card for the card template.",
                "operationId": "removeCardTemplateCardTag",
                "responses": {
                    "204": {
                        "description": "The tag is now removed."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/tagIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/watchers": {
            "get": {
                "tags": [
                    "Card Template Card Watchers"
                ],
                "summary": "Get a list of watchers of a card for the card template",
                "description": "Get a list of watchers of a card for the card template.",
                "operationId": "getCardTemplateCardWatchers",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "user_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cardTemplates\/{template_id}\/cards\/{card_id}\/watchers\/{user_id}": {
            "get": {
                "tags": [
                    "Card Template Card Watchers"
                ],
                "summary": "Check the user with a user id is a watcher for the card for the card template",
                "description": "Check the user with a user id is a watcher for the card for the card template",
                "operationId": "checkUserIsCardTemplateCardWatcher",
                "responses": {
                    "204": {
                        "description": "The user with a user id is a watcher for the card for the card template! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Card Template Card Watchers"
                ],
                "summary": "Make a user a watcher for a card for the card for the card template",
                "description": "Make a user a watcher for a card for the card for the card template.",
                "operationId": "addCardTemplateCardWatcher",
                "responses": {
                    "204": {
                        "description": "The user is now a watcher for the card for the card template."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Template Card Watchers"
                ],
                "summary": "Make a user not a watcher for the card for the card template",
                "description": "Make a user not a watcher for the card for the card template.",
                "operationId": "removeCardTemplateCardWatcher",
                "responses": {
                    "204": {
                        "description": "The user is no longer a watcher for the card for the card template."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/templateIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/userIdInPath"
                }
            ]
        },
        "\/cardTemplates\/history": {
            "get": {
                "tags": [
                    "Card Template History"
                ],
                "summary": "Get a list of card templates creation, deletion, update events",
                "description": "Get a list of card templates creation, deletion, update events matching some optional criteria.",
                "operationId": "getCardTemplatesHistory",
                "parameters": [
                    {
                        "name": "template_ids",
                        "in": "query",
                        "description": "A list of the template ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the card template.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "template_created",
                                    "template_updated",
                                    "template_disabled",
                                    "template_enabled",
                                    "template_deleted",
                                    "template_added_to_board",
                                    "template_updated_for_board",
                                    "template_removed_from_board"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "pagination": {
                                            "type": "object",
                                            "properties": {
                                                "all_pages": {
                                                    "description": "The number of pages the result is split into.",
                                                    "type": "integer"
                                                },
                                                "current_page": {
                                                    "description": "The current page.",
                                                    "type": "integer"
                                                },
                                                "results_per_page": {
                                                    "description": "The number of results per page.",
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "data": {
                                            "description": "A list of card templates creation, deletion, update events.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardTemplateHistoryEvent"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/cardTypes": {
            "get": {
                "tags": [
                    "Card Types"
                ],
                "summary": "Get a list of card types",
                "description": "Get a list of card types matching some optional criteria.",
                "operationId": "getCardTypes",
                "parameters": [
                    {
                        "name": "type_ids",
                        "in": "query",
                        "description": "A list of the card type ids that you want to get.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Find a card type by its full name.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "availability",
                        "in": "query",
                        "description": "A list of the availability values that you want to get.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1,
                                    2
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "is_enabled",
                        "in": "query",
                        "description": "When set to 1 you will only get enabled card types. When set to 0 you will only get disabled card types.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "A list of fields that you want in the response. The allowed fields are: type_id, icon_type, icon_id, name, description, color, card_color_sync, all_properties_are_locked, availability and is_enabled.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "type_id",
                                    "icon_type",
                                    "icon_id",
                                    "name",
                                    "description",
                                    "color",
                                    "card_color_sync",
                                    "all_properties_are_locked",
                                    "availability",
                                    "is_enabled"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "A list of properties for which you want to get additional details. The allowed properties at the moment are: boards, board_count, card_ids, card_count and business_rules.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "boards",
                                    "board_count",
                                    "card_ids",
                                    "card_count",
                                    "business_rules"
                                ]
                            }
                        },
                        "explode": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of card types.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardType"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Card Types"
                ],
                "summary": "Create a card type",
                "description": "Create a new card type.",
                "operationId": "createCardType",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Card type data.",
                                "required": [
                                    "name"
                                ],
                                "type": "object",
                                "properties": {
                                    "icon_type": {
                                        "description": "The type of the icon. 0 - system. 1 - user.",
                                        "format": "int32",
                                        "type": "integer",
                                        "default": 0
                                    },
                                    "icon_id": {
                                        "description": "An icon for the card type. If set to 0, the card type will not have an icon.",
                                        "format": "int32",
                                        "type": "integer",
                                        "default": 0
                                    },
                                    "name": {
                                        "description": "A name for the new card type.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 250
                                    },
                                    "description": {
                                        "description": "A description of the new card type.",
                                        "type": "string",
                                        "default": null
                                    },
                                    "color": {
                                        "description": "The color of the card type. 6 hexadecimal characters are expected.",
                                        "type": "string",
                                        "default": null
                                    },
                                    "card_color_sync": {
                                        "description": "When set to 1 the color of the cards with this type will be replaced with the color of the type and cannot be changed manually.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ],
                                        "default": 0
                                    },
                                    "all_properties_are_locked": {
                                        "description": "Controls whether the icon_type, icon_id, color and card_color_sync properties can be modified per board.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ],
                                        "default": 0
                                    },
                                    "availability": {
                                        "description": "When set to 0 the card type has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the card type is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the card type is added automatically to all boards and cannot be removed.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1,
                                            2
                                        ],
                                        "default": 0
                                    },
                                    "is_enabled": {
                                        "description": "Controls whether this card type is enabled.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ],
                                        "default": 1
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardType"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/cardTypes\/{type_id}": {
            "get": {
                "tags": [
                    "Card Types"
                ],
                "summary": "Get the details of a single card type",
                "description": "Get the details of a single card type.",
                "operationId": "getCardType",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardType"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Card Types"
                ],
                "summary": "Update a card type",
                "description": "Update a card type.",
                "operationId": "updateCardType",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Card type data.",
                                "type": "object",
                                "properties": {
                                    "icon_type": {
                                        "description": "The type of the icon. 0 - system. 1 - user.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "icon_id": {
                                        "description": "An icon for the card type. If set to 0, the card type will not have an icon.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "name": {
                                        "description": "The name for the card type.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 250
                                    },
                                    "description": {
                                        "description": "A description of the new card type.",
                                        "type": "string"
                                    },
                                    "color": {
                                        "description": "The color of the card type. 6 hexadecimal characters are expected.",
                                        "type": "string"
                                    },
                                    "card_color_sync": {
                                        "description": "When set to 1 the color of the cards with this type will be replaced with the color of the type and cannot be changed manually.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ]
                                    },
                                    "all_properties_are_locked": {
                                        "description": "Controls whether the icon_type, icon_id, color and card_color_sync properties can be modified per board.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ]
                                    },
                                    "availability": {
                                        "description": "When set to 0 the card type has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the card type is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the card type is added automatically to all boards and cannot be removed.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1,
                                            2
                                        ]
                                    },
                                    "is_enabled": {
                                        "description": "Controls whether this card type is enabled.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardType"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Types"
                ],
                "summary": "Delete a card type",
                "description": "Delete a card type.",
                "operationId": "deleteCardType",
                "parameters": [
                    {
                        "name": "replace_with_type_id",
                        "in": "query",
                        "description": "The id of a card type with which to replace the one to be deleted on the cards using it.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The card type has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/typeIdInPath"
                }
            ]
        },
        "\/cardTypes\/{type_id}\/boards": {
            "get": {
                "tags": [
                    "Card Type Boards"
                ],
                "summary": "Get a list of boards where the card type is available",
                "description": "Get a list of the boards on which the card type is available.",
                "operationId": "getCardTypeBoards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of boards.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "board_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/typeIdInPath"
                }
            ]
        },
        "\/cardTypes\/{type_id}\/cards": {
            "get": {
                "tags": [
                    "Card Type Cards"
                ],
                "summary": "Get a list of cards where the card type is available",
                "description": "Get a list of the cards on which the card type is available.",
                "operationId": "getCardTypeCards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of cards.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "card_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/typeIdInPath"
                }
            ]
        },
        "\/cardTypes\/history": {
            "get": {
                "tags": [
                    "Card Type History"
                ],
                "summary": "Get a list of card types creation, deletion, update events",
                "description": "Get a list of card types creation, deletion, update events matching some optional criteria.",
                "operationId": "getCardTypesHistory",
                "parameters": [
                    {
                        "name": "type_ids",
                        "in": "query",
                        "description": "A list of the card type ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the card type.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "type_created",
                                    "type_updated",
                                    "type_disabled",
                                    "type_enabled",
                                    "type_deleted",
                                    "type_added_to_board",
                                    "type_updated_for_board",
                                    "type_removed_from_board"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "pagination": {
                                            "type": "object",
                                            "properties": {
                                                "all_pages": {
                                                    "description": "The number of pages the result is split into.",
                                                    "type": "integer"
                                                },
                                                "current_page": {
                                                    "description": "The current page.",
                                                    "type": "integer"
                                                },
                                                "results_per_page": {
                                                    "description": "The number of results per page.",
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "data": {
                                            "description": "A list of card types creation, deletion, update events.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardTypeHistoryEvent"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/cards\/{card_id}\/blockReason": {
            "get": {
                "tags": [
                    "Card Block Reason"
                ],
                "summary": "Get a card's block reason",
                "description": "Check if a card is blocked and for what reason.",
                "operationId": "getCardBlockReason",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardBlockReason"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Card Block Reason"
                ],
                "summary": "Block a card",
                "description": "Block a card or change its block reason.",
                "operationId": "setCardBlockReason",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Block card data.",
                                "type": "object",
                                "properties": {
                                    "comment": {
                                        "description": "A comment about the block reason.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 250
                                    },
                                    "reason_id": {
                                        "description": "The id of the block reason.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "users": {
                                        "description": "If the card is blocked because it depends on users and the block reason allows showing this, their ids should be provided here.",
                                        "type": "array",
                                        "items": {
                                            "format": "int32",
                                            "type": "integer"
                                        }
                                    },
                                    "date": {
                                        "description": "If the card is blocked until a given date and the block reason allows showing this, the date should be provided here.",
                                        "type": "string",
                                        "format": "date"
                                    },
                                    "cards": {
                                        "description": "If the card is blocked because it depends on other cards and the block reason allows showing this, their ids should be provided here.",
                                        "type": "array",
                                        "items": {
                                            "format": "int32",
                                            "type": "integer"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The card is now blocked."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Block Reason"
                ],
                "summary": "Unblock a card",
                "description": "Unblock a card.",
                "operationId": "unblockCard",
                "responses": {
                    "204": {
                        "description": "The card is now unblocked."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/stickers": {
            "get": {
                "tags": [
                    "Card Stickers"
                ],
                "summary": "Get a list of card stickers",
                "description": "Get a list of the stickers added to a card. The stickers are listed in the order in which they were added.",
                "operationId": "getCardStickers",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of card stickers.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardSticker"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Card Stickers"
                ],
                "summary": "Add a sticker to a card",
                "description": "Add a sticker to a card.",
                "operationId": "addCardSticker",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Sticker data.",
                                "type": "object",
                                "properties": {
                                    "sticker_id": {
                                        "description": "The id of the sticker.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "if_not_present": {
                                        "description": "If set to 1 and the sticker has already been added to the card, it will not be added again. In this case a 409 response will be sent.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ],
                                        "default": 0
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardSticker"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "The change was made but you do not have the permission required to view the result."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/stickers\/{id}": {
            "delete": {
                "tags": [
                    "Card Stickers"
                ],
                "summary": "Remove a sticker from a card",
                "description": "Remove a sticker from a card.",
                "operationId": "removeCardSticker",
                "responses": {
                    "204": {
                        "description": "The sticker is now removed."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "name": "id",
                    "in": "path",
                    "description": "A relationship id.",
                    "required": true,
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            ]
        },
        "\/cards\/{card_id}\/tags": {
            "get": {
                "tags": [
                    "Card Tags"
                ],
                "summary": "Get a list of card tags",
                "description": "Get a list of the tags added to a card. The tags are listed in the order in which they were added.",
                "operationId": "getCardTags",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of card tags.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardTag"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/tags\/{tag_id}": {
            "get": {
                "tags": [
                    "Card Tags"
                ],
                "summary": "Check if a tag is added to a card",
                "description": "Check if a tag is added to a card.",
                "operationId": "checkCardTag",
                "responses": {
                    "204": {
                        "description": "The tag is added to the card! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Card Tags"
                ],
                "summary": "Add a tag to a card",
                "description": "Add a tag to a card.",
                "operationId": "addCardTag",
                "responses": {
                    "204": {
                        "description": "The tag is now available on the card."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Tags"
                ],
                "summary": "Remove a tag from a card",
                "description": "Remove a tag from a card.",
                "operationId": "removeCardTag",
                "responses": {
                    "204": {
                        "description": "The tag is now removed."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/tagIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/customFields": {
            "get": {
                "tags": [
                    "Card Custom Fields"
                ],
                "summary": "Get a list of card custom field values",
                "description": "Get a list of the custom fields added to a card their values.",
                "operationId": "getCardCustomFields",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of card custom field values.",
                                            "type": "array",
                                            "items": {
                                                "oneOf": [
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardCustomFieldDataSingleLineWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardCustomFieldDataMultiLineWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardCustomFieldDataNumberWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardCustomFieldDataDateWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardCustomFieldDataLinkWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardCustomFieldDataDropdownWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardCustomFieldDataContributorWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardCustomFieldDataFileWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardCustomFieldDataVoteWithFieldId"
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardCustomFieldDataCardPickerWithFieldId"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/customFields\/{field_id}": {
            "get": {
                "tags": [
                    "Card Custom Fields"
                ],
                "summary": "Get the details of a custom field for a card if it is applied to it",
                "description": "Get the details of a custom field for a card if it is applied to it.",
                "operationId": "getCardCustomField",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataSingleLine"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataMultiLine"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataNumber"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataDate"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataLink"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataDropdown"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataContributor"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataFile"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataVote"
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataCardPicker"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "The change was made but you do not have the permission required to view the result."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Card Custom Fields"
                ],
                "summary": "Add a custom field to a card",
                "description": "Add a custom field to a card.",
                "operationId": "addCardCustomField",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardCustomFieldAddOrUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The custom field was added to the card."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Custom Fields"
                ],
                "summary": "Remove a custom field from a card",
                "description": "Remove a custom field from a card.",
                "operationId": "removeCardCustomField",
                "responses": {
                    "204": {
                        "description": "The custom field was removed from the card."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/customFields\/{field_id}\/selectedValues": {
            "get": {
                "tags": [
                    "Card Custom Field Selected Values"
                ],
                "summary": "Get a list of the selected values for a custom field of type dropdown for a card",
                "description": "Get a list of the selected values for a custom field of type dropdown for a card.",
                "operationId": "getCardCustomFieldSelectedValues",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of selected values.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardCustomFieldSelectedValue"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/customFields\/{field_id}\/selectedValues\/{value_id}": {
            "get": {
                "tags": [
                    "Card Custom Field Selected Values"
                ],
                "summary": "Get the details of a selected value for a custom field for a card",
                "description": "Get the details of a selected value for a custom field for a card.",
                "operationId": "getCardCustomFieldSelectedValue",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "The position of the value within the list of selected values.",
                                            "type": "object",
                                            "properties": {
                                                "position": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Card Custom Field Selected Values"
                ],
                "summary": "Add or update a selected value for a custom field for a card",
                "description": "Add or update a selected value for a custom field for a card.",
                "operationId": "addOrUpdateCardCustomFieldSelectedValues",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardCustomFieldSelectedValueAddOrUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "The position of the value within the list of selected values.",
                                            "type": "object",
                                            "properties": {
                                                "position": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "The change was made but you do not have the permission required to view the result."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Custom Field Selected Values"
                ],
                "summary": "Remove a selected value for a custom field for a card",
                "description": "Remove a selected value for a custom field for a card.",
                "operationId": "removeCardCustomFieldSelectedValues",
                "responses": {
                    "204": {
                        "description": "The selected value has been removed."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/valueIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/customFields\/{field_id}\/files": {
            "get": {
                "tags": [
                    "Card Custom Field Files"
                ],
                "summary": "Get a list of the files for a custom field for a card",
                "description": "Get a list of the files for a custom field for a card.",
                "operationId": "getCardCustomFieldFiles",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of files.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "id": {
                                                                "description": "File id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CardCustomFieldFile"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Card Custom Field Files"
                ],
                "summary": "Add a file for a custom field for a card",
                "description": "Add a file for a custom field for a card.",
                "operationId": "addCardCustomFieldFile",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CardCustomFieldFileCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "allOf": [
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "id": {
                                                            "description": "File id.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        }
                                                    }
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/CardCustomFieldFile"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "The change was made but you do not have the permission required to view the result."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/customFields\/{field_id}\/files\/{id}": {
            "get": {
                "tags": [
                    "Card Custom Field Files"
                ],
                "summary": "Get the details of a single file for a custom field for a card",
                "description": "Get the details of a single file for a custom field for a card.",
                "operationId": "getCardCustomFieldFile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardCustomFieldFile"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Card Custom Field Files"
                ],
                "summary": "Update a file for a custom field for a card",
                "description": "Update a file for a custom field for a card.",
                "operationId": "updateCardCustomFieldFile",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Card custom field file data.",
                                "type": "object",
                                "properties": {
                                    "file_name": {
                                        "description": "The name of the file.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 250
                                    },
                                    "link": {
                                        "description": "The link to the file.",
                                        "type": "string"
                                    },
                                    "position": {
                                        "description": "The position of the file within the list of files.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardCustomFieldFile"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "The change was made but you do not have the permission required to view the result."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Custom Field Files"
                ],
                "summary": "Delete a file for a custom field for a card",
                "description": "Delete a file for a custom field for a card.",
                "operationId": "deleteCardCustomFieldFile",
                "responses": {
                    "204": {
                        "description": "The file has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                },
                {
                    "name": "id",
                    "in": "path",
                    "description": "A file id.",
                    "required": true,
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            ]
        },
        "\/cards\/{card_id}\/customFields\/{field_id}\/contributors": {
            "get": {
                "tags": [
                    "Card Custom Field Contributors"
                ],
                "summary": "Get a list of the default contributors for a custom field for a card",
                "description": "Get a list of the default contributors for a custom field for a card.",
                "operationId": "getCardCustomFieldContributors",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of default contributors.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "user_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/customFields\/{field_id}\/contributors\/{user_id}": {
            "get": {
                "tags": [
                    "Card Custom Field Contributors"
                ],
                "summary": "Check if a user is a contributor for a custom field for a card",
                "description": "Check if a user is a contributor for a custom field for a card.",
                "operationId": "checkCardCustomFieldContributor",
                "responses": {
                    "204": {
                        "description": "The user is a contributor for the custom field for the card! Otherwise, you would have gotten a 404 error."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Card Custom Field Contributors"
                ],
                "summary": "Add a user as a contributor for a custom field for a card",
                "description": "Add a user as a contributor for a custom field for a card.",
                "operationId": "addCardCustomFieldContributor",
                "responses": {
                    "204": {
                        "description": "The user is now a contributor for the custom field for the card."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Custom Field Contributors"
                ],
                "summary": "Remove a user as a contributor for a custom field for a card",
                "description": "Remove a user as a contributor for a custom field for a card.",
                "operationId": "removeCardCustomFieldContributor",
                "responses": {
                    "204": {
                        "description": "The user is no longer a contributor for the custom field for the card."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/userIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/customFields\/{field_id}\/votes": {
            "get": {
                "tags": [
                    "Card Custom Field Votes"
                ],
                "summary": "Get a list of the votes for a custom field for a card",
                "description": "Get a list of the votes for a custom field for a card.",
                "operationId": "getCardCustomFieldVotes",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of votes.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardCustomFieldDataVote"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/customFields\/{field_id}\/votes\/my": {
            "get": {
                "tags": [
                    "Card Custom Field Votes"
                ],
                "summary": "Get your vote for a custom field for a card",
                "description": "Get your vote for a custom field for a card.",
                "operationId": "getMyCardCustomFieldVote",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A vote.",
                                            "type": "object",
                                            "properties": {
                                                "vote": {
                                                    "format": "int32",
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1
                                                    ]
                                                },
                                                "comment": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Card Custom Field Votes"
                ],
                "summary": "Set your vote for a custom field for a card",
                "description": "Set your vote for a custom field for a card.",
                "operationId": "setMyCardCustomFieldVote",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Card custom field vote data.",
                                "type": "object",
                                "properties": {
                                    "vote": {
                                        "description": "Your vote.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ]
                                    },
                                    "comment": {
                                        "description": "A comment about your vote.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The user is now a contributor for the custom field for the card."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Card Custom Field Votes"
                ],
                "summary": "Update your vote for a custom field for a card",
                "description": "Update your vote for a custom field for a card.",
                "operationId": "updateMyCardCustomFieldVote",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Card custom field vote data.",
                                "type": "object",
                                "properties": {
                                    "vote": {
                                        "description": "Your vote.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ]
                                    },
                                    "comment": {
                                        "description": "A comment about your vote.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "Card custom field vote data.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A vote.",
                                            "type": "object",
                                            "properties": {
                                                "vote": {
                                                    "description": "Your vote.",
                                                    "format": "int32",
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1
                                                    ]
                                                },
                                                "comment": {
                                                    "description": "A comment about your vote.",
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Custom Field Votes"
                ],
                "summary": "Delete your vote for a custom field for a card",
                "description": "Delete your vote for a custom field for a card.",
                "operationId": "deleteMyCardCustomFieldVote",
                "responses": {
                    "204": {
                        "description": "Your vote for the custom field for the card was deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/customFields\/{field_id}\/selectedCards": {
            "get": {
                "tags": [
                    "Card Custom Field Selected Cards"
                ],
                "summary": "Get a list of the selected cards for a custom field of type card picker for a card",
                "description": "Get a list of the selected cards for a custom field of type card picker for a card.",
                "operationId": "getCardCustomFieldSelectedCards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of selected cards.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CardCustomFieldSelectedCard"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/customFields\/{field_id}\/selectedCards\/{selected_card_id}": {
            "get": {
                "tags": [
                    "Card Custom Field Selected Cards"
                ],
                "summary": "Get the details of a selected card for a custom field for a card",
                "description": "Get the details of a selected card for a custom field for a card.",
                "operationId": "getCardCustomFieldSelectedCard",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "The position of the selected card.",
                                            "type": "object",
                                            "properties": {
                                                "position": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Card Custom Field Selected Cards"
                ],
                "summary": "Add or update a selected card for a custom field for a card",
                "description": "Add or update a selected card for a custom field for a card.",
                "operationId": "addOrUpdateCardCustomFieldSelectedCards",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Card custom field selected card data.",
                                "type": "object",
                                "properties": {
                                    "position": {
                                        "description": "The position of the card within the list of selected cards.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "The position of the selected card.",
                                            "type": "object",
                                            "properties": {
                                                "position": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "The change was made but you do not have the permission required to view the result."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Custom Field Selected Cards"
                ],
                "summary": "Remove a selected card for a custom field for a card",
                "description": "Remove a selected card for a custom field for a card.",
                "operationId": "removeCardCustomFieldSelectedCards",
                "responses": {
                    "204": {
                        "description": "The selected card has been removed."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/fieldIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/selectedCardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/revisions": {
            "get": {
                "tags": [
                    "Card Revisions"
                ],
                "summary": "Get a list of revisions of the card",
                "description": "Get a list of the revisions of the card and the date and time they were replaced.",
                "operationId": "getCardRevisions",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of card revisions.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "revision": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "user_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "replaced_at": {
                                                        "format": "date-time",
                                                        "type": "string"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/revisions\/{revision}": {
            "get": {
                "tags": [
                    "Card Revisions"
                ],
                "summary": "Get a specific revision of the card",
                "description": "Get a specific revision of the card.",
                "operationId": "getCardRevision",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CardRevision"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "$ref": "#\/components\/parameters\/revisionInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/linkedCards": {
            "get": {
                "tags": [
                    "Linked Cards"
                ],
                "summary": "Get a list of linked cards",
                "description": "Get a list of the cards that are linked to a given card ordered by position.",
                "operationId": "getLinkedCards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of linked cards.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/LinkedCardWithType"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/children": {
            "get": {
                "tags": [
                    "Child Cards"
                ],
                "summary": "Get a list of child cards",
                "description": "Get a list of the child cards of a given card.",
                "operationId": "getChildCards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of child cards.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "card_id": {
                                                                "description": "Card id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/LinkedCard"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/children\/{child_card_id}": {
            "get": {
                "tags": [
                    "Child Cards"
                ],
                "summary": "Check if a card is a child of a given card",
                "description": "Check if a card is a child of a given card and get its position in the parent's list of linked cards.",
                "operationId": "checkChildCard",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/LinkedCard"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Child Cards"
                ],
                "summary": "Make a card a child of a given card",
                "description": "Make a card a child of a given card.",
                "operationId": "addChildCard",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Link data.",
                                "type": "object",
                                "properties": {
                                    "linked_card_position": {
                                        "description": "The position of the child card within the parent's list of linked cards.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "card_position": {
                                        "description": "The position of the parent card within the child's list of linked cards.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "exceeding_reason": {
                                        "description": "Exceeding reason data.",
                                        "type": "string",
                                        "nullable": true
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "The position of the child card within the parent's list of linked cards.",
                                            "type": "object",
                                            "properties": {
                                                "position": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "The change was made but you do not have the permission required to view the result."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Child Cards"
                ],
                "summary": "Remove the link between a parent card and a child card",
                "description": "Remove the link between a parent card and a child card.",
                "operationId": "removeChildCard",
                "parameters": [
                    {
                        "name": "exceeding_reason",
                        "in": "query",
                        "description": "Exceeding reason.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The two cards are no longer a parent and a child."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "name": "child_card_id",
                    "in": "path",
                    "description": "A child card id.",
                    "required": true,
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            ]
        },
        "\/cards\/{card_id}\/childGraph": {
            "get": {
                "tags": [
                    "Child Cards"
                ],
                "summary": "Get a list of child cards including their child cards too",
                "description": "Get the full list of child cards of a given card and the child cards of those cards too.",
                "operationId": "getChildCardGraph",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of child cards.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/ParentChildLink"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/parents": {
            "get": {
                "tags": [
                    "Parent Cards"
                ],
                "summary": "Get a list of parent cards",
                "description": "Get a list of the parent cards of a given card.",
                "operationId": "getParentCards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of parent cards.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "card_id": {
                                                                "description": "Card id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/LinkedCard"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/parents\/{parent_card_id}": {
            "get": {
                "tags": [
                    "Parent Cards"
                ],
                "summary": "Check if a card is a parent of a given card",
                "description": "Check if a card is a parent of a given card and get its position in the child's list of linked cards.",
                "operationId": "checkParentCard",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/LinkedCard"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Parent Cards"
                ],
                "summary": "Make a card a parent of a given card",
                "description": "Make a card a parent of a given card.",
                "operationId": "addParentCard",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Link data.",
                                "type": "object",
                                "properties": {
                                    "linked_card_position": {
                                        "description": "The position of the parent card within the child's list of linked cards.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "card_position": {
                                        "description": "The position of the child card within the parent's list of linked cards.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "exceeding_reason": {
                                        "description": "Exceeding reason data.",
                                        "type": "string",
                                        "nullable": true
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "The position of the parent card within the child's list of linked cards.",
                                            "type": "object",
                                            "properties": {
                                                "position": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "The change was made but you do not have the permission required to view the result."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Parent Cards"
                ],
                "summary": "Remove the link between a child card and a parent card",
                "description": "Remove the link between a child card and a parent card.",
                "operationId": "removeParentCard",
                "parameters": [
                    {
                        "name": "exceeding_reason",
                        "in": "query",
                        "description": "Exceeding reason.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The two cards are no longer a child and a parent."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "name": "parent_card_id",
                    "in": "path",
                    "description": "A parent card id.",
                    "required": true,
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            ]
        },
        "\/cards\/{card_id}\/parentGraph": {
            "get": {
                "tags": [
                    "Parent Cards"
                ],
                "summary": "Get a list of parent cards including their parent cards too",
                "description": "Get the full list of parent cards of a given card and the parent cards of those cards too.",
                "operationId": "getParentCardGraph",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of child cards.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/ParentChildLink"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/relatives": {
            "get": {
                "tags": [
                    "Relative Cards"
                ],
                "summary": "Get a list of related cards",
                "description": "Get a list of the cards related to a given card.",
                "operationId": "getRelatedCards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of related cards.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "card_id": {
                                                                "description": "Card id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/LinkedCard"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/relatives\/{related_card_id}": {
            "get": {
                "tags": [
                    "Relative Cards"
                ],
                "summary": "Check if a card is a relative of a given card",
                "description": "Check if a card is a relative of a given card and get its position in that card's list of linked cards.",
                "operationId": "checkRelatedCard",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/LinkedCard"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Relative Cards"
                ],
                "summary": "Make a card a relative of a given card",
                "description": "Make a card a relative of a given card.",
                "operationId": "addRelatedCard",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Link data.",
                                "type": "object",
                                "properties": {
                                    "linked_card_position": {
                                        "description": "The position of the related card within the card's list of linked cards.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "card_position": {
                                        "description": "The position of the card within the related card's list of linked cards.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "The position of the related card within the card's list of linked cards.",
                                            "type": "object",
                                            "properties": {
                                                "position": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "The change was made but you do not have the permission required to view the result."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Relative Cards"
                ],
                "summary": "Remove the link between a card and a related card",
                "description": "Remove the link between a card and a related card.",
                "operationId": "removeRelatedCard",
                "responses": {
                    "204": {
                        "description": "The two cards are no longer related."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "name": "related_card_id",
                    "in": "path",
                    "description": "A related card id.",
                    "required": true,
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            ]
        },
        "\/cards\/{card_id}\/predecessors": {
            "get": {
                "tags": [
                    "Predecessor Cards"
                ],
                "summary": "Get a list of predecessor cards",
                "description": "Get a list of the predecessor cards of a given card.",
                "operationId": "getPredecessorCards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of predecessor cards.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "card_id": {
                                                                "description": "Card id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/LinkedCard"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/predecessors\/{predecessor_card_id}": {
            "get": {
                "tags": [
                    "Predecessor Cards"
                ],
                "summary": "Check if a card is a predecessor of a given card",
                "description": "Check if a card is a predecessor of a given card and get its position in the successor's list of linked cards.",
                "operationId": "checkPredecessorCard",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/LinkedCard"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Predecessor Cards"
                ],
                "summary": "Make a card a predecessor of a given card",
                "description": "Make a card a predecessor of a given card.",
                "operationId": "addPredecessorCard",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Link data.",
                                "type": "object",
                                "properties": {
                                    "linked_card_position": {
                                        "description": "The position of the predecessor card within the successor's list of linked cards.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "card_position": {
                                        "description": "The position of the successor card within the predecessor's list of linked cards.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "The position of the predecessor card within the successor's list of linked cards.",
                                            "type": "object",
                                            "properties": {
                                                "position": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "The change was made but you do not have the permission required to view the result."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Predecessor Cards"
                ],
                "summary": "Remove the link between a successor card and a predecessor card",
                "description": "Remove the link between a successor card and a predecessor card.",
                "operationId": "removePredecessorCard",
                "responses": {
                    "204": {
                        "description": "The two cards are no longer a successor and a predecessor."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "name": "predecessor_card_id",
                    "in": "path",
                    "description": "A predecessor card id.",
                    "required": true,
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            ]
        },
        "\/cards\/{card_id}\/predecessorGraph": {
            "get": {
                "tags": [
                    "Predecessor Cards"
                ],
                "summary": "Get a list of predecessor cards including their predecessor cards too",
                "description": "Get the full list of predecessor cards of a given card and the predecessor cards of those cards too.",
                "operationId": "getPredecessorCardGraph",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of child cards.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/PredecessorSuccessorLink"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/successors": {
            "get": {
                "tags": [
                    "Successor Cards"
                ],
                "summary": "Get a list of successor cards",
                "description": "Get a list of the successor cards of a given card.",
                "operationId": "getSuccessorCards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of successor cards.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "card_id": {
                                                                "description": "Card id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/LinkedCard"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/cards\/{card_id}\/successors\/{successor_card_id}": {
            "get": {
                "tags": [
                    "Successor Cards"
                ],
                "summary": "Check if a card is a successor of a given card",
                "description": "Check if a card is a successor of a given card and get its position in the predecessor's list of linked cards.",
                "operationId": "checkSuccessorCard",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/LinkedCard"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Successor Cards"
                ],
                "summary": "Make a card a successor of a given card",
                "description": "Make a card a successor of a given card.",
                "operationId": "addSuccessorCard",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Link data.",
                                "type": "object",
                                "properties": {
                                    "linked_card_position": {
                                        "description": "The position of the successor card within the predecessor's list of linked cards.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "card_position": {
                                        "description": "The position of the predecessor card within the successor's list of linked cards.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "The position of the successor card within the predecessor's list of linked cards.",
                                            "type": "object",
                                            "properties": {
                                                "position": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "The change was made but you do not have the permission required to view the result."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Successor Cards"
                ],
                "summary": "Remove the link between a predecessor card and a successor card",
                "description": "Remove the link between a predecessor card and a successor card.",
                "operationId": "removeSuccessorCard",
                "responses": {
                    "204": {
                        "description": "The two cards are no longer a predecessor and a successor."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                },
                {
                    "name": "successor_card_id",
                    "in": "path",
                    "description": "A successor card id.",
                    "required": true,
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            ]
        },
        "\/cards\/{card_id}\/successorGraph": {
            "get": {
                "tags": [
                    "Successor Cards"
                ],
                "summary": "Get a list of successor cards including their successor cards too",
                "description": "Get the full list of successor cards of a given card and the successor cards of those cards too.",
                "operationId": "getSuccessorCardGraph",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of child cards.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/PredecessorSuccessorLink"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/cardIdInPath"
                }
            ]
        },
        "\/archivedCardVersions": {
            "get": {
                "tags": [
                    "Archived Card Versions"
                ],
                "summary": "Get a list of archived card versions",
                "description": "Get a list of archived card versions.",
                "operationId": "getArchivedCardVersions",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of archived card versions.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/ArchiveCardVersion"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Archived Card Versions"
                ],
                "summary": "Create a archived card version",
                "description": "Create a new archived card version.",
                "operationId": "createArchiveCardVersion",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Archived card version data.",
                                "required": [
                                    "name"
                                ],
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "The name of the new version.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 250
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/ArchiveCardVersion"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/archivedCardVersions\/{version_id}": {
            "get": {
                "tags": [
                    "Archived Card Versions"
                ],
                "summary": "Get the details of a single archived card version",
                "description": "Get the details of a single archived card version.",
                "operationId": "getArchiveCardVersion",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/ArchiveCardVersion"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Archived Card Versions"
                ],
                "summary": "Update a archived card version",
                "description": "Update a archived card version.",
                "operationId": "updateArchiveCardVersion",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Archived card version data.",
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "The name of the version.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 250
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/ArchiveCardVersion"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Archived Card Versions"
                ],
                "summary": "Delete a archived card version",
                "description": "Delete a archived card version.",
                "operationId": "deleteArchiveCardVersion",
                "responses": {
                    "204": {
                        "description": "The archived card version has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/versionIdInPath"
                }
            ]
        },
        "\/loggedTime": {
            "get": {
                "tags": [
                    "Logged Time"
                ],
                "summary": "Get a list of logged times",
                "description": "Get a list of the logged times added to card or cards. The logged times are listed in the order in which they were added.",
                "operationId": "getLoggedTimes",
                "parameters": [
                    {
                        "name": "card_ids",
                        "in": "query",
                        "description": "Filter logged time by cards ids or id.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "Filter logged time by user ids or id.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "include_logged_time_for_subtasks",
                        "in": "query",
                        "description": "When set to 1 you will the get logged time for all tasks and subtasks.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "logged_from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "logged_to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "logged_from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "logged_to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 200 and the maximum is 1000.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "pagination": {
                                            "type": "object",
                                            "properties": {
                                                "all_pages": {
                                                    "description": "The number of pages the result is split into.",
                                                    "type": "integer"
                                                },
                                                "current_page": {
                                                    "description": "The current page.",
                                                    "type": "integer"
                                                },
                                                "results_per_page": {
                                                    "description": "The number of results per page.",
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "data": {
                                            "description": "A list of card logged times.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/LoggedTime"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "409": {
                        "$ref": "#\/components\/responses\/ResponseConflict"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Logged Time"
                ],
                "summary": "Add a logged time to a card",
                "description": "Add a logged time to a card",
                "operationId": "addCardLoggedTime",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Card logged time data.",
                                "required": [
                                    "card_id",
                                    "time"
                                ],
                                "type": "object",
                                "properties": {
                                    "card_id": {
                                        "description": "The id of the card for which the time is logged.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "subtask_id": {
                                        "description": "If the logged time is for a subtask, the id of the subtask for which the time is logged. If the logged time is for a card, this field can be skipped or a null value can be sent.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "lane_id": {
                                        "description": "The id of the lane in which we want the logged time to appear.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "column_id": {
                                        "description": "The id of the column in which we want the logged time to appear.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "user_id": {
                                        "description": "The id of the user for whom the time is logged.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "date": {
                                        "description": "The date for which the time is logged.",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "time": {
                                        "description": "The amount of time to log in seconds.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "comment": {
                                        "description": "An optional comment.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/LoggedTime"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/loggedTime\/{logged_time_id}": {
            "get": {
                "tags": [
                    "Logged Time"
                ],
                "summary": "Get the details of a single logged time",
                "description": "Get the details of a single logged time.",
                "operationId": "getLoggedTime",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/LoggedTime"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Logged Time"
                ],
                "summary": "Update card logged time.",
                "description": "Update card logged time.",
                "operationId": "updateLoggedTime",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Card logged time data.",
                                "type": "object",
                                "properties": {
                                    "card_id": {
                                        "description": "The id of the card for which the time is logged.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "subtask_id": {
                                        "description": "If the logged time is for a subtask, the id of the subtask for which the time is logged. If the logged time is for a card, this field can be skipped or a null value can be sent.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "lane_id": {
                                        "description": "The id of the lane in which we want the logged time to appear.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "column_id": {
                                        "description": "The id of the column in which we want the logged time to appear.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "user_id": {
                                        "description": "The id of the user for whom the time is logged.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "date": {
                                        "description": "The date for which the time is logged.",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "time": {
                                        "description": "The amount of time to log in seconds.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "comment": {
                                        "description": "An optional comment.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The logged time is updated."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Logged Time"
                ],
                "summary": "Remove a logged time from a card",
                "description": "Remove a logged time from a card.",
                "operationId": "removeLoggedTime",
                "responses": {
                    "204": {
                        "description": "The logged time is now removed."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/loggedTimeIdInPath"
                }
            ]
        },
        "\/loggedTime\/history": {
            "get": {
                "tags": [
                    "Logged Time History"
                ],
                "summary": "Get a list of logged times creation, deletion, update events",
                "description": "Get a list of logged times creation, deletion, update events matching some optional criteria.",
                "operationId": "getLoggedTimeHistory",
                "parameters": [
                    {
                        "name": "logged_time_ids",
                        "in": "query",
                        "description": "A list of the logged time ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "card_ids",
                        "in": "query",
                        "description": "A list of card ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the logged time.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "logged_time_created",
                                    "logged_time_updated",
                                    "logged_time_deleted",
                                    "logged_time_transferred_to_card_after_subtask_deleted",
                                    "logged_time_updated_after_subtask_converted_to_card"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "pagination": {
                                            "type": "object",
                                            "properties": {
                                                "all_pages": {
                                                    "description": "The number of pages the result is split into.",
                                                    "type": "integer"
                                                },
                                                "current_page": {
                                                    "description": "The current page.",
                                                    "type": "integer"
                                                },
                                                "results_per_page": {
                                                    "description": "The number of results per page.",
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "data": {
                                            "description": "A list of logged times creation, deletion, update events.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/LoggedTimeHistoryEvent"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/webhooks": {
            "get": {
                "tags": [
                    "Webhooks"
                ],
                "summary": "Get all webhooks",
                "description": "Get a list of the currently defined webhooks optionally filtered by board id.",
                "operationId": "getWebhooks",
                "parameters": [
                    {
                        "name": "board_ids",
                        "in": "query",
                        "description": "A list of the board ids for which you want to get the webhooks.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of webhooks.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "webhook_id": {
                                                                "description": "Webhook id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/Webhook"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "post": {
                "tags": [
                    "Webhooks"
                ],
                "summary": "Create a webhook",
                "description": "Create a new webhook.",
                "operationId": "createWebhook",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Webhook data.",
                                "required": [
                                    "url"
                                ],
                                "type": "object",
                                "properties": {
                                    "url": {
                                        "description": "The url of the new webhook.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 250
                                    },
                                    "is_enabled": {
                                        "description": "Controls whether the webhook is enabled or not.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ],
                                        "default": 1
                                    },
                                    "board_id": {
                                        "description": "An id of a board for the events of which the webhook will be invoked. If not set, the webhook will be invoked for the events of all boards.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "allOf": [
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "webhook_id": {
                                                            "description": "Webhook id.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        }
                                                    }
                                                },
                                                {
                                                    "$ref": "#\/components\/schemas\/Webhook"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/webhooks\/{webhook_id}": {
            "get": {
                "tags": [
                    "Webhooks"
                ],
                "summary": "Get the details of a single webhook",
                "description": "Get the details of a single webhook.",
                "operationId": "getWebhook",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Webhook"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Webhooks"
                ],
                "summary": "Update a webhook",
                "description": "Update a webhook.",
                "operationId": "updateWebhook",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Webhook data.",
                                "type": "object",
                                "properties": {
                                    "url": {
                                        "description": "The url of the webhook.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 250
                                    },
                                    "is_enabled": {
                                        "description": "Controls whether the webhook is enabled or not.",
                                        "format": "int32",
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ]
                                    },
                                    "board_id": {
                                        "description": "An id of a board for the events of which the webhook will be invoked. If set to null the webhook will be invoked for the events of all boards.",
                                        "format": "int32",
                                        "type": "integer",
                                        "nullable": true
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Webhook"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Webhooks"
                ],
                "summary": "Delete a webhook",
                "description": "Delete a webhook.",
                "operationId": "deleteWebhook",
                "responses": {
                    "204": {
                        "description": "The webhook has been deleted."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/webhookIdInPath"
                }
            ]
        },
        "\/webhooks\/history": {
            "get": {
                "tags": [
                    "Webhook History"
                ],
                "summary": "Get a list of webhooks creation, deletion, update events",
                "description": "Get a list of webhooks creation, deletion, update events matching some optional criteria.",
                "operationId": "getWebhooksHistory",
                "parameters": [
                    {
                        "name": "webhook_ids",
                        "in": "query",
                        "description": "A list of the webhook ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the webhook.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "created",
                                    "updated",
                                    "deleted"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "pagination": {
                                            "type": "object",
                                            "properties": {
                                                "all_pages": {
                                                    "description": "The number of pages the result is split into.",
                                                    "type": "integer"
                                                },
                                                "current_page": {
                                                    "description": "The current page.",
                                                    "type": "integer"
                                                },
                                                "results_per_page": {
                                                    "description": "The number of results per page.",
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "data": {
                                            "description": "A list of webhooks creation, deletion, update events.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/WebhookHistoryEvent"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/checkSPFRecord": {
            "post": {
                "tags": [
                    "Check SPF Record"
                ],
                "summary": "Check if the SPF record of a domain includes mail.kanbanize.com",
                "description": "Check if a domain has a valid SPF record including mail.kanbanize.com.",
                "operationId": "checkSPFRecord",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "Domain data.",
                                "required": [
                                    "domain"
                                ],
                                "type": "object",
                                "properties": {
                                    "domain": {
                                        "description": "The domain name to be checked.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/myFavoriteBoards": {
            "get": {
                "tags": [
                    "My Favorite Boards"
                ],
                "summary": "Get a list of your favorite boards",
                "description": "Get a list of your favorite boards.",
                "operationId": "getFavoriteBoards",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of boards.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "board_id": {
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/myFavoriteBoards\/{board_id}": {
            "get": {
                "tags": [
                    "My Favorite Boards"
                ],
                "summary": "Check if a board is one of your favorite",
                "description": "Check if a board is one of your favorite boards.",
                "operationId": "checkFavoriteBoard",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "The position of the board within the list of your favorite boards",
                                            "type": "object",
                                            "properties": {
                                                "position": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "My Favorite Boards"
                ],
                "summary": "Add a board to your favorite",
                "description": "Add a board to the list of your favorite boards or change its position within the list.",
                "operationId": "addFavoriteBoard",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "The position of the board within the list of your favorite boards.",
                                "required": [
                                    "position"
                                ],
                                "type": "object",
                                "properties": {
                                    "position": {
                                        "description": "The position of the board within the list of your favorite boards.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "The position of the board within the list of your favorite boards.",
                                            "type": "object",
                                            "properties": {
                                                "position": {
                                                    "format": "int32",
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "My Favorite Boards"
                ],
                "summary": "Remove a board from your favorite",
                "description": "Remove a board from the list of your favorite boards.",
                "operationId": "removeFavoriteBoard",
                "responses": {
                    "204": {
                        "description": "The board is no longer in the list of your favorite boards."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/boardIdInPath"
                }
            ]
        },
        "\/mySettings": {
            "get": {
                "tags": [
                    "My App Settings"
                ],
                "summary": "Get a list of all app settings and the values you have selected",
                "description": "Get a list of all app settings and the values you have selected.",
                "operationId": "getMyAppSettings",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of settings.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/Setting"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/mySettings\/{setting_name}": {
            "get": {
                "tags": [
                    "My App Settings"
                ],
                "summary": "Get the details of an app setting and the value you have set for it",
                "description": "Get the details of an app setting and the value you have set for it.",
                "operationId": "getMyAppSetting",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Setting"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "My App Settings"
                ],
                "summary": "Set the value of an app setting",
                "description": "Set the value of an app setting.",
                "operationId": "setMyAppSetting",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "The value of the setting.",
                                "required": [
                                    "value"
                                ],
                                "type": "object",
                                "properties": {
                                    "value": {
                                        "description": "The value of the setting.",
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The value has been set."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "My App Settings"
                ],
                "summary": "Remove the value of an app setting",
                "description": "Remove the value of an app setting.",
                "operationId": "removeMyAppSetting",
                "responses": {
                    "204": {
                        "description": "The value has been removed."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/settingName"
                }
            ]
        },
        "\/companySettings": {
            "get": {
                "tags": [
                    "Company Settings"
                ],
                "summary": "Get a list of all company settings and their values",
                "description": "Get a list of all company settings and their values.",
                "operationId": "getCompanySettings",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of settings.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/Setting"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/companySettings\/{setting_name}": {
            "get": {
                "tags": [
                    "Company Settings"
                ],
                "summary": "Get the details of a company setting and its value",
                "description": "Get the details of a company setting and its value.",
                "operationId": "getCompanySetting",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Setting"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Company Settings"
                ],
                "summary": "Set the value of a company setting",
                "description": "Set the value of a company setting.",
                "operationId": "setCompanySetting",
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "description": "The value of the setting.",
                                "required": [
                                    "value"
                                ],
                                "type": "object",
                                "properties": {
                                    "value": {
                                        "description": "The value of the setting.",
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The value has been set."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Company Settings"
                ],
                "summary": "Remove the value of a company setting",
                "description": "Remove the value of a company setting.",
                "operationId": "removeCompanySetting",
                "responses": {
                    "204": {
                        "description": "The value has been removed."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/settingName"
                }
            ]
        },
        "\/plans": {
            "get": {
                "tags": [
                    "Company Plans"
                ],
                "summary": "Get a list of all possible plan statuses",
                "description": "Get a list of all possible plan statuses",
                "operationId": "getPlans",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of plans.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CompanyPlan"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/plans\/trials": {
            "get": {
                "tags": [
                    "Company Plan Trials"
                ],
                "summary": "Get a list of all possible plan trial statuses",
                "description": "Get a list of all possible plan trial statuses",
                "operationId": "getPlansTrials",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of plans.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "plan_id": {
                                                                "description": "Plan id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CompanyPlanTrial"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/plans\/trials\/{plan_id}": {
            "get": {
                "tags": [
                    "Company Plan Trials"
                ],
                "summary": "Get a possible plan trial status",
                "description": "Get a possible plan trial status",
                "operationId": "getPlanTrial",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CompanyPlanTrial"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Company Plan Trials"
                ],
                "summary": "Start a plan trial",
                "description": "Start a plan trial",
                "operationId": "putPlanTrial",
                "responses": {
                    "204": {
                        "description": "Plan trial is started."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/planIdInPath"
                }
            ]
        },
        "\/addons": {
            "get": {
                "tags": [
                    "Company Addons"
                ],
                "summary": "Get a list of all possible addons",
                "description": "Get a list of all possible addon",
                "operationId": "getAddons",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of features.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/CompanyAddon"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/addons\/trials": {
            "get": {
                "tags": [
                    "Company Addon Trials"
                ],
                "summary": "Get a list of all possible addon trial statuses",
                "description": "Get a list of all possible addon trial statuses",
                "operationId": "getAddonsTrials",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "A list of features.",
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "feature_id": {
                                                                "description": "Feature id.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "$ref": "#\/components\/schemas\/CompanyAddonTrial"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/addons\/trials\/{feature_id}": {
            "get": {
                "tags": [
                    "Company Addon Trials"
                ],
                "summary": "Get a possible addon trial status",
                "description": "Get a possible addon trial status",
                "operationId": "getAddonTrial",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/CompanyAddonTrial"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "put": {
                "tags": [
                    "Company Addon Trials"
                ],
                "summary": "Start an addon trial",
                "description": "Start an addon trial",
                "operationId": "putAddonTrial",
                "responses": {
                    "204": {
                        "description": "Addon trial is started."
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ResponseNotFound"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#\/components\/parameters\/featureIdInPath"
                }
            ]
        },
        "\/businessRules\/executionHistory": {
            "get": {
                "tags": [
                    "Business Rule Execution History"
                ],
                "summary": "Get a list of business rule executions",
                "description": "Get a list of business rule executions matching some optional criteria.",
                "operationId": "getBusinessRulesExecutionHistory",
                "parameters": [
                    {
                        "name": "business_rule_ids",
                        "in": "query",
                        "description": "A list of the business_rule_ids that you want to get the executions for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "executed_on_card_ids",
                        "in": "query",
                        "description": "A list of the card ids on which the business rules were executed on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "pagination": {
                                            "type": "object",
                                            "properties": {
                                                "all_pages": {
                                                    "description": "The number of pages the result is split into.",
                                                    "type": "integer"
                                                },
                                                "current_page": {
                                                    "description": "The current page.",
                                                    "type": "integer"
                                                },
                                                "results_per_page": {
                                                    "description": "The number of results per page.",
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "data": {
                                            "description": "A list of business rule execution history events.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/BusinessRulesExecutionHistoryEvent"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/emailIntegration\/errors": {
            "get": {
                "tags": [
                    "Email Integration Errors"
                ],
                "summary": "Get a list of errors from the email integration.",
                "description": "Get a list of errors which occurred while emails were being processed",
                "operationId": "getEmailIntegrationErrors",
                "parameters": [
                    {
                        "name": "sender",
                        "in": "query",
                        "description": "The email address of the sender.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "receiver",
                        "in": "query",
                        "description": "The email address of a recipent.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "pagination": {
                                            "type": "object",
                                            "properties": {
                                                "all_pages": {
                                                    "description": "The number of pages the result is split into.",
                                                    "type": "integer"
                                                },
                                                "current_page": {
                                                    "description": "The current page.",
                                                    "type": "integer"
                                                },
                                                "results_per_page": {
                                                    "description": "The number of results per page.",
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "data": {
                                            "description": "A list of errors from the email integration.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/EmailIntegrationError"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/emailIntegration\/history": {
            "get": {
                "tags": [
                    "Email Integration History"
                ],
                "summary": "Get a list of the emails received by the email integration and their status.",
                "description": "Get a list of the emails received by the email integration and their status.",
                "operationId": "getEmailIntegrationHistory",
                "parameters": [
                    {
                        "name": "sender",
                        "in": "query",
                        "description": "Sender of the email.",
                        "required": false,
                        "schema": {
                            "format": "email",
                            "type": "string"
                        }
                    },
                    {
                        "name": "receiver",
                        "in": "query",
                        "description": "Receiver of the email.",
                        "required": false,
                        "schema": {
                            "format": "email",
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status of the email.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "pagination": {
                                            "type": "object",
                                            "properties": {
                                                "all_pages": {
                                                    "description": "The number of pages the result is split into.",
                                                    "type": "integer"
                                                },
                                                "current_page": {
                                                    "description": "The current page.",
                                                    "type": "integer"
                                                },
                                                "results_per_page": {
                                                    "description": "The number of results per page.",
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "data": {
                                            "description": "A list of emails received by the email integration and their status.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/EmailIntegrationHistoryEvent"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/apiRequestHistory": {
            "get": {
                "tags": [
                    "Api Request History"
                ],
                "summary": "Get a list of api requests",
                "description": "Get a list of api requests matching some optional criteria.",
                "operationId": "getApiRequestHistory",
                "parameters": [
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of the user_ids that you have execututed the following requests.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "methods",
                        "in": "query",
                        "description": "A list of the methods that you have used while executing the request.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "get",
                                    "put",
                                    "post",
                                    "patch",
                                    "delete"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "status_codes",
                        "in": "query",
                        "description": "A list of the status codes that you have received when executing the request.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    200,
                                    400,
                                    401,
                                    403,
                                    429,
                                    500,
                                    503
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "pagination": {
                                            "type": "object",
                                            "properties": {
                                                "all_pages": {
                                                    "description": "The number of pages the result is split into.",
                                                    "type": "integer"
                                                },
                                                "current_page": {
                                                    "description": "The current page.",
                                                    "type": "integer"
                                                },
                                                "results_per_page": {
                                                    "description": "The number of results per page.",
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "data": {
                                            "description": "A list of api requests.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/ApiRequestHistoryEvent"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/apiRequestHistory\/aggregated": {
            "get": {
                "tags": [
                    "Api Request History"
                ],
                "summary": "Get a list of api requests aggregated by user",
                "description": "Get a list of api requests aggregated by user matching some optional criteria.",
                "operationId": "getApiRequestHistoryAggregated",
                "parameters": [
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of the user_ids that you have execututed the following requests.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "aggregation_period",
                        "in": "query",
                        "description": "An option for choosing the aggregation period.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "day",
                                "hour"
                            ]
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results. If you send from_date but not to_date, to_date will automatically be set to 7 days after from_date. If no filters are provided, the from_date will be set to 7 days before the current date.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results. If you send to_date but not from_date, from_date will automatically be set to 7 days before to_date.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "An aggregated response by api`s history.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/ApiRequestHistoryAggregated"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/oldApiRequestHistory": {
            "get": {
                "tags": [
                    "Old Api Request History"
                ],
                "summary": "Get a list of api requests",
                "description": "Get a list of api requests matching some optional criteria.",
                "operationId": "getOldApiRequestHistory",
                "parameters": [
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of the user_ids that you have execututed the following requests.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "pagination": {
                                            "type": "object",
                                            "properties": {
                                                "all_pages": {
                                                    "description": "The number of pages the result is split into.",
                                                    "type": "integer"
                                                },
                                                "current_page": {
                                                    "description": "The current page.",
                                                    "type": "integer"
                                                },
                                                "results_per_page": {
                                                    "description": "The number of results per page.",
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "data": {
                                            "description": "A list of api requests.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/OldApiRequestHistoryEvent"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/oldApiRequestHistory\/aggregated": {
            "get": {
                "tags": [
                    "Old Api Request History"
                ],
                "summary": "Get a list of old api requests aggregated by user",
                "description": "Get a list of old api requests aggregated by user matching some optional criteria.",
                "operationId": "getOldApiRequestHistoryAggregated",
                "parameters": [
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of the user_ids that you have execututed the following requests.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "aggregation_period",
                        "in": "query",
                        "description": "An option regarding the aggregation period.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "day",
                                "hour"
                            ]
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results. If you send from_date but not to_date, to_date will automatically be set to 7 days after from_date. If no filters are provided, the from_date will be set to 7 days before the current date.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results. If you send to_date but not from_date, from_date will automatically be set to 7 days before to_date.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "An aggregated response by api`s history.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/OldApiRequestHistoryAggregated"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/apiLimits": {
            "get": {
                "tags": [
                    "Api Limits"
                ],
                "summary": "Get the hourly and minutely limits for the api requests",
                "description": "Get a list of the api request limits.",
                "operationId": "getApiLimits",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "An hourly or minutely limit.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/ApiLimit"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/oldApiLimits": {
            "get": {
                "tags": [
                    "Old Api Limits"
                ],
                "summary": "Get the hourly limits for the old api requests",
                "description": "Get a list of the old api request limits.",
                "operationId": "getOldApiLimits",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "description": "An hourly old api limit.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/OldApiLimit"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/exports\/workspaces\/history": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "summary": "Export a list of workspaces management history events.",
                "description": "Export a list of workspaces management history events.",
                "operationId": "getWorkspacesHistoryExports",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The allowed values are excel and json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "json"
                        },
                        "explode": false
                    },
                    {
                        "name": "workspaces_ids",
                        "in": "query",
                        "description": "A list of the workspaces ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the tag.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "workspace_created",
                                    "workspace_updated",
                                    "workspace_archived",
                                    "workspace_unarchived",
                                    "board_created",
                                    "board_renamed",
                                    "board_deleted",
                                    "board_archived",
                                    "board_unarchived",
                                    "board_moved_out",
                                    "board_moved_in",
                                    "wm_added",
                                    "wm_removed",
                                    "added_to_dashboard_page",
                                    "removed_from_dashboard_page"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An .xlsx file.",
                        "content": {
                            "application\/xlsx'": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/JsonExport"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/exports\/boards\/history": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "summary": "Export a list of boards management history events.",
                "description": "Export a list of boards management history events.",
                "operationId": "getBoardsHistoryExports",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The allowed values are excel and json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "json"
                        },
                        "explode": false
                    },
                    {
                        "name": "board_ids",
                        "in": "query",
                        "description": "A list of the board ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the tag.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "board_created",
                                    "board_updated",
                                    "board_archived",
                                    "board_unarchived",
                                    "board_moved",
                                    "workflow_created",
                                    "workflow_updated",
                                    "workflow_deleted",
                                    "workflow_disabled",
                                    "workflow_enabled",
                                    "lane_created",
                                    "lane_renamed",
                                    "lane_deleted",
                                    "lane_moved",
                                    "column_created",
                                    "column_renamed",
                                    "column_deleted",
                                    "column_moved",
                                    "cell_limits_updated",
                                    "lane_section_limits_updated",
                                    "merged_areas_updated",
                                    "related_boards_updated",
                                    "user_assigned",
                                    "user_unassigned",
                                    "user_role_changed",
                                    "discard_reason_added",
                                    "discard_reason_removed",
                                    "block_reason_added",
                                    "block_reason_removed",
                                    "sticker_added",
                                    "sticker_removed",
                                    "card_type_added",
                                    "card_type_removed",
                                    "tag_added",
                                    "tag_removed",
                                    "card_template_added",
                                    "card_template_removed",
                                    "custom_field_added",
                                    "custom_field_removed",
                                    "team_added",
                                    "team_role_changed",
                                    "team_removed",
                                    "cell_card_orderings_updated"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An .xlsx file.",
                        "content": {
                            "application\/xlsx'": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/JsonExport"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/exports\/users\/history": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "summary": "Export a list of user management history events.",
                "description": "Export a list of user management history events.",
                "operationId": "getUsersHistoryExport",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The allowed values are excel and json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "json"
                        },
                        "explode": false
                    },
                    {
                        "name": "affected_user_ids",
                        "in": "query",
                        "description": "A list of the user ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the user.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "user_confirmed",
                                    "user_deleted",
                                    "email_changed",
                                    "username_changed",
                                    "realname_changed",
                                    "avatar_changed",
                                    "tfa_changed",
                                    "tfa_enabled",
                                    "tfa_disabled",
                                    "tfa_key_changed",
                                    "tfa_key_reset",
                                    "api_key_changed",
                                    "timezone_changed",
                                    "language_changed",
                                    "password_changed",
                                    "user_disabled",
                                    "user_enabled",
                                    "wip_limits_changed",
                                    "global_privilege_added",
                                    "global_privilege_removed",
                                    "made_wm",
                                    "made_non_wm",
                                    "assigned_to_board",
                                    "unassigned_from_board",
                                    "board_role_changed",
                                    "invitation_sent",
                                    "invitation_code_changed"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An .xlsx file.",
                        "content": {
                            "application\/xlsx'": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/JsonExport"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/exports\/businessRules\/executionHistory": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "summary": "Export a list of business rule executions",
                "description": "Export a list of business rule executions matching some optional criteria.",
                "operationId": "getBusinessRulesExecutionHistoryExport",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The allowed values are excel and json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "json"
                        },
                        "explode": false
                    },
                    {
                        "name": "business_rule_ids",
                        "in": "query",
                        "description": "A list of the business_rule_ids that you want to get the executions for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "executed_on_card_ids",
                        "in": "query",
                        "description": "A list of the card ids on which the business rules were executed on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An .xlsx file.",
                        "content": {
                            "application\/xlsx'": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/JsonExport"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/exports\/emailIntegration\/history": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "summary": "Export a list of the emails received by the email integration and their status.",
                "description": "Export a list of the emails received by the email integration and their status.",
                "operationId": "getEmailIntegrationHistoryExport",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The allowed values are excel and json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "json"
                        },
                        "explode": false
                    },
                    {
                        "name": "sender",
                        "in": "query",
                        "description": "Sender of the email.",
                        "required": false,
                        "schema": {
                            "format": "email",
                            "type": "string"
                        }
                    },
                    {
                        "name": "receiver",
                        "in": "query",
                        "description": "Receiver of the email.",
                        "required": false,
                        "schema": {
                            "format": "email",
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status of the email.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An .xlsx file.",
                        "content": {
                            "application\/xlsx'": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/JsonExport"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/exports\/emailIntegration\/errors": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "summary": "Export a list of error logs from the email integration.",
                "description": "Export a list of error logs from the email integration.",
                "operationId": "getEmailIntegrationErrorsExport",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The allowed values are excel and json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "json"
                        },
                        "explode": false
                    },
                    {
                        "name": "sender",
                        "in": "query",
                        "description": "The email address of the sender.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "receiver",
                        "in": "query",
                        "description": "The email address of a recipent.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An .xlsx file.",
                        "content": {
                            "application\/xlsx'": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/JsonExport"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/exports\/webhooks\/history": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "summary": "Export a list of webhooks creation, deletion, update events",
                "description": "Export a list of webhooks creation, deletion, update events matching some optional criteria.",
                "operationId": "getWebhooksHistoryExport",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The allowed values are excel and json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "json"
                        },
                        "explode": false
                    },
                    {
                        "name": "webhook_ids",
                        "in": "query",
                        "description": "A list of the webhook ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the webhook.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "created",
                                    "updated",
                                    "deleted"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An .xlsx file.",
                        "content": {
                            "application\/xlsx'": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/JsonExport"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/exports\/oldApiRequestHistory": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "summary": "Export a list of api v1 requests",
                "description": "Export a list of api requests matching some optional criteria.",
                "operationId": "getOldApiRequestHistoryExport",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The allowed values are excel and json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "json"
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of the user_ids that you have execututed the following requests.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An .xlsx file.",
                        "content": {
                            "application\/xlsx'": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/JsonExport"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/exports\/apiRequestHistory": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "summary": "Export a list of api v2 requests",
                "description": "Export a list of api requests matching some optional criteria.",
                "operationId": "getApiRequestHistoryExports",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The allowed values are excel and json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "json"
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of the user_ids that you have execututed the following requests.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "methods",
                        "in": "query",
                        "description": "A list of the methods that you have used while executing the request.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "get",
                                    "put",
                                    "post",
                                    "patch",
                                    "delete"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "status_codes",
                        "in": "query",
                        "description": "A list of the status codes that you have received when executing the request.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    200,
                                    400,
                                    401,
                                    403,
                                    429,
                                    500,
                                    503
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An .xlsx file.",
                        "content": {
                            "application\/xlsx'": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/JsonExport"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/exports\/users\/lastActivity": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "summary": "Export a list of users last activity.",
                "description": "Export a list of users last activity.",
                "operationId": "getUsersLastActivityExport",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The allowed values are excel and json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "json"
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "is_enabled",
                        "in": "query",
                        "description": "When set to 1 you will only get enabled users. When set to 0 you will only get disabled users.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "is_confirmed",
                        "in": "query",
                        "description": "When set to 1 you will only get users who have confirmed their invitation. When set to 0 you will only get users who have not confirmed their invitation.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    },
                    {
                        "name": "if_assigned_where_i_am",
                        "in": "query",
                        "description": "When set to 1 you will only get users which are assigned to the boards you are assigned to.",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An .xlsx file.",
                        "content": {
                            "application\/xlsx'": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/JsonExport"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/exports\/customFields\/history": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "summary": "Export a list of custom field management history events.",
                "description": "Export a list of custom field management history events.",
                "operationId": "getCustomFieldHistoryExports",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The allowed values are excel and json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "json"
                        },
                        "explode": false
                    },
                    {
                        "name": "field_ids",
                        "in": "query",
                        "description": "A list of ids of the custom fields that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the custom field.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "custom_field_created",
                                    "custom_field_updated",
                                    "custom_field_deleted",
                                    "custom_field_shared",
                                    "custom_field_unshared",
                                    "custom_field_added_to_board",
                                    "custom_field_removed_from_board",
                                    "custom_field_board_properties_updated"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An .xlsx file.",
                        "content": {
                            "application\/xlsx'": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/JsonExport"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/exports\/stickers\/history": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "summary": "Export a list of stickers management history events.",
                "description": "Export a list of stickers management history events.",
                "operationId": "getStickersHistoryExports",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The allowed values are excel and json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "json"
                        },
                        "explode": false
                    },
                    {
                        "name": "sticker_ids",
                        "in": "query",
                        "description": "A list of the sticker ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the sticker.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "sticker_created",
                                    "sticker_updated",
                                    "sticker_disabled",
                                    "sticker_enabled",
                                    "sticker_deleted",
                                    "sticker_added_to_board",
                                    "sticker_removed_from_board"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An .xlsx file.",
                        "content": {
                            "application\/xlsx'": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/JsonExport"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/exports\/tags\/history": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "summary": "Export a list of tags management history events.",
                "description": "Export a list of tags management history events.",
                "operationId": "getTagsHistoryExports",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The allowed values are excel and json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "json"
                        },
                        "explode": false
                    },
                    {
                        "name": "tag_ids",
                        "in": "query",
                        "description": "A list of the tag ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the tag.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "tag_created",
                                    "tag_updated",
                                    "tag_disabled",
                                    "tag_enabled",
                                    "tag_deleted",
                                    "tag_added_to_board",
                                    "tag_removed_from_board"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An .xlsx file.",
                        "content": {
                            "application\/xlsx'": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/JsonExport"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/exports\/teams\/history": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "summary": "Export a list of teams management history events.",
                "description": "Export a list of teams management history events.",
                "operationId": "getTeamsHistoryExports",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The allowed values are excel and json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "json"
                        },
                        "explode": false
                    },
                    {
                        "name": "team_ids",
                        "in": "query",
                        "description": "A list of the team ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the team.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "team_created",
                                    "team_updated",
                                    "team_deleted",
                                    "team_added_to_board",
                                    "team_change_role_for_board",
                                    "team_removed_from_board",
                                    "user_added_to_team",
                                    "user_removed_from_team",
                                    "user_added_to_team_managers",
                                    "user_removed_from_team_managers"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An .xlsx file.",
                        "content": {
                            "application\/xlsx'": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/JsonExport"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/exports\/loggedTime\/history": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "summary": "Export a list of logged times management history events.",
                "description": "Export a list of logged times management history events.",
                "operationId": "getLoggedTimesHistoryExports",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The allowed values are excel and json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "json"
                        },
                        "explode": false
                    },
                    {
                        "name": "logged_time_ids",
                        "in": "query",
                        "description": "A list of the logged time ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "card_ids",
                        "in": "query",
                        "description": "A list of card ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the logged time.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "logged_time_created",
                                    "logged_time_updated",
                                    "logged_time_deleted",
                                    "logged_time_transferred_to_card_after_subtask_deleted",
                                    "logged_time_updated_after_subtask_converted_to_card"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An .xlsx file.",
                        "content": {
                            "application\/xlsx'": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/JsonExport"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/exports\/blockReasons\/history": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "summary": "Export a list of block reasons management history events.",
                "description": "Export a list of block reasons management history events.",
                "operationId": "getBlockReasonsHistoryExports",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The allowed values are excel and json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "json"
                        },
                        "explode": false
                    },
                    {
                        "name": "reason_ids",
                        "in": "query",
                        "description": "A list of the block reason ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the block reason.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "reason_created",
                                    "reason_updated",
                                    "reason_disabled",
                                    "reason_enabled",
                                    "reason_deleted",
                                    "reason_added_to_board",
                                    "reason_removed_from_board"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An .xlsx file.",
                        "content": {
                            "application\/xlsx'": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/JsonExport"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/exports\/discardReasons\/history": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "summary": "Export a list of discard reasons management history events.",
                "description": "Export a list of discard reasons management history events.",
                "operationId": "getDiscardReasonsHistoryExports",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The allowed values are excel and json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "json"
                        },
                        "explode": false
                    },
                    {
                        "name": "reason_ids",
                        "in": "query",
                        "description": "A list of the block reason ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the block reason.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "reason_created",
                                    "reason_updated",
                                    "reason_disabled",
                                    "reason_enabled",
                                    "reason_deleted",
                                    "reason_added_to_board",
                                    "reason_removed_from_board"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An .xlsx file.",
                        "content": {
                            "application\/xlsx'": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/JsonExport"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/exports\/cardTemplates\/history": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "summary": "Export a list of card templates management history events.",
                "description": "Export a list of card templates management history events.",
                "operationId": "getCardTemplatesHistoryExports",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The allowed values are excel and json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "json"
                        },
                        "explode": false
                    },
                    {
                        "name": "template_ids",
                        "in": "query",
                        "description": "A list of the card template ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the card type.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "template_created",
                                    "template_updated",
                                    "template_disabled",
                                    "template_enabled",
                                    "template_deleted",
                                    "template_added_to_board",
                                    "template_updated_for_board",
                                    "template_removed_from_board",
                                    "template_structure_updated"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An .xlsx file.",
                        "content": {
                            "application\/xlsx'": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/JsonExport"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        },
        "\/exports\/cardTypes\/history": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "summary": "Export a list of card types management history events.",
                "description": "Export a list of card types management history events.",
                "operationId": "getCardTypesHistoryExports",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The allowed values are excel and json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "json"
                        },
                        "explode": false
                    },
                    {
                        "name": "type_ids",
                        "in": "query",
                        "description": "A list of the card type ids that you want to get the history for.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "description": "A list of user ids that performed an action.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "event_types",
                        "in": "query",
                        "description": "Type of action executed on the card type.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "type_created",
                                    "type_updated",
                                    "type_disabled",
                                    "type_enabled",
                                    "type_deleted",
                                    "type_added_to_board",
                                    "type_updated_for_board",
                                    "type_removed_from_board"
                                ]
                            }
                        },
                        "explode": false
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The first date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The last date and time for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "The first date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "The last date for which you want results.",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The results will always be split into pages. This parameter controls which page is returned. By default it's the first page.",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Controls how many results are returned per page. The default value is 100 and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "format": "int",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An .xlsx file.",
                        "content": {
                            "application\/xlsx'": {
                                "schema": {
                                    "description": "A wrapper for a successful response.",
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/JsonExport"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/ResponseBadRequest"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ResponseUnauthorized"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/ResponseForbidden"
                    },
                    "429": {
                        "$ref": "#\/components\/responses\/ResponseTooManyRequests"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/ResponseInternalServerError"
                    },
                    "503": {
                        "$ref": "#\/components\/responses\/ResponseServiceUnavailable"
                    }
                }
            }
        }
    },
    "components": {
        "parameters": {
            "workspaceIdInPath": {
                "name": "workspace_id",
                "in": "path",
                "description": "A workspace id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "boardIdInPath": {
                "name": "board_id",
                "in": "path",
                "description": "A board id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "versionIdInPath": {
                "name": "version_id",
                "in": "path",
                "description": "A archived card version id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "dashboardPageIdInPath": {
                "name": "dashboard_page_id",
                "in": "path",
                "description": "A dashboard page id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "widgetIdInPath": {
                "name": "widget_id",
                "in": "path",
                "description": "A widget id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "revisionInPath": {
                "name": "revision",
                "in": "path",
                "description": "A revision number.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "laneIdInPath": {
                "name": "lane_id",
                "in": "path",
                "description": "A lane id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "columnIdInPath": {
                "name": "column_id",
                "in": "path",
                "description": "A column id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "areaIdInPath": {
                "name": "area_id",
                "in": "path",
                "description": "A area id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "userIdInPath": {
                "name": "user_id",
                "in": "path",
                "description": "A user id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "roleIdInPath": {
                "name": "role_id",
                "in": "path",
                "description": "A role id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "blockReasonIdInPath": {
                "name": "reason_id",
                "in": "path",
                "description": "A block reason id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "discardReasonIdInPath": {
                "name": "reason_id",
                "in": "path",
                "description": "A discard reason id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "stickerIdInPath": {
                "name": "sticker_id",
                "in": "path",
                "description": "A sticker id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "typeIdInPath": {
                "name": "type_id",
                "in": "path",
                "description": "A type id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "templateIdInPath": {
                "name": "template_id",
                "in": "path",
                "description": "A template id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "cardIdInPath": {
                "name": "card_id",
                "in": "path",
                "description": "A card id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "commentIdInPath": {
                "name": "comment_id",
                "in": "path",
                "description": "A comment id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "outcomeIdInPath": {
                "name": "outcome_id",
                "in": "path",
                "description": "An outcome id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "checkpointIdInPath": {
                "name": "checkpoint_id",
                "in": "path",
                "description": "A checkpoint id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "subtaskIdInPath": {
                "name": "subtask_id",
                "in": "path",
                "description": "A subtask id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "attachmentIdInPath": {
                "name": "attachment_id",
                "in": "path",
                "description": "A attachment id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "selectedCardIdInPath": {
                "name": "selected_card_id",
                "in": "path",
                "description": "A selected card id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "tagIdInPath": {
                "name": "tag_id",
                "in": "path",
                "description": "A tag id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "loggedTimeIdInPath": {
                "name": "logged_time_id",
                "in": "path",
                "description": "A logged time id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "fieldIdInPath": {
                "name": "field_id",
                "in": "path",
                "description": "A custom field id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "valueIdInPath": {
                "name": "value_id",
                "in": "path",
                "description": "A value id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "webhookIdInPath": {
                "name": "webhook_id",
                "in": "path",
                "description": "A webhook id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "fieldName": {
                "name": "field_name",
                "in": "path",
                "description": "A field name.",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "settingName": {
                "name": "setting_name",
                "in": "path",
                "description": "A setting name.",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "permissionName": {
                "name": "permission_name",
                "in": "path",
                "description": "A permission name.",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "privilegeName": {
                "name": "privilege_name",
                "in": "path",
                "description": "A privilege name.",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "featureIdInPath": {
                "name": "feature_id",
                "in": "path",
                "description": "A feature id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "planIdInPath": {
                "name": "plan_id",
                "in": "path",
                "description": "A plan id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "workflowIdInPath": {
                "name": "workflow_id",
                "in": "path",
                "description": "A workflow id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "teamIdInPath": {
                "name": "team_id",
                "in": "path",
                "description": "A team id.",
                "required": true,
                "schema": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "responses": {
            "ResponseBadRequest": {
                "description": "The request failed due to a client error.",
                "content": {
                    "application\/json": {
                        "schema": {
                            "$ref": "#\/components\/schemas\/ErrorResponse"
                        }
                    }
                }
            },
            "ResponseUnauthorized": {
                "description": "You are not authorized to access the API.",
                "content": {
                    "application\/json": {
                        "schema": {
                            "$ref": "#\/components\/schemas\/ErrorResponse"
                        }
                    }
                }
            },
            "ResponseForbidden": {
                "description": "You do not have the permissions required to access this resource or to perform this action.",
                "content": {
                    "application\/json": {
                        "schema": {
                            "$ref": "#\/components\/schemas\/ErrorResponse"
                        }
                    }
                }
            },
            "ResponseNotFound": {
                "description": "This resource does not exist at the moment.",
                "content": {
                    "application\/json": {
                        "schema": {
                            "$ref": "#\/components\/schemas\/ErrorResponse"
                        }
                    }
                }
            },
            "ResponseConflict": {
                "description": "The request could not be completed due to a conflict with the current state of the resource.",
                "content": {
                    "application\/json": {
                        "schema": {
                            "$ref": "#\/components\/schemas\/ErrorResponse"
                        }
                    }
                }
            },
            "ResponseTooManyRequests": {
                "description": "This request will not be processed because you have sent too many requests recently.",
                "content": {
                    "application\/json": {
                        "schema": {
                            "$ref": "#\/components\/schemas\/ErrorResponse"
                        }
                    }
                }
            },
            "ResponseInternalServerError": {
                "description": "The request failed due to an internal server error."
            },
            "ResponseServiceUnavailable": {
                "description": "The service is temporarily unavailable."
            }
        },
        "schemas": {
            "ErrorResponse": {
                "description": "The response of the API when there is a client error.",
                "required": [
                    "error"
                ],
                "type": "object",
                "properties": {
                    "error": {
                        "description": "Information about a client error.",
                        "required": [
                            "reference",
                            "code",
                            "message"
                        ],
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "A unique 4-character code associated with the error.",
                                "type": "string"
                            },
                            "message": {
                                "description": "A description of the error.",
                                "type": "string"
                            },
                            "reference": {
                                "description": "A reference that you can use if you need to contact customer support about the error.",
                                "type": "string"
                            },
                            "details": {
                                "description": "Details specific to the error. Such as the values that caused it.",
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "Workspace": {
                "title": "Workspace",
                "description": "Workspace data",
                "type": "object",
                "properties": {
                    "type": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            1,
                            2
                        ]
                    },
                    "is_archived": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    }
                }
            },
            "WorkspaceHistoryEvent": {
                "title": "Workspace history event",
                "description": "An event recorded when a workspace management action is executed on workspaces resource",
                "type": "object",
                "properties": {
                    "history_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "workspace_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "event_type": {
                        "type": "string"
                    },
                    "user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "details": {
                        "type": "object"
                    },
                    "time": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "Board": {
                "title": "Board",
                "description": "Board data",
                "type": "object",
                "properties": {
                    "workspace_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "is_archived": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "BoardSettings": {
                "title": "Board settings",
                "description": "Board settings",
                "type": "object",
                "properties": {
                    "size_type": {
                        "description": "Controls how the card sizes are entered and displayed. If set to 0, the card size is an input field, which allows any numeric value. If set to 1, the card size is a dropdown list with T-shirt sizes like S, M, L, XL, etc. If set to 2, the card size is a dropdown list with the Fibonacci numbers.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1,
                            2
                        ]
                    },
                    "allow_exceeding": {
                        "description": "Controls whether exceeding the WIP limits on the board is allowed. If set to 0, the limits can always be exceeded. If set to 1, the limits can be exceeded only with an explanation. If set to 2, the limits cannot be exceeded.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1,
                            2
                        ]
                    },
                    "autoarchive_cards_after": {
                        "description": "Controls number of days before automatically moving all cards from Ready to Archive to Permanent Archive.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            7,
                            14,
                            30
                        ]
                    },
                    "limit_type": {
                        "description": "Controls the measurement unit for work limits on the board. When limit type is 0, the board limits are calculated based on cards count. When limit type is 1, the board limits are calculated based on the size of the cards, cards without set size are counted as 1.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "allow_repeating_custom_card_ids": {
                        "description": "Controls whether repeating custom card ids are allowed on the board. When the value is 0, the custom ids of the cards have to be unique on the board. When the value is 1 repeating custom card ids are allowed.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "is_discard_reason_required": {
                        "description": "Controls whether providing a discard reason is required when discarding a card.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    }
                }
            },
            "BoardStructure": {
                "title": "Board structure",
                "description": "Contains all the information necessary to draw a board: the board details, its settings, workflows, lanes, columns, merged areas and cell limits.",
                "type": "object"
            },
            "ArchiveCardVersion": {
                "title": "Archived card version",
                "description": "Archived card version data",
                "type": "object",
                "properties": {
                    "version_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    }
                }
            },
            "BoardHistoryEvent": {
                "title": "Board history event",
                "description": "An event recorded when a board management action is executed on boards resource",
                "type": "object",
                "properties": {
                    "history_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "board_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "event_type": {
                        "type": "string"
                    },
                    "user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "details": {
                        "type": "object"
                    },
                    "time": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "DashboardPage": {
                "title": "Dashboard page",
                "description": "Dashboard Page data",
                "type": "object",
                "properties": {
                    "dashboard_page_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    }
                }
            },
            "DashboardPageTeam": {
                "title": "Dashboard page team",
                "description": "Give a team access to a dashboard page.",
                "type": "object",
                "properties": {}
            },
            "DashboardPageTeamAsManager": {
                "title": "Dashboard page team manager",
                "description": "Set a team as a manager of the dashboard page.",
                "type": "object",
                "required": [
                    "can_edit"
                ],
                "properties": {
                    "can_edit": {
                        "description": "When set to 1 the team will be a manager of the dashboard page. When set to 0 the team will not be a manager of the dashboard page.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    }
                }
            },
            "DashboardPageUser": {
                "title": "Dashboard page user",
                "description": "Give a user access to a dashboard page.",
                "type": "object",
                "properties": {}
            },
            "DashboardPageUserAsManager": {
                "title": "Dashboard page user manager",
                "description": "Set a user as a manager of the dashboard page.",
                "type": "object",
                "required": [
                    "can_edit"
                ],
                "properties": {
                    "can_edit": {
                        "description": "When set to 1 the user will be a manager of the dashboard page. When set to 0 the user will not be a manager of the dashboard page.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    }
                }
            },
            "MyDashboardPage": {
                "title": "My dashboard page",
                "description": "My dashboard Page data",
                "type": "object",
                "properties": {
                    "dashboard_page_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "position": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "MyDashboardPageSettingBackgroundSettingsColor": {
                "title": "My dashboard page background settings color",
                "description": "My dashboard page background settings color data",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "restrictions": {
                        "type": "object",
                        "properties": {
                            "allowed_values": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ],
                                "default": 0
                            }
                        }
                    },
                    "multiple_values": {
                        "type": "boolean",
                        "default": false
                    },
                    "default_value": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "nullable": true
                    },
                    "value": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "MyDashboardPageSettingBackgroundSettingsColorUpdateValue": {
                "title": "My dashboard page background settings color value",
                "description": "The background color of one of mine dashboard pages",
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                }
            },
            "MyDashboardPageSettingBackgroundSettingsImage": {
                "title": "My dashboard page background settings image",
                "description": "My dashboard page background settings image data",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "restrictions": {
                        "type": "object",
                        "properties": {
                            "allowed_values": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ],
                                "default": 0
                            }
                        }
                    },
                    "multiple_values": {
                        "type": "boolean",
                        "default": false
                    },
                    "default_value": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "nullable": true
                    },
                    "value": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "MyDashboardPageSettingBackgroundSettingsImageUpdateValue": {
                "title": "My dashboard page background settings image value",
                "description": "The background image of one of mine dashboard pages",
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                }
            },
            "MyDashboardPageSettingTabSettingsColor": {
                "title": "My dashboard page tab settings color",
                "description": "My dashboard page tab settings color data",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "restrictions": {
                        "type": "object",
                        "properties": {
                            "allowed_values": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ],
                                "default": 0
                            }
                        }
                    },
                    "multiple_values": {
                        "type": "boolean",
                        "default": false
                    },
                    "default_value": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "nullable": true
                    },
                    "value": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "MyDashboardPageSettingTabSettingsColorUpdateValue": {
                "title": "My dashboard page tab settings color value",
                "description": "The tab color of one of mine dashboard pages",
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                }
            },
            "MyDashboardPageTabSettingsIsHidden": {
                "title": "My dashboard page tab setting is hidden",
                "description": "My dashboard page tab settings is hidden data",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "restrictions": {
                        "type": "object",
                        "properties": {
                            "allowed_values": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ],
                                "default": 0
                            }
                        }
                    },
                    "multiple_values": {
                        "type": "boolean",
                        "default": false
                    },
                    "default_value": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "nullable": true
                    },
                    "value": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "nullable": true
                    }
                }
            },
            "MyDashboardPageTabSettingsIsHiddenUpdateValue": {
                "title": "My dashboard page tab setting is hidden value",
                "description": "The tab is hidden or not of one of mine dashboard pages",
                "type": "object",
                "properties": {
                    "value": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    }
                }
            },
            "Workflow": {
                "title": "Workflow",
                "description": "Workflow data",
                "type": "object",
                "properties": {
                    "type": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "position": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "is_enabled": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "is_collapsible": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    }
                }
            },
            "Lane": {
                "title": "Lane",
                "description": "Lane data",
                "type": "object",
                "properties": {
                    "workflow": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "parent_lane_id": {
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "position": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "description": {
                        "type": "string"
                    },
                    "color": {
                        "type": "string"
                    }
                }
            },
            "Column": {
                "title": "Column",
                "description": "Column data",
                "type": "object",
                "properties": {
                    "workflow": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "section": {
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "parent_column_id": {
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "position": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "description": {
                        "type": "string"
                    },
                    "color": {
                        "type": "string"
                    },
                    "limit": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "cards_per_row": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "flow_type": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            1,
                            2
                        ]
                    }
                }
            },
            "MergedArea": {
                "title": "Merged area",
                "description": "Merged area data",
                "type": "object",
                "properties": {
                    "board_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "primary_column_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "limit": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "lane_ids": {
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "column_ids": {
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    }
                }
            },
            "CellLimit": {
                "title": "Cell limit",
                "description": "Cell limit data",
                "type": "object",
                "properties": {
                    "board_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "lane_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "column_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "limit": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "LaneSectionLimit": {
                "title": "Lane section limit",
                "description": "Lane section limit data",
                "type": "object",
                "properties": {
                    "board_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "lane_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "section": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "limit": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "WorkflowCopy": {
                "title": "Workflow copy",
                "description": "Workflow copy data",
                "type": "object",
                "properties": {
                    "board_structure": {
                        "type": "object"
                    },
                    "cycle_time_column_ids": {
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "initiative_workflow_settings": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "workflow_id": {
                                    "type": "integer",
                                    "example": 1
                                },
                                "built_in_rules_can_start_initiatives": {
                                    "type": "integer",
                                    "example": 0
                                },
                                "built_in_rules_can_finish_initiatives": {
                                    "type": "integer",
                                    "example": 0
                                },
                                "built_in_rules_can_move_to_requested": {
                                    "type": "integer",
                                    "example": 0
                                },
                                "built_in_rules_can_move_back_from_done": {
                                    "type": "integer",
                                    "example": 0
                                },
                                "built_in_rules_can_move_from_backlog_to_requested": {
                                    "type": "integer",
                                    "example": 0
                                }
                            }
                        }
                    }
                }
            },
            "BoardCustomFieldDataCommon": {
                "title": "Board Custom Field",
                "description": "Board custom field data",
                "type": "object",
                "properties": {
                    "position": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "color": {
                        "type": "string"
                    },
                    "is_always_present": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    }
                }
            },
            "BoardCustomFieldDataSingleLine": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataCommon"
                    },
                    {
                        "type": "object",
                        "title": "Board Custom Field - Single-Line Text",
                        "description": "Board custom field data - single-line text",
                        "properties": {
                            "display_width": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ]
                            },
                            "prefix": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "suffix": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "unique_values": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "value_is_required": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "default_value": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "inherit_default_value": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            }
                        }
                    }
                ]
            },
            "BoardCustomFieldDataSingleLineWithFieldId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "description": "Field id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataSingleLine"
                    }
                ]
            },
            "BoardCustomFieldDataSingleLineWithBoardId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "board_id": {
                                "description": "Board id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataSingleLine"
                    }
                ]
            },
            "BoardCustomFieldDataMultiLine": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataCommon"
                    },
                    {
                        "type": "object",
                        "title": "Board Custom Field - Multi-Line Text",
                        "description": "Board custom field data - multi-line text",
                        "properties": {
                            "value_is_required": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "default_value": {
                                "type": "string"
                            },
                            "inherit_default_value": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            }
                        }
                    }
                ]
            },
            "BoardCustomFieldDataMultiLineWithFieldId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "description": "Field id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataMultiLine"
                    }
                ]
            },
            "BoardCustomFieldDataMultiLineWithBoardId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "board_id": {
                                "description": "Board id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataMultiLine"
                    }
                ]
            },
            "BoardCustomFieldDataNumber": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataCommon"
                    },
                    {
                        "type": "object",
                        "title": "Board Custom Field - Number",
                        "description": "Board custom field data - number",
                        "properties": {
                            "display_width": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ]
                            },
                            "prefix": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "suffix": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "unique_values": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "min_value": {
                                "format": "double",
                                "type": "number"
                            },
                            "max_value": {
                                "format": "double",
                                "type": "number"
                            },
                            "decimal_places": {
                                "format": "int32",
                                "type": "integer",
                                "minimum": 0,
                                "maximum": 8
                            },
                            "value_is_required": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "default_value": {
                                "format": "double",
                                "type": "number"
                            },
                            "inherit_default_value": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            }
                        }
                    }
                ]
            },
            "BoardCustomFieldDataNumberWithFieldId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "description": "Field id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataNumber"
                    }
                ]
            },
            "BoardCustomFieldDataNumberWithBoardId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "board_id": {
                                "description": "Board id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataNumber"
                    }
                ]
            },
            "BoardCustomFieldDataDate": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataCommon"
                    },
                    {
                        "type": "object",
                        "title": "Board Custom Field - Date",
                        "description": "Board custom field data - date",
                        "properties": {
                            "display_width": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ]
                            },
                            "value_is_required": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "default_value": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "inherit_default_value": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            }
                        }
                    }
                ]
            },
            "BoardCustomFieldDataDateWithFieldId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "description": "Field id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataDate"
                    }
                ]
            },
            "BoardCustomFieldDataDateWithBoardId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "board_id": {
                                "description": "Board id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataDate"
                    }
                ]
            },
            "BoardCustomFieldDataLink": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataCommon"
                    },
                    {
                        "type": "object",
                        "title": "Board Custom Field - Link",
                        "description": "Board custom field data - link",
                        "properties": {
                            "display_width": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ]
                            },
                            "value_is_required": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "default_value": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "inherit_default_value": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            }
                        }
                    }
                ]
            },
            "BoardCustomFieldDataLinkWithFieldId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "description": "Field id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataLink"
                    }
                ]
            },
            "BoardCustomFieldDataLinkWithBoardId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "board_id": {
                                "description": "Board id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataLink"
                    }
                ]
            },
            "BoardCustomFieldDataDropdown": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataCommon"
                    },
                    {
                        "type": "object",
                        "title": "Board Custom Field - Dropdown",
                        "description": "Board custom field data - dropdown",
                        "properties": {
                            "display_width": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ]
                            },
                            "min_number_of_values": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "max_number_of_values": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "allow_other_value": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "inherit_default_values": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            }
                        }
                    }
                ]
            },
            "BoardCustomFieldDataDropdownWithFieldId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "description": "Field id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataDropdown"
                    }
                ]
            },
            "BoardCustomFieldDataDropdownWithBoardId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "board_id": {
                                "description": "Board id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataDropdown"
                    }
                ]
            },
            "BoardCustomFieldDataContributor": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataCommon"
                    },
                    {
                        "type": "object",
                        "title": "Board Custom Field - Contributor",
                        "description": "Board custom field data - contributor",
                        "properties": {
                            "min_number_of_contributors": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "max_number_of_contributors": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                ]
            },
            "BoardCustomFieldDataContributorWithFieldId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "description": "Field id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataContributor"
                    }
                ]
            },
            "BoardCustomFieldDataContributorWithBoardId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "board_id": {
                                "description": "Board id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataContributor"
                    }
                ]
            },
            "BoardCustomFieldDataFile": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataCommon"
                    },
                    {
                        "type": "object",
                        "title": "Board Custom Field - File",
                        "description": "Board custom field data - file",
                        "properties": {
                            "min_number_of_files": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "max_number_of_files": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                ]
            },
            "BoardCustomFieldDataFileWithFieldId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "description": "Field id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataFile"
                    }
                ]
            },
            "BoardCustomFieldDataFileWithBoardId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "board_id": {
                                "description": "Board id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataFile"
                    }
                ]
            },
            "BoardCustomFieldDataVote": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataCommon"
                    },
                    {
                        "type": "object",
                        "title": "Board Custom Field - Vote",
                        "description": "Board custom field data - vote",
                        "properties": {
                            "comment_is_required": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            }
                        }
                    }
                ]
            },
            "BoardCustomFieldDataVoteWithFieldId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "description": "Field id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataVote"
                    }
                ]
            },
            "BoardCustomFieldDataVoteWithBoardId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "board_id": {
                                "description": "Board id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataVote"
                    }
                ]
            },
            "BoardCustomFieldDataCardPicker": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataCommon"
                    },
                    {
                        "type": "object",
                        "title": "Board Custom Field - Card Picker",
                        "description": "Board custom field data - card picker",
                        "properties": {
                            "search": {
                                "type": "string"
                            },
                            "min_number_of_selected_cards": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "max_number_of_selected_cards": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                ]
            },
            "BoardCustomFieldDataCardPickerWithFieldId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "description": "Field id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataCardPicker"
                    }
                ]
            },
            "BoardCustomFieldDataCardPickerWithBoardId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "board_id": {
                                "description": "Board id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldDataCardPicker"
                    }
                ]
            },
            "BoardCustomFieldAllowedValue": {
                "title": "Board custom field allowed value",
                "description": "Board custom field allowed value data",
                "type": "object",
                "properties": {
                    "position": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "is_default": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    }
                }
            },
            "BoardCustomFieldCreateOrUpdateRequestCommon": {
                "description": "Board custom field data.",
                "type": "object",
                "properties": {
                    "color": {
                        "description": "The color of the custom field. 6 hexadecimal characters are expected.",
                        "type": "string",
                        "default": null
                    },
                    "is_always_present": {
                        "description": "Controls whether this custom field must always be present on all cards.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "position": {
                        "description": "The position of the field within the list of fields of the cards on the board.",
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "BoardCustomFieldCreateOrUpdateRequestSingleLine": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Board custom field data - single-line text.",
                        "properties": {
                            "display_width": {
                                "description": "When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ]
                            },
                            "prefix": {
                                "description": "A prefix to display before the custom field value.",
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "suffix": {
                                "description": "A suffix to display after the custom field value.",
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "unique_values": {
                                "description": "When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "value_is_required": {
                                "description": "Controls whether this custom field must always have a value for the cards it is applied to.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "default_value": {
                                "description": "The default value of the custom field.",
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "inherit_default_value": {
                                "description": "Controls whether the global default value of the custom field should be used as a board default.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            }
                        }
                    }
                ]
            },
            "BoardCustomFieldCreateOrUpdateRequestMultiLine": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Board custom field data - multi-line text.",
                        "properties": {
                            "value_is_required": {
                                "description": "Controls whether this custom field must always have a value for the cards it is applied to.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "default_value": {
                                "description": "The default value of the custom field.",
                                "type": "string"
                            },
                            "inherit_default_value": {
                                "description": "Controls whether the global default value of the custom field should be used as a board default.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            }
                        }
                    }
                ]
            },
            "BoardCustomFieldCreateOrUpdateRequestNumber": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Board custom field data - number.",
                        "properties": {
                            "display_width": {
                                "description": "When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ]
                            },
                            "prefix": {
                                "description": "A prefix to display before the custom field value.",
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "suffix": {
                                "description": "A suffix to display after the custom field value.",
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "unique_values": {
                                "description": "When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "min_value": {
                                "description": "The inclusive minimum of the range of allowed values.",
                                "format": "double",
                                "type": "number"
                            },
                            "max_value": {
                                "description": "The inclusive maximum of the range of allowed values.",
                                "format": "double",
                                "type": "number"
                            },
                            "decimal_places": {
                                "description": "The number of decimal places to show.",
                                "format": "int32",
                                "type": "integer",
                                "minimum": 0,
                                "maximum": 8
                            },
                            "value_is_required": {
                                "description": "Controls whether this custom field must always have a value for the cards it is applied to.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "default_value": {
                                "description": "The default value of the custom field.",
                                "format": "double",
                                "type": "number"
                            },
                            "inherit_default_value": {
                                "description": "Controls whether the global default value of the custom field should be used as a board default.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            }
                        }
                    }
                ]
            },
            "BoardCustomFieldCreateOrUpdateRequestDate": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Board custom field data - date.",
                        "properties": {
                            "display_width": {
                                "description": "When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ]
                            },
                            "value_is_required": {
                                "description": "Controls whether this custom field must always have a value for the cards it is applied to.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "default_value": {
                                "description": "The default value of the custom field. The value is interpreted as number of days to add to the current date when the custom field is applied to a card.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "inherit_default_value": {
                                "description": "Controls whether the global default value of the custom field should be used as a board default.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            }
                        }
                    }
                ]
            },
            "BoardCustomFieldCreateOrUpdateRequestLink": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Board custom field data - link.",
                        "properties": {
                            "display_width": {
                                "description": "When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ]
                            },
                            "value_is_required": {
                                "description": "Controls whether this custom field must always have a value for the cards it is applied to.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "default_value": {
                                "description": "The default value of the custom field.",
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "inherit_default_value": {
                                "description": "Controls whether the global default value of the custom field should be used as a board default.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            }
                        }
                    }
                ]
            },
            "BoardCustomFieldCreateOrUpdateRequestDropdown": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Board custom field data - dropdrown.",
                        "properties": {
                            "display_width": {
                                "description": "When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ]
                            },
                            "min_number_of_values": {
                                "description": "The inclusive minimum number of values that have to be selected for this custom field per card.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "max_number_of_values": {
                                "description": "The inclusive maximum number of values that have to be selected for this custom field per card.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "inherit_default_values": {
                                "description": "Controls whether the global default values of the custom field should be used as a board defaults.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "allow_other_value": {
                                "description": "When set to 1 the dropdown will have an additional option which will let the users enter a short text as the value of the field.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            }
                        }
                    }
                ]
            },
            "BoardCustomFieldCreateOrUpdateRequestContributor": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Board custom field data - contributor.",
                        "properties": {
                            "min_number_of_contributors": {
                                "description": "The inclusive minimum number of contributors that have to be selected for this custom field per card.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "max_number_of_contributors": {
                                "description": "The inclusive maximum number of contributors that have to be selected for this custom field per card.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                ]
            },
            "BoardCustomFieldCreateOrUpdateRequestFile": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Board custom field data - file.",
                        "properties": {
                            "min_number_of_files": {
                                "description": "The inclusive minimum number of files that have to be attached in this custom field per card.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "max_number_of_files": {
                                "description": "The inclusive maximum number of files that have to be attached in this custom field per card.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                ]
            },
            "BoardCustomFieldCreateOrUpdateRequestVote": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Board custom field data - vote.",
                        "properties": {
                            "comment_is_required": {
                                "description": "Controls whether a user must include a comment in order to vote.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            }
                        }
                    }
                ]
            },
            "BoardCustomFieldCreateOrUpdateRequestCardPicker": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/BoardCustomFieldCreateOrUpdateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Board custom field data - card picker.",
                        "properties": {
                            "search": {
                                "description": "The search filter that controls which cards will be presented in the card picker.",
                                "type": "string"
                            },
                            "min_number_of_selected_cards": {
                                "description": "The inclusive minimum number of cards that have to be selected for this custom field per card.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "max_number_of_selected_cards": {
                                "description": "The inclusive maximum number of cards that have to be selected for this custom field per card.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                ]
            },
            "User": {
                "title": "User",
                "description": "User data",
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "realname": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "avatar": {
                        "type": "string"
                    },
                    "is_enabled": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "is_confirmed": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "is_tfa_enabled": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "registration_date": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "UserHistoryEvent": {
                "title": "User history event",
                "description": "An event recorded when an user management action is executed on users resource",
                "type": "object",
                "properties": {
                    "id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "affected_user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "event_type": {
                        "type": "string"
                    },
                    "details": {
                        "type": "object"
                    },
                    "time": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "Role": {
                "title": "Role",
                "description": "Role data",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    }
                }
            },
            "BlockReason": {
                "title": "Block reason",
                "description": "Block reason data",
                "type": "object",
                "properties": {
                    "reason_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "icon_type": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "icon_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "label": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "color": {
                        "type": "string"
                    },
                    "with_cards": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "with_date": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "with_users": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "availability": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1,
                            2
                        ]
                    },
                    "is_enabled": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    }
                }
            },
            "DiscardReason": {
                "title": "Discard reason",
                "description": "Discard reason data",
                "type": "object",
                "properties": {
                    "reason_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "label": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "availability": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1,
                            2
                        ]
                    },
                    "is_enabled": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    }
                }
            },
            "Sticker": {
                "title": "Sticker",
                "description": "Sticker data",
                "type": "object",
                "properties": {
                    "sticker_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "icon_type": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "icon_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "label": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "color": {
                        "type": "string"
                    },
                    "availability": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1,
                            2
                        ]
                    },
                    "is_enabled": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    }
                }
            },
            "Team": {
                "title": "Team",
                "description": "Team data",
                "type": "object",
                "properties": {
                    "team_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "TeamHistoryEvent": {
                "title": "Team history event",
                "description": "Team history event data",
                "type": "object",
                "properties": {
                    "history_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "team_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "event_type": {
                        "type": "string"
                    },
                    "user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "details": {
                        "type": "object"
                    },
                    "time": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "Tag": {
                "title": "Tag",
                "description": "Tag data",
                "type": "object",
                "properties": {
                    "tag_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "icon_type": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "icon_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "label": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "color": {
                        "type": "string"
                    },
                    "availability": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1,
                            2
                        ]
                    },
                    "is_enabled": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    }
                }
            },
            "CustomFieldDataCommon": {
                "title": "Custom Field",
                "description": "Custom field data",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "color": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "single_line_text",
                            "multi_line_text",
                            "number",
                            "date",
                            "link",
                            "dropdown",
                            "contributor",
                            "file",
                            "vote",
                            "card_picker"
                        ]
                    },
                    "is_immutable": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "is_always_present": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "all_properties_are_locked": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "availability": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1,
                            2
                        ]
                    },
                    "is_enabled": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    }
                }
            },
            "CustomFieldDataSingleLine": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldDataCommon"
                    },
                    {
                        "type": "object",
                        "title": "Custom Field - Single-Line Text",
                        "description": "Custom field data - single-line text",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "single_line_text"
                                ]
                            },
                            "display_width": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ]
                            },
                            "prefix": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "suffix": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "uniqueness_of_values": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1,
                                    2
                                ]
                            },
                            "value_is_required": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "default_value": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            }
                        }
                    }
                ]
            },
            "CustomFieldDataSingleLineWithFieldId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "description": "Field id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldDataSingleLine"
                    }
                ]
            },
            "CustomFieldDataMultiLine": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldDataCommon"
                    },
                    {
                        "type": "object",
                        "title": "Custom Field - Multi-Line Text",
                        "description": "Custom field data - multi-line text",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "multi_line_text"
                                ]
                            },
                            "value_is_rich_text": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "value_is_required": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "default_value": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "CustomFieldDataMultiLineWithFieldId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "description": "Field id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldDataMultiLine"
                    }
                ]
            },
            "CustomFieldDataNumber": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldDataCommon"
                    },
                    {
                        "type": "object",
                        "title": "Custom Field - Number",
                        "description": "Custom field data - number",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "number"
                                ]
                            },
                            "display_width": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ]
                            },
                            "prefix": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "suffix": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "uniqueness_of_values": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1,
                                    2
                                ]
                            },
                            "min_value": {
                                "format": "double",
                                "type": "number"
                            },
                            "max_value": {
                                "format": "double",
                                "type": "number"
                            },
                            "decimal_places": {
                                "format": "int32",
                                "type": "integer",
                                "minimum": 0,
                                "maximum": 8
                            },
                            "value_is_required": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "default_value": {
                                "format": "double",
                                "type": "number"
                            }
                        }
                    }
                ]
            },
            "CustomFieldDataNumberWithFieldId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "description": "Field id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldDataNumber"
                    }
                ]
            },
            "CustomFieldDataDate": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldDataCommon"
                    },
                    {
                        "type": "object",
                        "title": "Custom Field - Date",
                        "description": "Custom field data - date",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "date"
                                ]
                            },
                            "display_width": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ]
                            },
                            "value_with_time": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "value_is_required": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "default_value": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                ]
            },
            "CustomFieldDataDateWithFieldId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "description": "Field id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldDataDate"
                    }
                ]
            },
            "CustomFieldDataLink": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldDataCommon"
                    },
                    {
                        "type": "object",
                        "title": "Custom Field - Link",
                        "description": "Custom field data - link",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "link"
                                ]
                            },
                            "display_width": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ]
                            },
                            "value_is_required": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "default_value": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            }
                        }
                    }
                ]
            },
            "CustomFieldDataLinkWithFieldId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "description": "Field id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldDataLink"
                    }
                ]
            },
            "CustomFieldDataDropdown": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldDataCommon"
                    },
                    {
                        "type": "object",
                        "title": "Custom Field - Dropdown",
                        "description": "Custom field data - dropdown",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "dropdown"
                                ]
                            },
                            "allowed_values_are_locked": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "display_width": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ]
                            },
                            "min_number_of_values": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "max_number_of_values": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "allow_other_value": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "allowed_values": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "string",
                                            "minLength": 1,
                                            "maxLength": 250
                                        },
                                        "is_default": {
                                            "format": "int32",
                                            "type": "integer",
                                            "enum": [
                                                0,
                                                1
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            },
            "CustomFieldDataDropdownWithFieldId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "description": "Field id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldDataDropdown"
                    }
                ]
            },
            "CustomFieldDataContributor": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldDataCommon"
                    },
                    {
                        "type": "object",
                        "title": "Custom Field - Contributor",
                        "description": "Custom field data - contributor",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "contributor"
                                ]
                            },
                            "min_number_of_contributors": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "max_number_of_contributors": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                ]
            },
            "CustomFieldDataContributorWithFieldId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "description": "Field id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldDataContributor"
                    }
                ]
            },
            "CustomFieldDataFile": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldDataCommon"
                    },
                    {
                        "type": "object",
                        "title": "Custom Field - File",
                        "description": "Custom field data - file",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "file"
                                ]
                            },
                            "min_number_of_files": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "max_number_of_files": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                ]
            },
            "CustomFieldDataFileWithFieldId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "description": "Field id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldDataFile"
                    }
                ]
            },
            "CustomFieldDataVote": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldDataCommon"
                    },
                    {
                        "type": "object",
                        "title": "Custom Field - Vote",
                        "description": "Custom field data - vote",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "vote"
                                ]
                            },
                            "comment_is_required": {
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            }
                        }
                    }
                ]
            },
            "CustomFieldDataVoteWithFieldId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "description": "Field id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldDataVote"
                    }
                ]
            },
            "CustomFieldDataCardPicker": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldDataCommon"
                    },
                    {
                        "type": "object",
                        "title": "Custom Field - Card Picker",
                        "description": "Custom field data - card picker",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "card_picker"
                                ]
                            },
                            "search": {
                                "type": "string"
                            },
                            "min_number_of_selected_cards": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "max_number_of_selected_cards": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                ]
            },
            "CustomFieldDataCardPickerWithFieldId": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "description": "Field id.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldDataCardPicker"
                    }
                ]
            },
            "CustomFieldAllowedValue": {
                "title": "Card custom field",
                "description": "Card custom field data",
                "type": "object",
                "properties": {
                    "position": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "is_enabled": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "is_default": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    }
                }
            },
            "CustomFieldCreateRequestCommon": {
                "description": "Custom field data.",
                "required": [
                    "name",
                    "type"
                ],
                "type": "object",
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "single_line_text": "#\/components\/schemas\/CustomFieldCreateRequestSingleLine",
                        "multi_line_text": "#\/components\/schemas\/CustomFieldCreateRequestMultiLine",
                        "number": "#\/components\/schemas\/CustomFieldCreateRequestNumber",
                        "date": "#\/components\/schemas\/CustomFieldCreateRequestDate",
                        "link": "#\/components\/schemas\/CustomFieldCreateRequestLink",
                        "dropdown": "#\/components\/schemas\/CustomFieldCreateRequestDropdown",
                        "contributor": "#\/components\/schemas\/CustomFieldCreateRequestContributor",
                        "file": "#\/components\/schemas\/CustomFieldCreateRequestFile",
                        "vote": "#\/components\/schemas\/CustomFieldCreateRequestVote",
                        "card_picker": "#\/components\/schemas\/CustomFieldCreateRequestCardPicker"
                    }
                },
                "properties": {
                    "name": {
                        "description": "The name of the new custom field.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "color": {
                        "description": "The color of the custom field. 6 hexadecimal characters are expected.",
                        "type": "string",
                        "default": null
                    },
                    "type": {
                        "description": "The type of the custom field.",
                        "type": "string",
                        "enum": [
                            "single_line_text",
                            "multi_line_text",
                            "number",
                            "date",
                            "link",
                            "dropdown",
                            "contributor",
                            "file",
                            "vote",
                            "card_picker"
                        ]
                    },
                    "is_immutable": {
                        "description": "Controls whether the value of this custom field can be changed after it has first been set.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "default": 0
                    },
                    "is_always_present": {
                        "description": "Controls whether this custom field must always be present on all cards.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "default": 0
                    },
                    "all_properties_are_locked": {
                        "description": "Controls whether the custom field properties are locked and cannot be changed per board.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "default": 0
                    },
                    "availability": {
                        "description": "When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1,
                            2
                        ],
                        "default": 0
                    },
                    "is_enabled": {
                        "description": "Controls whether this custom field is enabled.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "default": 1
                    }
                }
            },
            "CustomFieldCreateRequestSingleLine": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldCreateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Custom field data - single-line text.",
                        "properties": {
                            "display_width": {
                                "description": "When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ],
                                "default": 1
                            },
                            "prefix": {
                                "description": "A prefix to display before the custom field value.",
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "suffix": {
                                "description": "A suffix to display after the custom field value.",
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "uniqueness_of_values": {
                                "description": "When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1,
                                    2
                                ],
                                "default": 0
                            },
                            "value_is_required": {
                                "description": "Controls whether this custom field must always have a value for the cards it is applied to.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ],
                                "default": 0
                            },
                            "default_value": {
                                "description": "The default value of the custom field.",
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "CustomFieldCreateRequestMultiLine": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldCreateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Custom field data - multi-line text.",
                        "properties": {
                            "value_is_rich_text": {
                                "description": "Controls whether the value of the custom field will be interpreted as html.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ],
                                "default": 0
                            },
                            "value_is_required": {
                                "description": "Controls whether this custom field must always have a value for the cards it is applied to.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ],
                                "default": 0
                            },
                            "default_value": {
                                "description": "The default value of the custom field.",
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "CustomFieldCreateRequestNumber": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldCreateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Custom field data - number.",
                        "properties": {
                            "display_width": {
                                "description": "When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ],
                                "default": 2
                            },
                            "prefix": {
                                "description": "A prefix to display before the custom field value.",
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "suffix": {
                                "description": "A suffix to display after the custom field value.",
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "uniqueness_of_values": {
                                "description": "When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1,
                                    2
                                ],
                                "default": 0
                            },
                            "min_value": {
                                "description": "The inclusive minimum of the range of allowed values.",
                                "format": "double",
                                "type": "number"
                            },
                            "max_value": {
                                "description": "The inclusive maximum of the range of allowed values.",
                                "format": "double",
                                "type": "number"
                            },
                            "decimal_places": {
                                "description": "The number of decimal places to show.",
                                "format": "int32",
                                "type": "integer",
                                "minimum": 0,
                                "maximum": 8,
                                "default": 0
                            },
                            "value_is_required": {
                                "description": "Controls whether this custom field must always have a value for the cards it is applied to.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ],
                                "default": 0
                            },
                            "default_value": {
                                "description": "The default value of the custom field.",
                                "format": "double",
                                "type": "number"
                            }
                        }
                    }
                ]
            },
            "CustomFieldCreateRequestDate": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldCreateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Custom field data - date.",
                        "properties": {
                            "display_width": {
                                "description": "When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ],
                                "default": 2
                            },
                            "value_with_time": {
                                "description": "Controls whether the value is only a date or a date and a time.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ],
                                "default": 0
                            },
                            "value_is_required": {
                                "description": "Controls whether this custom field must always have a value for the cards it is applied to.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ],
                                "default": 0
                            },
                            "default_value": {
                                "description": "The default value of the custom field. The value is interpreted as number of days to add to the current date when the custom field is applied to a card.",
                                "format": "int32",
                                "type": "integer",
                                "default": 0
                            }
                        }
                    }
                ]
            },
            "CustomFieldCreateRequestLink": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldCreateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Custom field data - link.",
                        "properties": {
                            "display_width": {
                                "description": "When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ],
                                "default": 1
                            },
                            "value_is_required": {
                                "description": "Controls whether this custom field must always have a value for the cards it is applied to.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ],
                                "default": 0
                            },
                            "default_value": {
                                "description": "The default value of the custom field.",
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "CustomFieldCreateRequestDropdown": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldCreateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Custom field data - dropdrown.",
                        "properties": {
                            "allowed_values_are_locked": {
                                "description": "When set to 1 the allowed values of the dropdown cannot be changed per board.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ],
                                "default": 0
                            },
                            "display_width": {
                                "description": "When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ],
                                "default": 1
                            },
                            "min_number_of_values": {
                                "description": "The inclusive minimum number of values that have to be selected for this custom field per card.",
                                "format": "double",
                                "type": "number",
                                "default": 0
                            },
                            "max_number_of_values": {
                                "description": "The inclusive maximum number of values that have to be selected for this custom field per card.",
                                "format": "double",
                                "type": "number",
                                "default": 1
                            },
                            "allow_other_value": {
                                "description": "When set to 1 the dropdown will have an additional option which will let the users enter a short text as the value of the field.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ],
                                "default": 0
                            },
                            "allowed_values": {
                                "description": "A list of the allowed values of the custom field with a flag controlling whether the value is selected by default. The values will be dispayed in the UI in the order in which they were provided.",
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "description": "The value.",
                                            "type": "string",
                                            "minLength": 1,
                                            "maxLength": 250
                                        },
                                        "is_default": {
                                            "description": "Controls whether the value is selected by default.",
                                            "format": "int32",
                                            "type": "integer",
                                            "enum": [
                                                0,
                                                1
                                            ],
                                            "default": 0
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            },
            "CustomFieldCreateRequestContributor": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldCreateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Custom field data - contributor.",
                        "properties": {
                            "min_number_of_contributors": {
                                "description": "The inclusive minimum number of contributors that have to be selected for this custom field per card.",
                                "format": "int32",
                                "type": "integer",
                                "default": 0
                            },
                            "max_number_of_contributors": {
                                "description": "The inclusive maximum number of contributors that have to be selected for this custom field per card.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                ]
            },
            "CustomFieldCreateRequestFile": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldCreateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Custom field data - file.",
                        "properties": {
                            "min_number_of_files": {
                                "description": "The inclusive minimum number of files that have to be attached in this custom field per card.",
                                "format": "int32",
                                "type": "integer",
                                "default": 0
                            },
                            "max_number_of_files": {
                                "description": "The inclusive maximum number of files that have to be attached in this custom field per card.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                ]
            },
            "CustomFieldCreateRequestVote": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldCreateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Custom field data - vote.",
                        "properties": {
                            "comment_is_required": {
                                "description": "Controls whether a user must include a comment in order to vote.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ],
                                "default": 0
                            }
                        }
                    }
                ]
            },
            "CustomFieldCreateRequestCardPicker": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldCreateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Custom field data - card picker.",
                        "properties": {
                            "search": {
                                "description": "The search filter that controls which cards will be presented in the card picker.",
                                "type": "string"
                            },
                            "min_number_of_selected_cards": {
                                "description": "The inclusive minimum number of cards that have to be selected for this custom field per card.",
                                "format": "int32",
                                "type": "integer",
                                "default": 0
                            },
                            "max_number_of_selected_cards": {
                                "description": "The inclusive maximum number of cards that have to be selected for this custom field per card.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                ]
            },
            "CustomFieldUpdateRequestCommon": {
                "description": "Custom field data.",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name of the custom field.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "color": {
                        "description": "The color of the custom field. 6 hexadecimal characters are expected.",
                        "type": "string"
                    },
                    "is_immutable": {
                        "description": "Controls whether the value of this custom field can be changed after it has first been set.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "is_always_present": {
                        "description": "Controls whether this custom field must always be present on all cards.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "all_properties_are_locked": {
                        "description": "Controls whether the allowed values can be limited per board.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "availability": {
                        "description": "When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1,
                            2
                        ]
                    },
                    "is_enabled": {
                        "description": "Controls whether this custom field is enabled.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    }
                }
            },
            "CustomFieldUpdateRequestSingleLine": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldUpdateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Custom field data - single-line text.",
                        "properties": {
                            "display_width": {
                                "description": "When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ]
                            },
                            "prefix": {
                                "description": "A prefix to display before the custom field value.",
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "suffix": {
                                "description": "A suffix to display after the custom field value.",
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "uniqueness_of_values": {
                                "description": "When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1,
                                    2
                                ]
                            },
                            "value_is_required": {
                                "description": "Controls whether this custom field must always have a value for the cards it is applied to.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "default_value": {
                                "description": "The default value of the custom field.",
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            }
                        }
                    }
                ]
            },
            "CustomFieldUpdateRequestMultiLine": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldUpdateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Custom field data - multi-line text.",
                        "properties": {
                            "value_is_rich_text": {
                                "description": "Controls whether the value of the custom field will be interpreted as html.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "value_is_required": {
                                "description": "Controls whether this custom field must always have a value for the cards it is applied to.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "default_value": {
                                "description": "The default value of the custom field.",
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "CustomFieldUpdateRequestNumber": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldUpdateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Custom field data - number.",
                        "properties": {
                            "display_width": {
                                "description": "When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ]
                            },
                            "prefix": {
                                "description": "A prefix to display before the custom field value.",
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "suffix": {
                                "description": "A suffix to display after the custom field value.",
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            },
                            "uniqueness_of_values": {
                                "description": "When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1,
                                    2
                                ]
                            },
                            "min_value": {
                                "description": "The inclusive minimum of the range of allowed values.",
                                "format": "double",
                                "type": "number"
                            },
                            "max_value": {
                                "description": "The inclusive maximum of the range of allowed values.",
                                "format": "double",
                                "type": "number"
                            },
                            "decimal_places": {
                                "description": "The number of decimal places to show.",
                                "format": "int32",
                                "type": "integer",
                                "minimum": 0,
                                "maximum": 8
                            },
                            "value_is_required": {
                                "description": "Controls whether this custom field must always have a value for the cards it is applied to.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "default_value": {
                                "description": "The default value of the custom field.",
                                "format": "double",
                                "type": "number"
                            }
                        }
                    }
                ]
            },
            "CustomFieldUpdateRequestDate": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldUpdateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Custom field data - date.",
                        "properties": {
                            "display_width": {
                                "description": "When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ]
                            },
                            "value_with_time": {
                                "description": "Controls whether the value is only a date or a date and a time.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "value_is_required": {
                                "description": "Controls whether this custom field must always have a value for the cards it is applied to.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "default_value": {
                                "description": "The default value of the custom field. The value is interpreted as number of days to add to the current date when the custom field is applied to a card.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                ]
            },
            "CustomFieldUpdateRequestLink": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldUpdateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Custom field data - link.",
                        "properties": {
                            "display_width": {
                                "description": "When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ]
                            },
                            "value_is_required": {
                                "description": "Controls whether this custom field must always have a value for the cards it is applied to.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "default_value": {
                                "description": "The default value of the custom field.",
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 250
                            }
                        }
                    }
                ]
            },
            "CustomFieldUpdateRequestDropdown": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldUpdateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Custom field data - dropdrown.",
                        "properties": {
                            "allowed_values_are_locked": {
                                "description": "When set to 1 the allowed values of the dropdown cannot be changed per board.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "display_width": {
                                "description": "When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    1,
                                    2
                                ]
                            },
                            "min_number_of_values": {
                                "description": "The inclusive minimum number of values that have to be selected for this custom field per card.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "max_number_of_values": {
                                "description": "The inclusive maximum number of values that have to be selected for this custom field per card.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "allow_other_value": {
                                "description": "When set to 1 the dropdown will have an additional option which will let the users enter a short text as the value of the field.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            }
                        }
                    }
                ]
            },
            "CustomFieldUpdateRequestContributor": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldUpdateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Custom field data - contributor.",
                        "properties": {
                            "min_number_of_contributors": {
                                "description": "The inclusive minimum number of contributors that have to be selected for this custom field per card.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "max_number_of_contributors": {
                                "description": "The inclusive maximum number of contributors that have to be selected for this custom field per card.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                ]
            },
            "CustomFieldUpdateRequestFile": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldUpdateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Custom field data - file.",
                        "properties": {
                            "min_number_of_files": {
                                "description": "The inclusive minimum number of files that have to be attached in this custom field per card.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "max_number_of_files": {
                                "description": "The inclusive maximum number of files that have to be attached in this custom field per card.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                ]
            },
            "CustomFieldUpdateRequestVote": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldUpdateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Custom field data - vote.",
                        "properties": {
                            "comment_is_required": {
                                "description": "Controls whether a user must include a comment in order to vote.",
                                "format": "int32",
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            }
                        }
                    }
                ]
            },
            "CustomFieldUpdateRequestCardPicker": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CustomFieldUpdateRequestCommon"
                    },
                    {
                        "type": "object",
                        "description": "Custom field data - card picker.",
                        "properties": {
                            "search": {
                                "description": "The search filter that controls which cards will be presented in the card picker.",
                                "type": "string"
                            },
                            "min_number_of_selected_cards": {
                                "description": "The inclusive minimum number of cards that have to be selected for this custom field per card.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "max_number_of_selected_cards": {
                                "description": "The inclusive maximum number of cards that have to be selected for this custom field per card.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                ]
            },
            "Card": {
                "title": "Card",
                "description": "Card data",
                "type": "object",
                "properties": {
                    "card_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "custom_id": {
                        "type": "string",
                        "minLength": 1,
                        "nullable": true
                    },
                    "board_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "workflow_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "title": {
                        "type": "string"
                    },
                    "owner_user_id": {
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "type_id": {
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "color": {
                        "type": "string"
                    },
                    "section": {
                        "format": "int",
                        "type": "integer"
                    },
                    "column_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "lane_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "position": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "description": {
                        "type": "string"
                    },
                    "size": {
                        "format": "double",
                        "type": "number"
                    },
                    "priority": {
                        "format": "int32",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 250,
                        "nullable": true
                    },
                    "deadline": {
                        "format": "date-time",
                        "type": "string",
                        "nullable": true
                    },
                    "reporter": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "value": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "revision": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "last_modified": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "in_current_position_since": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "is_blocked": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "block_reason": {
                        "oneOf": [
                            {
                                "$ref": "#\/components\/schemas\/BlockReason"
                            },
                            {
                                "nullable": true
                            }
                        ]
                    },
                    "child_card_stats": {
                        "type": "object",
                        "properties": {
                            "child_card_size_sum": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "finished_bottom_child_card_size_sum": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "unfinished_bottom_child_card_size_sum": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "has_unfinished_child_cards": {
                                "type": "boolean"
                            },
                            "last_unfinished_child_card_deadline": {
                                "format": "date-time",
                                "type": "string",
                                "nullable": true
                            }
                        }
                    },
                    "finished_subtask_count": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "unfinished_subtask_count": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardAttachment"
                        }
                    },
                    "custom_fields": {
                        "description": "A list of card custom field values.",
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataSingleLineWithFieldId"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataMultiLineWithFieldId"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataNumberWithFieldId"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataDateWithFieldId"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataLinkWithFieldId"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataDropdownWithFieldId"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataContributorWithFieldId"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataFileWithFieldId"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataVoteWithFieldId"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataCardPickerWithFieldId"
                                }
                            ]
                        }
                    },
                    "stickers": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardSticker"
                        }
                    },
                    "tag_ids": {
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "co_owner_ids": {
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "watchers_ids": {
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "annotations": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/Annotation"
                        }
                    },
                    "outcomes": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardOutcomeWithId"
                        }
                    },
                    "subtasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardSubtaskWithId"
                        }
                    },
                    "linked_cards": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "card_id": {
                                    "format": "int32",
                                    "type": "integer"
                                },
                                "link_type": {
                                    "type": "string",
                                    "enum": [
                                        "child",
                                        "parent",
                                        "relative",
                                        "predecessor",
                                        "successor"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "CardRevision": {
                "title": "Card",
                "description": "Card data",
                "type": "object",
                "properties": {
                    "card_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "custom_id": {
                        "type": "string",
                        "minLength": 1,
                        "nullable": true
                    },
                    "board_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "workflow_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "title": {
                        "type": "string"
                    },
                    "owner_user_id": {
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "type_id": {
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "color": {
                        "type": "string"
                    },
                    "section": {
                        "format": "int",
                        "type": "integer"
                    },
                    "column_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "lane_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "position": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "description": {
                        "type": "string"
                    },
                    "size": {
                        "format": "double",
                        "type": "number"
                    },
                    "priority": {
                        "format": "int32",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 250,
                        "nullable": true
                    },
                    "deadline": {
                        "format": "date-time",
                        "type": "string",
                        "nullable": true
                    },
                    "reporter": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "value": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "revision": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "in_current_position_since": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "is_blocked": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "block_reason": {
                        "oneOf": [
                            {
                                "$ref": "#\/components\/schemas\/BlockReason"
                            },
                            {
                                "nullable": true
                            }
                        ]
                    },
                    "child_card_stats": {
                        "type": "object",
                        "properties": {
                            "child_card_size_sum": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "finished_bottom_child_card_size_sum": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "unfinished_bottom_child_card_size_sum": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "has_unfinished_child_cards": {
                                "type": "boolean"
                            },
                            "last_unfinished_child_card_deadline": {
                                "format": "date-time",
                                "type": "string",
                                "nullable": true
                            }
                        }
                    },
                    "finished_subtask_count": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "unfinished_subtask_count": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardAttachment"
                        }
                    },
                    "custom_fields": {
                        "description": "A list of card custom field values.",
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataSingleLine"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataMultiLine"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataNumber"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataDate"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataLink"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataDropdown"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataContributor"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataFile"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataVote"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardCustomFieldDataCardPicker"
                                }
                            ]
                        }
                    },
                    "stickers": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardSticker"
                        }
                    },
                    "tag_ids": {
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "co_owner_ids": {
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "watchers_ids": {
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "annotations": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/Annotation"
                        }
                    },
                    "outcomes": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardOutcomeWithId"
                        }
                    },
                    "subtasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardSubtaskWithId"
                        }
                    },
                    "linked_cards": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "card_id": {
                                    "format": "int32",
                                    "type": "integer"
                                },
                                "link_type": {
                                    "type": "string",
                                    "enum": [
                                        "child",
                                        "parent",
                                        "relative",
                                        "predecessor",
                                        "successor"
                                    ]
                                }
                            }
                        }
                    },
                    "user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "replaced_at": {
                        "format": "date-time",
                        "type": "string"
                    }
                }
            },
            "CardCreateRequest": {
                "description": "Card data.",
                "type": "object",
                "properties": {
                    "template_id": {
                        "description": "The template id through which you can make a new card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "card_properties_to_copy": {
                        "description": "A list of card properties to copy.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CopyCardPropertiesRequest"
                        }
                    },
                    "custom_fields_to_copy": {
                        "description": "A list of custom fields to copy.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CopyCustomFieldsRequest"
                        }
                    },
                    "column_id": {
                        "description": "The column id of the new card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "lane_id": {
                        "description": "The lane id of the new card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "position": {
                        "description": "The position of the new card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "track": {
                        "description": "The track of the new card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "planned_start_date": {
                        "description": "The planened start date of the new card.",
                        "format": "date",
                        "type": "string"
                    },
                    "planned_end_date": {
                        "description": "The planened end date of the new card.",
                        "format": "date",
                        "type": "string"
                    },
                    "actual_start_time": {
                        "description": "The actual start time of the new card.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "actual_end_time": {
                        "description": "The actual end time of the new card.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "title": {
                        "description": "The title of the new card.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the new card.",
                        "type": "string"
                    },
                    "custom_id": {
                        "description": "The custom id of the new card.",
                        "type": "string",
                        "minLength": 1
                    },
                    "owner_user_id": {
                        "description": "The user id of assignee of the new card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "type_id": {
                        "description": "The type id of the new card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "size": {
                        "description": "The size of the new card.",
                        "format": "double",
                        "type": "number"
                    },
                    "priority": {
                        "description": "The priority of the new card.",
                        "format": "int32",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 250
                    },
                    "color": {
                        "description": "The color of the new card. 6 hexadecimal characters are expected.",
                        "type": "string"
                    },
                    "deadline": {
                        "description": "The deadline of the new card.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "reference": {
                        "description": "A reference that you can use if you need to find the exact new card in responce.",
                        "type": "string",
                        "minLength": 1
                    },
                    "block_reason": {
                        "$ref": "#\/components\/schemas\/CardBlockReasonSetRequest"
                    },
                    "stickers_to_add": {
                        "description": "A list of strickers which will be added to the new card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardStickerAddRequest"
                        }
                    },
                    "tag_ids_to_add": {
                        "description": "A list of tag ids which will be added to the new card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "tag_ids_to_remove": {
                        "description": "A list of tag ids which will be removed from the new card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "co_owner_ids_to_add": {
                        "description": "A list of co-owner ids which will be added to the new card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "co_owner_ids_to_remove": {
                        "description": "A list of co-owner ids which will be removed from the new card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "watcher_ids_to_add": {
                        "description": "A list of watcher ids which will be added to the new card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "watcher_ids_to_remove": {
                        "description": "A list of watcher ids which will be removed from the new card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "custom_fields_to_add_or_update": {
                        "description": "A list of custom fields which will be add or update for the new card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardCustomFieldWithIdAddOrUpdateRequest"
                        }
                    },
                    "custom_field_ids_to_remove": {
                        "description": "A list of custom field ids which will be removed from the new card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "attachments_to_add": {
                        "description": "A list of attachments which will be added to the new card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardAttachmentCreateRequest"
                        }
                    },
                    "subtasks_to_add": {
                        "description": "A list of subtasks which will be added to the new card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/SubtaskCreateRequest"
                        }
                    },
                    "column_checklist_items_to_check_or_update": {
                        "description": "A list of exit criteria.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardColumnChecklistItemWithIdAddOrUpdateRequest"
                        }
                    },
                    "annotations_to_add": {
                        "description": "A list of annotations which will be added to the new card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/AnnotationAddOrUpdateRequest"
                        }
                    },
                    "links_to_existing_cards_to_add_or_update": {
                        "description": "A list of links to existing cards which will be add or update.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/LinkAddOrUpdateRequest"
                        }
                    },
                    "links_to_new_cards_to_add": {
                        "description": "A list of links to new cards which will be added.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/LinkToNewCardToAddRequest"
                        }
                    },
                    "watch": {
                        "description": "When set to 1 the current user will become a card's watcher.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "default": 0
                    },
                    "created_at": {
                        "description": "The created date and time of the new card.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "is_archived": {
                        "description": "When set to 1 the card will be archived.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "default": 0
                    },
                    "version_id": {
                        "description": "The version id of the new card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "archived_at": {
                        "description": "The archived date and time of the new card. Different from discarded date and time;",
                        "format": "date-time",
                        "type": "string"
                    },
                    "is_discarded": {
                        "description": "When set to 1 the card will be discarded.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "default": 0
                    },
                    "discard_reason_id": {
                        "description": "The discarded reason id of the new card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "discard_comment": {
                        "description": "The discard comment of the new card.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "discarded_at": {
                        "description": "The discarded date and time of the new card. Different from archived date and time;",
                        "format": "date-time",
                        "type": "string"
                    }
                }
            },
            "CardUpdateWithCardIdRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "Card data",
                        "description": "Card data.",
                        "required": [
                            "card_id"
                        ],
                        "properties": {
                            "card_id": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardUpdateRequest"
                    }
                ]
            },
            "CardUpdateRequest": {
                "description": "Card data.",
                "type": "object",
                "properties": {
                    "column_id": {
                        "description": "The column id of the updated card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "lane_id": {
                        "description": "The lane id of the updated card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "position": {
                        "description": "The position of the updated card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "track": {
                        "description": "The track of the updated card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "planned_start_date": {
                        "description": "The planened start date of the updated card.",
                        "format": "date",
                        "type": "string"
                    },
                    "planned_end_date": {
                        "description": "The planened end date of the updated card.",
                        "format": "date",
                        "type": "string"
                    },
                    "actual_start_time": {
                        "description": "The actual start time of the updated card.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "actual_end_time": {
                        "description": "The actual end time of the updated card.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "title": {
                        "description": "The title of the updated card.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the updated card.",
                        "type": "string"
                    },
                    "custom_id": {
                        "description": "The custom id of the updated card.",
                        "type": "string",
                        "minLength": 1,
                        "nullable": true
                    },
                    "owner_user_id": {
                        "description": "The user id of assignee of the updated card.",
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "type_id": {
                        "description": "The type id of the updated card.",
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "size": {
                        "description": "The size of the updated card.",
                        "format": "double",
                        "type": "number",
                        "nullable": true
                    },
                    "priority": {
                        "description": "The priority of the updated card.",
                        "format": "int32",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 250,
                        "nullable": true
                    },
                    "color": {
                        "description": "The color of the updated card. 6 hexadecimal characters are expected.",
                        "type": "string"
                    },
                    "deadline": {
                        "description": "The deadline of the updated card.",
                        "format": "date-time",
                        "type": "string",
                        "nullable": true
                    },
                    "block_reason": {
                        "oneOf": [
                            {
                                "$ref": "#\/components\/schemas\/CardBlockReasonSetRequest"
                            },
                            {
                                "nullable": true
                            }
                        ]
                    },
                    "stickers_to_add": {
                        "description": "A list of strickers which will be added to the updated card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardStickerAddRequest"
                        }
                    },
                    "sticker_ids_to_remove": {
                        "description": "A list of stricker ids which will be removed from the updated card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "tag_ids_to_add": {
                        "description": "A list of tag ids which will be added to the updated card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "tag_ids_to_remove": {
                        "description": "A list of tag ids which will be removed from the updated card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "co_owner_ids_to_add": {
                        "description": "A list of co-owner ids which will be added to the updated card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "co_owner_ids_to_remove": {
                        "description": "A list of co-owner ids which will be removed from the updated card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "watcher_ids_to_add": {
                        "description": "A list of watcher ids which will be added to the updated card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "watcher_ids_to_remove": {
                        "description": "A list of watcher ids which will be removed from the updated card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "custom_fields_to_add_or_update": {
                        "description": "A list of custom fields which will be add or update to the updated card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardCustomFieldWithIdAddOrUpdateRequest"
                        }
                    },
                    "custom_field_ids_to_remove": {
                        "description": "A list of custom field ids which will be removed from the updated card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "attachments_to_add": {
                        "description": "A list of attachments which will be added to the updated card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardAttachmentCreateRequest"
                        }
                    },
                    "attachments_to_update": {
                        "description": "A list of attachments which will be updated for the updated card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardAttachmentWithIdUpdateRequest"
                        }
                    },
                    "attachment_ids_to_remove": {
                        "description": "A list of attachment ids which will be removed from the updated card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "subtasks_to_add": {
                        "description": "A list of subtasks which will be added to the updated card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/SubtaskCreateRequest"
                        }
                    },
                    "subtasks_to_update": {
                        "description": "A list of subtasks which will be updated for the updated card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/SubtaskWithIdUpdateRequest"
                        }
                    },
                    "subtasks_to_convert_into_cards": {
                        "description": "A list of subtasks which will be convert into cards.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/SubtaskWithIdConvertIntoCardRequest"
                        }
                    },
                    "subtask_ids_to_remove": {
                        "description": "A list of subtask ids which will be removed from the updated card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "column_checklist_items_to_check_or_update": {
                        "description": "A list of exit criteria.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardColumnChecklistItemWithIdAddOrUpdateRequest"
                        }
                    },
                    "column_checklist_item_ids_to_uncheck": {
                        "description": "A list of exit criteria ids which will be uncheck for the updated card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "annotations_to_add": {
                        "description": "A list of annotations which will be added to the updated card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/AnnotationAddOrUpdateRequest"
                        }
                    },
                    "annotations_to_update": {
                        "description": "A list of annotations which will be updated for the updated card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/AnnotationAddOrUpdateRequest"
                        }
                    },
                    "annotations_to_remove": {
                        "description": "A list of annotations which will be removed from the updated card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/AnnotationRemoveRequest"
                        }
                    },
                    "links_to_existing_cards_to_add_or_update": {
                        "description": "A list of links to existing cards which will be add or update.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/LinkAddOrUpdateRequest"
                        }
                    },
                    "links_to_existing_cards_to_remove": {
                        "description": "A list of links to existing cards which will be remove.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/LinkRemoveRequest"
                        }
                    },
                    "links_to_new_cards_to_add": {
                        "description": "A list of links to new cards which will be added.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/LinkToNewCardToAddRequest"
                        }
                    },
                    "watch": {
                        "description": "When set to 1 the current user will become a card's watcher.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "default": 0
                    },
                    "is_archived": {
                        "description": "When set to 1 the card will be archived.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "version_id": {
                        "description": "The version id of the updated card.",
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "is_discarded": {
                        "description": "When set to 1 the card will be discarded.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "discard_reason_id": {
                        "description": "The discarded reason id of the updated card.",
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "discard_comment": {
                        "description": "The discard comment of th updated card.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250,
                        "nullable": true
                    }
                }
            },
            "CardCustomFieldAddOrUpdateRequest": {
                "description": "Cards custom field data.",
                "type": "object",
                "properties": {
                    "value": {
                        "description": "The value of custom field.",
                        "type": "string",
                        "nullable": true
                    },
                    "selected_values_to_add_or_update": {
                        "description": "A list of selected values to add or update.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardCustomFieldSelectedValueAddOrUpdateRequest"
                        }
                    },
                    "selected_value_ids_to_remove": {
                        "description": "A list of selected values to remove.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "other_value": {
                        "description": "The other value of custom field.",
                        "type": "string",
                        "nullable": true
                    },
                    "contributor_ids_to_add": {
                        "description": "The contributor ids which will be added to card custom field.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "contributor_ids_to_remove": {
                        "description": "The contributor ids which will be removed from card custom field.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "files_to_add": {
                        "description": "A list of files to add.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardCustomFieldFileCreateRequest"
                        }
                    },
                    "files_to_update": {
                        "description": "A list of files to update.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardCustomFieldFileWithIdUpdateRequest"
                        }
                    },
                    "file_ids_to_remove": {
                        "description": "A list of file ids to remove.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "vote": {
                        "description": "Your vote.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "nullable": true
                    },
                    "comment": {
                        "description": "A comment about your vote.",
                        "type": "string",
                        "nullable": true
                    },
                    "selected_cards_to_add_or_update": {
                        "description": "A list of the selected card ids for the custom field to add or update.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardCustomFieldSelectedCardAddOrUpdateRequest"
                        }
                    },
                    "selected_card_ids_to_remove": {
                        "description": "A list of the selected card ids for the custom field to remove.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    }
                }
            },
            "CardCustomFieldWithIdAddOrUpdateRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "Card custom field data",
                        "description": "Card custom field data.",
                        "required": [
                            "field_id"
                        ],
                        "properties": {
                            "field_id": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardCustomFieldAddOrUpdateRequest"
                    }
                ]
            },
            "CardCustomFieldSelectedValueAddOrUpdateRequest": {
                "description": "Card custom field selected value data.",
                "type": "object",
                "required": [
                    "value_id"
                ],
                "properties": {
                    "value_id": {
                        "description": "The id of \u0430 selected value of the custom field.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "position": {
                        "description": "The position of the value within the list of selected values.",
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardCustomFieldFileCreateRequest": {
                "description": "Card custom field file data.",
                "type": "object",
                "required": [
                    "file_name",
                    "link"
                ],
                "properties": {
                    "file_name": {
                        "description": "The name of the file.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "link": {
                        "description": "The link to the file.",
                        "type": "string"
                    },
                    "position": {
                        "description": "The position of the file within the list of files.",
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardCustomFieldFileUpdateRequest": {
                "description": "Card custom field file data.",
                "type": "object",
                "properties": {
                    "file_name": {
                        "description": "The name of the file.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "link": {
                        "description": "The link to the file.",
                        "type": "string"
                    },
                    "position": {
                        "description": "The position of the file within the list of files.",
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardCustomFieldFileWithIdUpdateRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "Card custom field file data",
                        "description": "Card custom field file data.",
                        "required": [
                            "id"
                        ],
                        "properties": {
                            "id": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardCustomFieldFileUpdateRequest"
                    }
                ]
            },
            "CardCustomFieldSelectedCardAddOrUpdateRequest": {
                "description": "Card custom field selected card data.",
                "type": "object",
                "properties": {
                    "selected_card_id": {
                        "description": "The id of the selected card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "position": {
                        "description": "The position of the card within the list of selected cards.",
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CopyCardPropertiesRequest": {
                "description": "Card properties to copy.",
                "type": "object",
                "required": [
                    "properties",
                    "card_id"
                ],
                "properties": {
                    "properties": {
                        "description": "A list of card properties.",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "position",
                                "title",
                                "description",
                                "custom_id",
                                "owner",
                                "type",
                                "size",
                                "priority",
                                "color",
                                "deadline",
                                "block_reason",
                                "stickers",
                                "tags",
                                "contributors",
                                "custom_fields",
                                "attachments",
                                "subtasks",
                                "unfinished_subtasks",
                                "annotations",
                                "comments",
                                "parents"
                            ]
                        }
                    },
                    "card_id": {
                        "description": "A card id.",
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CopyCustomFieldsRequest": {
                "description": "Custom fields to copy.",
                "type": "object",
                "required": [
                    "field_ids",
                    "card_id"
                ],
                "properties": {
                    "field_ids": {
                        "description": "A list of custom field ids.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "card_id": {
                        "description": "A card id.",
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardBlockReasonSetRequest": {
                "description": "Card block reason data.",
                "type": "object",
                "properties": {
                    "reason_id": {
                        "description": "The reason id of the block reason.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "comment": {
                        "description": "The comment of the block reason.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "users": {
                        "description": "A list of user ids.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "date": {
                        "description": "Date.",
                        "format": "date",
                        "type": "string"
                    },
                    "cards": {
                        "description": "A list of card ids.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    }
                }
            },
            "CardStickerAddRequest": {
                "description": "Card stricker data.",
                "type": "object",
                "required": [
                    "sticker_id"
                ],
                "properties": {
                    "sticker_id": {
                        "description": "The sticker id of the sticker.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "if_not_present": {
                        "description": "When set to 1 the card is already has that sticker.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "default": 0
                    }
                }
            },
            "CardAttachmentCreateRequest": {
                "description": "Card attachment data.",
                "type": "object",
                "required": [
                    "file_name",
                    "link"
                ],
                "properties": {
                    "file_name": {
                        "description": "The attachment file name.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "link": {
                        "description": "The attachment file link.",
                        "type": "string"
                    },
                    "position": {
                        "description": "The attachment position.",
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardAttachmentUpdateRequest": {
                "description": "Card attachment data.",
                "type": "object",
                "required": [
                    "file_name",
                    "link"
                ],
                "properties": {
                    "file_name": {
                        "description": "The attachment file name.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "link": {
                        "description": "The attachment file link.",
                        "type": "string"
                    },
                    "position": {
                        "description": "The attachment position.",
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardAttachmentWithIdUpdateRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "Card attachment data",
                        "description": "Card attachment data.",
                        "required": [
                            "id"
                        ],
                        "properties": {
                            "id": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardAttachmentUpdateRequest"
                    }
                ]
            },
            "CommentCreateRequest": {
                "description": "Comment data.",
                "type": "object",
                "properties": {
                    "text": {
                        "description": "A comment text.",
                        "type": "string",
                        "default": null
                    },
                    "attachments_to_add": {
                        "description": "A list of attachments which will be added to the new comment.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CommentAttachmentCreateRequest"
                        }
                    }
                }
            },
            "CommentUpdateRequest": {
                "description": "Subtask data.",
                "type": "object",
                "properties": {
                    "text": {
                        "description": "A comment text.",
                        "type": "string"
                    },
                    "attachments_to_add": {
                        "description": "A list of attachments to add.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CommentAttachmentCreateRequest"
                        }
                    },
                    "attachment_ids_to_remove": {
                        "description": "A list of attachments to remove.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    }
                }
            },
            "CommentAttachmentCreateRequest": {
                "description": "Comment attachment data.",
                "type": "object",
                "required": [
                    "file_name",
                    "link"
                ],
                "properties": {
                    "file_name": {
                        "description": "The attachment file name.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "link": {
                        "description": "The attachment file link.",
                        "type": "string"
                    }
                }
            },
            "CardOutcomeCreateRequest": {
                "description": "Card outcome data.",
                "type": "object",
                "required": [
                    "operator"
                ],
                "properties": {
                    "starting_value": {
                        "description": "Starting value",
                        "format": "double",
                        "type": "number",
                        "minimum": -1000000000000000,
                        "maximum": 1000000000000000
                    },
                    "target_value": {
                        "description": "Target value",
                        "format": "double",
                        "type": "number",
                        "minimum": -1000000000000000,
                        "maximum": 1000000000000000
                    },
                    "operator": {
                        "description": "Operator",
                        "type": "string",
                        "enum": [
                            "or_less",
                            "or_more"
                        ]
                    },
                    "comment": {
                        "description": "An outcome comment.",
                        "type": "string",
                        "default": null
                    },
                    "weight": {
                        "description": "Weight",
                        "format": "int32",
                        "type": "integer",
                        "default": 1
                    },
                    "field_id": {
                        "description": "Field id",
                        "format": "int32",
                        "type": "integer"
                    },
                    "checkpoints_to_add": {
                        "description": "A list of checkpoints to add.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardOutcomeCheckpointCreateRequest"
                        }
                    }
                }
            },
            "CardOutcomeCheckpointCreateRequest": {
                "description": "Card outcome checkpoint data.",
                "type": "object",
                "required": [
                    "time",
                    "name",
                    "value"
                ],
                "properties": {
                    "time": {
                        "description": "Time",
                        "format": "date-time",
                        "type": "string"
                    },
                    "name": {
                        "description": "The checkpoint name.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "value": {
                        "description": "Value",
                        "format": "double",
                        "type": "number",
                        "minimum": -1000000000000000,
                        "maximum": 1000000000000000
                    }
                }
            },
            "CardOutcomeValueCreateRequest": {
                "description": "Card outcome value data.",
                "type": "object",
                "required": [
                    "value"
                ],
                "properties": {
                    "value": {
                        "description": "Value",
                        "format": "double",
                        "type": "number",
                        "minimum": -1000000000000000,
                        "maximum": 1000000000000000
                    },
                    "time": {
                        "description": "Time",
                        "format": "date-time",
                        "type": "string"
                    }
                }
            },
            "CardOutcometWithIdUpdateRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "Card outcome data",
                        "description": "Card outcome data.",
                        "required": [
                            "id"
                        ],
                        "properties": {
                            "id": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardOutcomeUpdateRequest"
                    }
                ]
            },
            "CardOutcomeUpdateRequest": {
                "description": "Card outcome data.",
                "type": "object",
                "properties": {
                    "starting_value": {
                        "format": "double",
                        "type": "number",
                        "minimum": -1000000000000000,
                        "maximum": 1000000000000000,
                        "nullable": true
                    },
                    "target_value": {
                        "format": "double",
                        "type": "number",
                        "minimum": -1000000000000000,
                        "maximum": 1000000000000000,
                        "nullable": true
                    },
                    "operator": {
                        "type": "string",
                        "enum": [
                            "or_less",
                            "or_more"
                        ]
                    },
                    "comment": {
                        "type": "string"
                    },
                    "weight": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "checkpoints_to_add": {
                        "description": "A list of checkpoints to add.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardOutcomeCheckpointCreateRequest"
                        }
                    },
                    "checkpoints_to_update": {
                        "description": "A list of checkpoints to update.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardOutcomeCheckpointWithIdUpdateRequest"
                        }
                    },
                    "checkpoint_ids_to_remove": {
                        "description": "A list of checkpoints to remove.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    }
                }
            },
            "CardOutcomeCheckpointWithIdUpdateRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "Card outcome checkpoint data",
                        "description": "Card outcome checkpoint data.",
                        "required": [
                            "id"
                        ],
                        "properties": {
                            "id": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardOutcomeCheckpointUpdateRequest"
                    }
                ]
            },
            "CardOutcomeCheckpointUpdateRequest": {
                "description": "Card outcome checkpoint data.",
                "type": "object",
                "properties": {
                    "time": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "name": {
                        "description": "The checkpoint name.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "value": {
                        "description": "Value",
                        "format": "double",
                        "type": "number",
                        "minimum": -1000000000000000,
                        "maximum": 1000000000000000
                    }
                }
            },
            "CardOutcomeValueWithIdUpdateRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "Card outcome value data",
                        "description": "Card outcome value data.",
                        "required": [
                            "id"
                        ],
                        "properties": {
                            "id": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardOutcomeValueUpdateRequest"
                    }
                ]
            },
            "CardOutcomeValueUpdateRequest": {
                "description": "Card outcome value data.",
                "type": "object",
                "properties": {
                    "value": {
                        "description": "Value",
                        "format": "double",
                        "type": "number",
                        "minimum": -1000000000000000,
                        "maximum": 1000000000000000
                    },
                    "time": {
                        "format": "date-time",
                        "type": "string"
                    }
                }
            },
            "SubtaskCreateRequest": {
                "description": "Subtask data.",
                "type": "object",
                "required": [
                    "description"
                ],
                "properties": {
                    "description": {
                        "description": "A subtask description.",
                        "type": "string",
                        "minLength": 1
                    },
                    "owner_user_id": {
                        "description": "A user id of the assignee.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "is_finished": {
                        "description": "When set to 1 the subtask is already finished.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "default": 0
                    },
                    "position": {
                        "description": "The subtask position.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "attachments_to_add": {
                        "description": "A list of attachments which will be added to the new subtask.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardAttachmentCreateRequest"
                        }
                    }
                }
            },
            "SubtaskUpdateRequest": {
                "description": "Subtask data.",
                "type": "object",
                "properties": {
                    "description": {
                        "description": "A subtask description.",
                        "type": "string",
                        "minLength": 1
                    },
                    "owner_user_id": {
                        "description": "A user id of the assignee.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "is_finished": {
                        "description": "When set to 1 the subtask is already finished.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "default": 0
                    },
                    "position": {
                        "description": "The subtask position.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "attachments_to_add": {
                        "description": "A list of attachments to add.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardAttachmentCreateRequest"
                        }
                    },
                    "attachments_to_update": {
                        "description": "A list of attachments to update.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardAttachmentWithIdUpdateRequest"
                        }
                    },
                    "attachment_ids_to_remove": {
                        "description": "A list of attachments to remove.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    }
                }
            },
            "SubtaskWithIdUpdateRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "Subtask data - subtask_id",
                        "description": "Subtask data - subtask_id",
                        "required": [
                            "subtask_id"
                        ],
                        "properties": {
                            "subtask_id": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/SubtaskUpdateRequest"
                    }
                ]
            },
            "SubtaskConvertIntoCardRequest": {
                "description": "Subtask convert into card data.",
                "type": "object",
                "required": [
                    "subtask_id"
                ],
                "properties": {
                    "subtask_id": {
                        "description": "The subtask id of the converted subtask into card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "column_id": {
                        "description": "The column id of the converted subtask into card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "lane_id": {
                        "description": "The lane id of the converted subtask into card.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "position": {
                        "description": "The position of the converted subtask into card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "track": {
                        "description": "The track of the converted subtask into card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "planned_start_date": {
                        "description": "The planened start date of the converted subtask into card.",
                        "type": "string",
                        "format": "date"
                    },
                    "planned_end_date": {
                        "description": "The planened end date of the converted subtask into card.",
                        "type": "string",
                        "format": "date"
                    },
                    "actual_start_time": {
                        "description": "The actual start time of the converted subtask into card.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "actual_end_time": {
                        "description": "The actual end time of the converted subtask into card.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "title": {
                        "description": "The title of the converted subtask into card.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the converted subtask into card.",
                        "type": "string"
                    },
                    "custom_id": {
                        "description": "The custom id of the converted subtask into card.",
                        "type": "string",
                        "minLength": 1
                    },
                    "owner_user_id": {
                        "description": "The user id of assignee of the converted subtask into card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "type_id": {
                        "description": "The type id of the converted subtask into card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "size": {
                        "description": "The size of the converted subtask into card.",
                        "format": "double",
                        "type": "number"
                    },
                    "priority": {
                        "description": "The priority of the converted subtask into card.",
                        "format": "int32",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 250
                    },
                    "color": {
                        "description": "The color of the converted subtask into card. 6 hexadecimal characters are expected.",
                        "type": "string"
                    },
                    "deadline": {
                        "description": "The deadline of the converted subtask into card.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "reference": {
                        "description": "The reference of converted subtask into card that you can use if you need to find the exact new card in responce.",
                        "type": "string",
                        "minLength": 1
                    },
                    "block_reason": {
                        "$ref": "#\/components\/schemas\/CardBlockReasonSetRequest"
                    },
                    "stickers_to_add": {
                        "description": "A list of strickers which will be added to the converted subtask into card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardStickerAddRequest"
                        }
                    },
                    "tag_ids_to_add": {
                        "description": "The tag with ids which will be added to the converted subtask into card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "co_owner_ids_to_add": {
                        "description": "The co-owner ids which will be added to converted subtask into card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "watcher_ids_to_add": {
                        "description": "The watcher ids which will be added to the converted subtask into card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "custom_fields_to_add_or_update": {
                        "description": "A list of custom fields will be added or updated for the converted subtask into card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardCustomFieldWithIdAddOrUpdateRequest"
                        }
                    },
                    "attachments_to_add": {
                        "description": "A list of attachments which will be added to the converted subtask into card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardAttachmentCreateRequest"
                        }
                    },
                    "attachments_to_update": {
                        "description": "A list of attachments which will be updated to the converted subtask into card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardAttachmentWithIdUpdateRequest"
                        }
                    },
                    "attachment_ids_to_remove": {
                        "description": "A list of attachments which will be removed from the converted subtask into card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "subtasks_to_add": {
                        "description": "A list of subtasks which will be added to the converted subtask into card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/SubtaskCreateRequest"
                        }
                    },
                    "column_checklist_items_to_check_or_update": {
                        "description": "A list of exit criteria.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardColumnChecklistItemWithIdAddOrUpdateRequest"
                        }
                    },
                    "links_to_existing_cards_to_add_or_update": {
                        "description": "A list of links to existing cards which will be add or update.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/LinkAddOrUpdateRequest"
                        }
                    },
                    "links_to_new_cards_to_add": {
                        "description": "A list of links to new cards which will be added.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/LinkToNewCardToAddRequest"
                        }
                    },
                    "watch": {
                        "description": "When set to 1 the current user will become a card's watcher.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "default": 0
                    }
                }
            },
            "SubtaskWithIdConvertIntoCardRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "Subtask data",
                        "description": "Subtask data.",
                        "required": [
                            "subtask_id"
                        ],
                        "properties": {
                            "subtask_id": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/SubtaskConvertIntoCardRequest"
                    }
                ]
            },
            "LinkAddOrUpdateRequest": {
                "description": "Link data.",
                "type": "object",
                "properties": {
                    "linked_card_id": {
                        "description": "The card id of the linked card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "link_type": {
                        "description": "The link type.",
                        "type": "string",
                        "enum": [
                            "parent",
                            "child",
                            "relative",
                            "predecessor",
                            "successor"
                        ]
                    },
                    "linked_card_position": {
                        "description": "The position of the linked card within the card's list of linked cards.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "card_position": {
                        "description": "The position of the card within the link card's list of linked cards.",
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "LinkRemoveRequest": {
                "description": "Link data",
                "type": "object",
                "required": [
                    "linked_card_id",
                    "link_type"
                ],
                "properties": {
                    "linked_card_id": {
                        "description": "The card id of the linked card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "link_type": {
                        "description": "The link type.",
                        "type": "string",
                        "enum": [
                            "parent",
                            "child",
                            "relative",
                            "predecessor",
                            "successor"
                        ]
                    }
                }
            },
            "LinkToNewCardToAddRequest": {
                "description": "Link data.",
                "type": "object",
                "required": [
                    "linked_new_card_reference",
                    "link_type"
                ],
                "properties": {
                    "linked_new_card_reference": {
                        "description": "The new card's reference of the linked card.",
                        "type": "string",
                        "minLength": 1
                    },
                    "link_type": {
                        "description": "The link type.",
                        "type": "string",
                        "enum": [
                            "parent",
                            "child",
                            "relative",
                            "predecessor",
                            "successor"
                        ]
                    },
                    "linked_card_position": {
                        "description": "The position of the linked card within the card's list of linked cards.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "card_position": {
                        "description": "The position of the card within the link card's list of linked cards.",
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardColumnChecklistItemAddOrUpdateRequest": {
                "description": "Card exit criterion data.",
                "type": "object",
                "properties": {
                    "comment": {
                        "description": "The comment of the exit criterion.",
                        "type": "string",
                        "maxLength": 65000
                    }
                }
            },
            "CardColumnChecklistItemWithIdAddOrUpdateRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "Card exit criterion data",
                        "description": "Card exit criterion data.",
                        "required": [
                            "item_id"
                        ],
                        "properties": {
                            "item_id": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardColumnChecklistItemAddOrUpdateRequest"
                    }
                ]
            },
            "Annotation": {
                "description": "Anotation data",
                "type": "object",
                "properties": {
                    "thread_id": {
                        "type": "string"
                    },
                    "comment_id": {
                        "type": "string"
                    },
                    "author_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "content": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 128
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string"
                    }
                }
            },
            "AnnotationAddOrUpdateRequest": {
                "description": "Annotation data.",
                "type": "object",
                "required": [
                    "comment_id",
                    "thread_id",
                    "content"
                ],
                "properties": {
                    "comment_id": {
                        "description": "The comment id of the annotation. This is a random string submitted by the user on create of an annotation.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 128
                    },
                    "thread_id": {
                        "description": "The thread id of the annotation. This is a random string submitted by the user on create of an annotation.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 128
                    },
                    "content": {
                        "description": "The value of the annotation.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 128
                    }
                }
            },
            "AnnotationRemoveRequest": {
                "description": "Annotation data.",
                "type": "object",
                "required": [
                    "comment_id",
                    "thread_id"
                ],
                "properties": {
                    "comment_id": {
                        "description": "The comment id of the annotation.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 128
                    },
                    "thread_id": {
                        "description": "The thread id of the annotation.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 128
                    }
                }
            },
            "CardType": {
                "title": "Card type",
                "description": "Card type data",
                "type": "object",
                "properties": {
                    "type_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "icon_type": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "icon_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "description": {
                        "type": "string"
                    },
                    "color": {
                        "type": "string"
                    },
                    "card_color_sync": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "all_properties_are_locked": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "availability": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1,
                            2
                        ]
                    },
                    "is_enabled": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    }
                }
            },
            "CardTemplate": {
                "title": "Card template",
                "description": "Card template data",
                "type": "object",
                "properties": {
                    "template_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "primary_template_card_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "availability": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1,
                            2
                        ],
                        "default": 0
                    },
                    "is_enabled": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "default": 1
                    },
                    "template_cards": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateCard"
                        }
                    }
                }
            },
            "CardTemplateCreateRequest": {
                "description": "Card template data.",
                "type": "object",
                "required": [
                    "name",
                    "primary_card",
                    "other_cards"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the new card template.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "description": {
                        "description": "The description of the new card template.",
                        "type": "string",
                        "default": null
                    },
                    "availability": {
                        "description": "When set to 0 the card template has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the card template is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the card template is added automatically to all boards and cannot be removed.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1,
                            2
                        ],
                        "default": 0
                    },
                    "is_enabled": {
                        "description": "Controls whether this card template is enabled.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "default": 1
                    },
                    "primary_card": {
                        "$ref": "#\/components\/schemas\/CardTemplatePrimaryCardCreateRequest"
                    },
                    "other_cards": {
                        "description": "A list of cards for the new card template.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateCardCreateRequest"
                        }
                    }
                }
            },
            "CardTemplateUpdateRequest": {
                "description": "Card template data.",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name of the updated card template.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "description": {
                        "description": "The description of the updated card template.",
                        "type": "string"
                    },
                    "availability": {
                        "description": "When set to 0 the card template has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the card template is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the card template is added automatically to all boards and cannot be removed.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1,
                            2
                        ]
                    },
                    "is_enabled": {
                        "description": "Controls whether this card template is enabled.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "cards_to_add": {
                        "description": "A list of cards which will be added to the card template.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateCardInExistingTemplateCreateRequest"
                        }
                    },
                    "cards_to_update": {
                        "description": "A list of cards which will be updated for the updated card template.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateCardWithIdUpdateRequest"
                        }
                    },
                    "card_ids_to_remove": {
                        "description": "A list of card ids to remove.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    }
                }
            },
            "CardTemplateCard": {
                "description": "Card data for a card template.",
                "type": "object",
                "properties": {
                    "template_card_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "custom_id": {
                        "type": "string",
                        "minLength": 1,
                        "nullable": true
                    },
                    "owner_user_id": {
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "type_id": {
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "size": {
                        "format": "double",
                        "type": "number",
                        "nullable": true
                    },
                    "priority": {
                        "format": "int32",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 250,
                        "nullable": true
                    },
                    "color": {
                        "type": "string",
                        "nullable": true
                    },
                    "deadline": {
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardAttachment"
                        }
                    },
                    "subtasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateCardSubtask"
                        }
                    },
                    "custom_fields": {
                        "description": "A list of card custom field values.",
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataSingleLine"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataMultiLine"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataNumber"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataDate"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataLink"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataDropdown"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataContributor"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataFile"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataVote"
                                },
                                {
                                    "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataCardPicker"
                                }
                            ]
                        }
                    },
                    "stickers": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateCardSticker"
                        }
                    },
                    "tag_ids": {
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "co_owner_ids": {
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "watcher_ids": {
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "annotations": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/Annotation"
                        }
                    },
                    "linked_cards": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "template_card_id": {
                                    "format": "int32",
                                    "type": "integer"
                                },
                                "link_type": {
                                    "type": "string",
                                    "enum": [
                                        "child",
                                        "parent",
                                        "relative",
                                        "predecessor",
                                        "successor"
                                    ]
                                },
                                "position": {
                                    "format": "int32",
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            },
            "CardTemplateCardSubtask": {
                "description": "Card subtask data for a card template.",
                "type": "object",
                "required": [
                    "description"
                ],
                "properties": {
                    "template_subtask_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "description": {
                        "type": "string",
                        "minLength": 1
                    },
                    "owner_user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardAttachment"
                        }
                    }
                }
            },
            "CardTemplateCardSubtaskWithPosition": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCardSubtask"
                    },
                    {
                        "type": "object",
                        "description": "Card subtask data with included position value for a card template.",
                        "properties": {
                            "position": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                ]
            },
            "CardTemplateCardSticker": {
                "description": "Card sticker data for a card template.",
                "type": "object",
                "properties": {
                    "id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "sticker_id": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardTemplatePrimaryCardCreateRequest": {
                "description": "Primary card data for a card template.",
                "type": "object",
                "properties": {
                    "title": {
                        "description": "The title of the new card.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the new card.",
                        "type": "string"
                    },
                    "custom_id": {
                        "description": "The custom id of the new card.",
                        "type": "string",
                        "minLength": 1,
                        "nullable": true
                    },
                    "owner_user_id": {
                        "description": "A user id of the assignee.",
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "type_id": {
                        "description": "The type id of the new card.",
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "size": {
                        "description": "The size id of the new card.",
                        "format": "double",
                        "type": "number",
                        "nullable": true
                    },
                    "priority": {
                        "description": "The priority id of the new card.",
                        "format": "int32",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 250,
                        "nullable": true
                    },
                    "color": {
                        "description": "The color of the new card. 6 hexadecimal characters are expected.",
                        "type": "string",
                        "nullable": true
                    },
                    "deadline": {
                        "description": "The deadline of the new card.",
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "reference": {
                        "description": "A reference that you can use if you need to find the exact new card in responce.",
                        "type": "string",
                        "minLength": 1
                    },
                    "stickers_to_add": {
                        "description": "A list of strickers which will be added to the new card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateStickerAddRequest"
                        }
                    },
                    "tag_ids_to_add": {
                        "description": "A list of tag ids which will be removed from the new card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "co_owner_ids_to_add": {
                        "description": "A list of co-owner ids which will be added to the new card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "watcher_ids_to_add": {
                        "description": "A list of watcher ids which will be added to the new card.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "custom_fields_to_add_or_update": {
                        "description": "A list of custom fields which will be add or update for the new card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateCustomFieldWithIdAddOrUpdateRequest"
                        }
                    },
                    "attachments_to_add": {
                        "description": "A list of attachments which will be added to the new card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateAttachmentCreateRequest"
                        }
                    },
                    "subtasks_to_add": {
                        "description": "A list of subtasks which will be added to the new card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateSubtaskCreateRequest"
                        }
                    },
                    "annotations_to_add": {
                        "description": "A list of annotations which will be added to the new card.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/AnnotationAddOrUpdateRequest"
                        }
                    },
                    "links_to_new_template_cards_to_add": {
                        "description": "A list of links to new cards which will be added.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateLinkToNewTemplateCardToAddRequest"
                        }
                    }
                }
            },
            "CardTemplateCardCreateRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "description": "Card data for a card template.",
                        "required": [
                            "column_id",
                            "lane_id"
                        ],
                        "properties": {
                            "column_id": {
                                "description": "The column id of the new card.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "lane_id": {
                                "description": "The lane id of the new card.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "position": {
                                "description": "The position of the new card.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardTemplatePrimaryCardCreateRequest"
                    }
                ]
            },
            "CardTemplateCardUpdateRequest": {
                "description": "Card template data.",
                "type": "object",
                "properties": {
                    "column_id": {
                        "description": "The column id of the updated card of card template.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "lane_id": {
                        "description": "The lane id of the updated card of card template.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "position": {
                        "description": "The position of the updated card of card template.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "title": {
                        "description": "The title of the updated card of card template.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the updated card of card template.",
                        "type": "string"
                    },
                    "custom_id": {
                        "description": "The custom id of the updated card of card template.",
                        "type": "string",
                        "minLength": 1,
                        "nullable": true
                    },
                    "owner_user_id": {
                        "description": "The user id of assignee of the updated card of card template.",
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "type_id": {
                        "description": "The type id of the updated card of card template.",
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "size": {
                        "description": "The size of the updated card of card template.",
                        "format": "double",
                        "type": "number",
                        "nullable": true
                    },
                    "priority": {
                        "description": "The priority of the updated card of card template.",
                        "format": "int32",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 250,
                        "nullable": true
                    },
                    "color": {
                        "description": "The color of the updated card of card template. 6 hexadecimal characters are expected.",
                        "type": "string",
                        "nullable": true
                    },
                    "deadline": {
                        "description": "The deadline of the updated card of card template.",
                        "format": "date-time",
                        "type": "string",
                        "nullable": true
                    },
                    "stickers_to_add": {
                        "description": "A list of strickers which will be added to the updated card of card template.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateStickerAddRequest"
                        }
                    },
                    "sticker_ids_to_remove": {
                        "description": "A list of stricker ids which will be removed from the updated card of card template.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "tag_ids_to_add": {
                        "description": "A list of tag ids which will be added to the updated card of card template.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "tag_ids_to_remove": {
                        "description": "A list of tag ids which will be removed from the updated card of card template.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "co_owner_ids_to_add": {
                        "description": "A list of co-owner ids which will be added to the updated card of card template.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "co_owner_ids_to_remove": {
                        "description": "A list of co-owner ids which will be removed from the updated card of card template.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "watcher_ids_to_add": {
                        "description": "A list of watcher ids which will be added to the updated card of card template.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "watcher_ids_to_remove": {
                        "description": "A list of watcher ids which will be removed from the updated card of card template.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "custom_fields_to_add_or_update": {
                        "description": "A list of custom fields which will be add or update to the updated card of card template.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateCustomFieldWithIdAddOrUpdateRequest"
                        }
                    },
                    "custom_field_ids_to_remove": {
                        "description": "A list of custom field ids which will be removed from the updated card of card template.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "attachments_to_add": {
                        "description": "A list of attachments which will be added to the updated card of card template.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateAttachmentCreateRequest"
                        }
                    },
                    "attachments_to_update": {
                        "description": "A list of attachments which will be updated for the updated card of card template.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateAttachmentWithIdUpdateRequest"
                        }
                    },
                    "attachment_ids_to_remove": {
                        "description": "A list of attachment ids which will be removed from the updated card of card template.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "subtasks_to_add": {
                        "description": "A list of subtasks which will be added to the updated card of card template.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateSubtaskCreateRequest"
                        }
                    },
                    "subtasks_to_update": {
                        "description": "A list of subtasks which will be updated for the updated card of card template.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateSubtaskWithIdUpdateRequest"
                        }
                    },
                    "subtask_ids_to_remove": {
                        "description": "A list of subtask ids which will be removed from the updated card of card template.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "annotations_to_add": {
                        "description": "A list of annotations which will be added to the updated card of card template.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/AnnotationAddOrUpdateRequest"
                        }
                    },
                    "annotations_to_update": {
                        "description": "A list of annotations which will be updated for the updated card of card template.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/AnnotationAddOrUpdateRequest"
                        }
                    },
                    "annotations_to_remove": {
                        "description": "A list of annotations which will be removed from the updated card of card template.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/AnnotationRemoveRequest"
                        }
                    },
                    "links_to_existing_template_cards_to_add_or_update": {
                        "description": "A list of links to existing cards which will be add or update.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateLinkAddOrUpdateRequest"
                        }
                    },
                    "links_to_existing_template_cards_to_remove": {
                        "description": "A list of links to existing cards which will be remove.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateLinkRemoveRequest"
                        }
                    },
                    "links_to_new_template_cards_to_add": {
                        "description": "A list of links to existing cards which will be remove.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateLinkToNewTemplateCardToAddRequest"
                        }
                    }
                }
            },
            "CardTemplateCardInExistingTemplateCreateRequest": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCardCreateRequest"
                    },
                    {
                        "type": "object",
                        "title": "Card template link data",
                        "description": "Card template link data",
                        "properties": {
                            "links_to_existing_template_cards_to_add_or_update": {
                                "type": "array",
                                "items": {
                                    "$ref": "#\/components\/schemas\/CardTemplateLinkAddOrUpdateRequest"
                                }
                            }
                        }
                    }
                ]
            },
            "CardTemplateCardWithIdUpdateRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "Card template - template_card_id",
                        "description": "Card template - template_card_id",
                        "required": [
                            "template_card_id"
                        ],
                        "properties": {
                            "template_card_id": {
                                "type": "array",
                                "items": {
                                    "format": "int32",
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCardUpdateRequest"
                    }
                ]
            },
            "CardTemplateStickerAddRequest": {
                "description": "Card template stricker data.",
                "type": "object",
                "required": [
                    "sticker_id"
                ],
                "properties": {
                    "sticker_id": {
                        "description": "The sticker id of the sticker.",
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardTemplateAttachmentCreateRequest": {
                "description": "Card template attachment data.",
                "type": "object",
                "required": [
                    "file_name",
                    "link"
                ],
                "properties": {
                    "file_name": {
                        "description": "The attachment file name.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "link": {
                        "description": "The attachment file link.",
                        "type": "string"
                    },
                    "position": {
                        "description": "The attachment position.",
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardTemplateAttachmentUpdateRequest": {
                "description": "Card template attachment data.",
                "type": "object",
                "required": [
                    "file_name",
                    "link"
                ],
                "properties": {
                    "file_name": {
                        "description": "The attachment file name.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "link": {
                        "description": "The attachment file link.",
                        "type": "string"
                    },
                    "position": {
                        "description": "The attachment position.",
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardTemplateAttachmentWithIdUpdateRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "Card template attachment data",
                        "description": "Card template attachment data.",
                        "required": [
                            "id"
                        ],
                        "properties": {
                            "id": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateAttachmentUpdateRequest"
                    }
                ]
            },
            "CardTemplateSubtaskCreateRequest": {
                "description": "Card template subtask data.",
                "type": "object",
                "required": [
                    "description"
                ],
                "properties": {
                    "description": {
                        "description": "A subtask description.",
                        "type": "string",
                        "minLength": 1
                    },
                    "owner_user_id": {
                        "description": "A user id of the assignee.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "position": {
                        "description": "The subtask position.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "attachments_to_add": {
                        "description": "A list of attachments which will be added to the new subtask.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateAttachmentCreateRequest"
                        }
                    }
                }
            },
            "CardTemplateSubtaskUpdateRequest": {
                "description": "Card template subtask data.",
                "type": "object",
                "properties": {
                    "description": {
                        "description": "A subtask description.",
                        "type": "string",
                        "minLength": 1
                    },
                    "owner_user_id": {
                        "description": "A user id of the assignee.",
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "position": {
                        "description": "The subtask position.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "attachments_to_add": {
                        "description": "A list of attachments to add.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateAttachmentCreateRequest"
                        }
                    },
                    "attachments_to_update": {
                        "description": "A list of attachments to update.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardAttachmentWithIdUpdateRequest"
                        }
                    },
                    "attachment_ids_to_remove": {
                        "description": "A list of attachments to remove.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    }
                }
            },
            "CardTemplateSubtaskWithIdUpdateRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "Subtask data - subtask_id",
                        "description": "Subtask data - subtask_id",
                        "required": [
                            "template_subtask_id"
                        ],
                        "properties": {
                            "template_subtask_id": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateSubtaskUpdateRequest"
                    }
                ]
            },
            "CardTemplateLinkToNewTemplateCardToAddRequest": {
                "description": "Card template link data.",
                "type": "object",
                "required": [
                    "linked_new_template_card_reference",
                    "link_type"
                ],
                "properties": {
                    "linked_new_template_card_reference": {
                        "description": "The new card's reference of the linked card.",
                        "type": "string",
                        "minLength": 1
                    },
                    "link_type": {
                        "description": "The link type.",
                        "type": "string",
                        "enum": [
                            "parent",
                            "child",
                            "relative",
                            "predecessor",
                            "successor"
                        ]
                    },
                    "linked_template_card_position": {
                        "description": "The position of the linked card within the card's list of linked cards.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "template_card_position": {
                        "description": "The position of the card within the link card's list of linked cards.",
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardTemplateCustomFieldWithIdAddOrUpdateRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "Card template custom field data",
                        "description": "Card template custom field data.",
                        "required": [
                            "field_id"
                        ],
                        "properties": {
                            "field_id": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldAddOrUpdateRequest"
                    }
                ]
            },
            "CardTemplateCustomFieldAddOrUpdateRequest": {
                "description": "Card template custom field data.",
                "type": "object",
                "properties": {
                    "value": {
                        "description": "The value of custom field.",
                        "type": "string",
                        "nullable": true
                    },
                    "selected_values_to_add_or_update": {
                        "description": "A list of selected values to add or update.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateCustomFieldSelectedValueAddOrUpdateRequest"
                        }
                    },
                    "selected_value_ids_to_remove": {
                        "description": "A list of selected values to remove.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "other_value": {
                        "description": "The other value of custom field.",
                        "type": "string",
                        "nullable": true
                    },
                    "contributor_ids_to_add": {
                        "description": "The contributor ids which will be added to card template custom field.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "contributor_ids_to_remove": {
                        "description": "The contributor ids which will be removed from card template custom field.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "files_to_add": {
                        "description": "A list of files to add.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateCustomFieldFileCreateRequest"
                        }
                    },
                    "files_to_update": {
                        "description": "A list of files to update.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardTemplateCustomFieldFileUpdateRequest"
                        }
                    },
                    "file_ids_to_remove": {
                        "description": "A list of file ids to remove.",
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    }
                }
            },
            "CardTemplateCustomFieldSelectedValueAddOrUpdateRequest": {
                "description": "Card template custom field selected value data.",
                "type": "object",
                "required": [
                    "value_id"
                ],
                "properties": {
                    "value_id": {
                        "description": "The id of \u0430 selected value of the custom field.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "position": {
                        "description": "The position of the value within the list of selected values.",
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardTemplateCustomFieldFileCreateRequest": {
                "description": "Card template custom field file data.",
                "type": "object",
                "required": [
                    "file_name",
                    "link"
                ],
                "properties": {
                    "file_name": {
                        "description": "The name of the file.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "link": {
                        "description": "The link to the file.",
                        "type": "string"
                    },
                    "position": {
                        "description": "The position of the file within the list of files.",
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardTemplateCustomFieldFileUpdateRequest": {
                "description": "Card template custom field file data.",
                "type": "object",
                "properties": {
                    "file_name": {
                        "description": "The name of the file.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "link": {
                        "description": "The link to the file.",
                        "type": "string"
                    },
                    "position": {
                        "description": "The position of the file within the list of files.",
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardTemplateCustomFieldFileWithIdUpdateRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "Card template custom field file data",
                        "description": "Card template custom field file data.",
                        "required": [
                            "id"
                        ],
                        "properties": {
                            "id": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldFileUpdateRequest"
                    }
                ]
            },
            "CardTemplateLinkAddOrUpdateRequest": {
                "description": "Card template link data",
                "type": "object",
                "required": [
                    "linked_template_card_id",
                    "link_type"
                ],
                "properties": {
                    "linked_template_card_id": {
                        "description": "The template card id of the linked card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "link_type": {
                        "description": "The link type.",
                        "type": "string",
                        "enum": [
                            "parent",
                            "child",
                            "relative",
                            "predecessor",
                            "successor"
                        ]
                    },
                    "linked_template_card_position": {
                        "description": "The position of the linked template card within the card's list of linked cards.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "template_card_position": {
                        "description": "The position of the template card within the link card's list of linked cards.",
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardTemplateLinkRemoveRequest": {
                "description": "Card template link data",
                "type": "object",
                "required": [
                    "linked_template_card_id",
                    "link_type"
                ],
                "properties": {
                    "linked_template_card_id": {
                        "description": "The card id of the linked template card.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "link_type": {
                        "description": "The link type.",
                        "type": "string",
                        "enum": [
                            "parent",
                            "child",
                            "relative",
                            "predecessor",
                            "successor"
                        ]
                    }
                }
            },
            "BoardCardType": {
                "title": "Board card type",
                "description": "Board card type data",
                "type": "object",
                "properties": {
                    "icon_type": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "nullable": true
                    },
                    "icon_id": {
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "color": {
                        "type": "string",
                        "nullable": true
                    },
                    "card_color_sync": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "nullable": true
                    }
                }
            },
            "BoardCardTypeCreateOrUpdateRequest": {
                "description": "Board card type data.",
                "type": "object",
                "properties": {
                    "icon_type": {
                        "description": "The type of the icon. 0 - system. 1 - user.",
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "icon_id": {
                        "description": "An icon for the card type. If set to 0, the card type will not have an icon.",
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "color": {
                        "description": "The color of the card type. 6 hexadecimal characters are expected.",
                        "type": "string",
                        "nullable": true
                    },
                    "card_color_sync": {
                        "description": "When set to 1 the color of the cards with this type will be replaced with the color of the type and cannot be changed manually.",
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "nullable": true
                    }
                }
            },
            "CardTemplateCustomFieldDataCommon": {
                "title": "Card Template Custom Field",
                "description": "Card template custom field data",
                "type": "object",
                "properties": {
                    "field_id": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardTemplateCustomFieldDataSingleLine": {
                "title": "Card Template Custom Field - Single-Line Text",
                "description": "Card template custom field data - single-line text",
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "display_value": {
                        "type": "string"
                    }
                }
            },
            "CardTemplateCustomFieldDataSingleLineWithFieldId": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataCommon"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataSingleLine"
                    }
                ]
            },
            "CardTemplateCustomFieldDataMultiLine": {
                "title": "Card Template Custom Field - Multi-Line Text",
                "description": "Card template custom field data - multi-line text",
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                }
            },
            "CardTemplateCustomFieldDataMultiLineWithFieldId": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataCommon"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataMultiLine"
                    }
                ]
            },
            "CardTemplateCustomFieldDataNumber": {
                "title": "Card Template Custom Field - Number",
                "description": "Card template custom field data - number",
                "type": "object",
                "properties": {
                    "value": {
                        "format": "double",
                        "type": "number"
                    },
                    "display_value": {
                        "type": "string"
                    }
                }
            },
            "CardTemplateCustomFieldDataNumberWithFieldId": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataCommon"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataNumber"
                    }
                ]
            },
            "CardTemplateCustomFieldDataDate": {
                "title": "Card Template Custom Field - Date",
                "description": "Card template custom field data - date",
                "type": "object",
                "properties": {
                    "value": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardTemplateCustomFieldDataDateWithFieldId": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataCommon"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataDate"
                    }
                ]
            },
            "CardTemplateCustomFieldDataLink": {
                "title": "Card Template Custom Field - Link",
                "description": "Card template custom field data - link",
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                }
            },
            "CardTemplateCustomFieldDataLinkWithFieldId": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataCommon"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataLink"
                    }
                ]
            },
            "CardTemplateCustomFieldDataDropdown": {
                "title": "Card Template Custom Field - Dropdown",
                "description": "Card template custom field data - dropdown",
                "type": "object",
                "properties": {
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "value_id": {
                                    "format": "int32",
                                    "type": "integer"
                                },
                                "position": {
                                    "format": "int32",
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            },
            "CardTemplateCustomFieldDataDropdownWithFieldId": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataCommon"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataDropdown"
                    }
                ]
            },
            "CardTemplateCustomFieldDataContributor": {
                "title": "Card Template Custom Field - Contributor",
                "description": "Card template custom field data - contributor",
                "type": "object",
                "properties": {
                    "contributors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "user_id": {
                                    "format": "int32",
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            },
            "CardTemplateCustomFieldDataContributorWithFieldId": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataCommon"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataContributor"
                    }
                ]
            },
            "CardTemplateCustomFieldDataFile": {
                "title": "Card Template Custom Field - File",
                "description": "Card template custom field data - file",
                "type": "object",
                "properties": {
                    "files": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "format": "int32",
                                    "type": "integer"
                                },
                                "file_name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 250
                                },
                                "link": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "CardTemplateCustomFieldDataFileWithFieldId": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataCommon"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataFile"
                    }
                ]
            },
            "CardTemplateCustomFieldDataVote": {
                "title": "Card Template Custom Field - Vote",
                "description": "Card template custom field data - vote",
                "type": "object"
            },
            "CardTemplateCustomFieldDataVoteWithFieldId": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataCommon"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataVote"
                    }
                ]
            },
            "CardTemplateCustomFieldDataCardPicker": {
                "title": "Card Template Custom Field - Card Picker",
                "description": "Card template custom field data - card picker",
                "type": "object"
            },
            "CardTemplateCustomFieldDataCardPickerWithFieldId": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataCommon"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardTemplateCustomFieldDataCardPicker"
                    }
                ]
            },
            "CardTemplateCustomFieldSelectedValue": {
                "title": "Card template custom field value",
                "description": "Card template custom field value data",
                "type": "object",
                "properties": {
                    "value_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "position": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardTemplateCustomFieldFile": {
                "title": "Card template custom field file",
                "description": "Card template custom field file data",
                "type": "object",
                "properties": {
                    "id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "file_name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "link": {
                        "type": "string"
                    }
                }
            },
            "CardTemplateCustomFieldCreateOrUpdateRequestSingleLine": {
                "type": "object",
                "description": "Card template custom field data - single-line text.",
                "properties": {
                    "value": {
                        "description": "The value of the custom field.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    }
                }
            },
            "CardTemplateCustomFieldCreateOrUpdateRequestMultiLine": {
                "type": "object",
                "description": "Card template custom field data - multi-line text.",
                "properties": {
                    "value": {
                        "description": "The value of the custom field.",
                        "type": "string"
                    }
                }
            },
            "CardTemplateCustomFieldCreateOrUpdateRequestNumber": {
                "type": "object",
                "description": "Card template custom field data - number.",
                "properties": {
                    "value": {
                        "description": "The value of the custom field.",
                        "format": "double",
                        "type": "number"
                    }
                }
            },
            "CardTemplateCustomFieldCreateOrUpdateRequestDate": {
                "type": "object",
                "description": "Card template custom field data - date.",
                "properties": {
                    "value": {
                        "description": "The value of the custom field.",
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardTemplateCustomFieldCreateOrUpdateRequestLink": {
                "type": "object",
                "description": "Card template custom field data - link.",
                "properties": {
                    "value": {
                        "description": "The value of the custom field.",
                        "type": "string"
                    }
                }
            },
            "CardTemplateCustomFieldCreateOrUpdateRequestDropdown": {
                "type": "object",
                "description": "Card template custom field data - dropdrown.",
                "properties": {
                    "values": {
                        "description": "A list of the values of the custom field. The values will be dispayed in the UI in the order in which they were provided.",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "value_id": {
                                    "description": "The id of an allowed value of the custom field.",
                                    "format": "int32",
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            },
            "CardTemplateCustomFieldCreateOrUpdateRequestContributor": {
                "type": "object",
                "description": "Card template custom field data - contributor.",
                "properties": {
                    "contributors": {
                        "description": "A list of the contributors for the custom field.",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "user_id": {
                                    "description": "The user id of the contributor.",
                                    "format": "int32",
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            },
            "CardTemplateCustomFieldCreateOrUpdateRequestFile": {
                "type": "object",
                "description": "Card template custom field data - file.",
                "properties": {
                    "files": {
                        "description": "A list of the files for the custom field.",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "file_name": {
                                    "description": "The name of the file.",
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 250
                                },
                                "link": {
                                    "description": "The link to the file.",
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "CardTemplateCustomFieldCreateOrUpdateRequestVote": {
                "type": "object",
                "description": "Card template custom field data - vote."
            },
            "CardTemplateCustomFieldCreateOrUpdateRequestCardPicker": {
                "type": "object",
                "description": "Card template custom field data - card picker."
            },
            "CardBlockReason": {
                "title": "Card block reason",
                "description": "Card block reason data",
                "type": "object",
                "properties": {
                    "type": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "comment": {
                        "type": "string"
                    },
                    "reason": {
                        "$ref": "#\/components\/schemas\/BlockReason"
                    },
                    "cards": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "card_id": {
                                    "format": "int32",
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "date": {
                        "type": "string",
                        "format": "date"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "user_id": {
                                    "format": "int32",
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            },
            "CardComment": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardCommentDataCommon"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardCommentDataAuthorOrSenderAndRecipient"
                    }
                ]
            },
            "CardCommentDataCommon": {
                "title": "Card comment",
                "description": "Card comment data",
                "type": "object",
                "properties": {
                    "comment_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "plain",
                            "sent as email",
                            "received as email"
                        ]
                    },
                    "text": {
                        "type": "string"
                    },
                    "attachments": {
                        "$ref": "#\/components\/schemas\/CardCommentAttachmentWithId"
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "last_modified": {
                        "format": "date-time",
                        "type": "string"
                    }
                }
            },
            "CardCommentDataAuthorOrSenderAndRecipient": {
                "oneOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardCommentAuthor"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardCommentSenderAndRecipients"
                    }
                ]
            },
            "CardCommentAuthor": {
                "title": "Card comment author",
                "description": "Card comment author data",
                "type": "object",
                "properties": {
                    "author": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "internal",
                                    "external"
                                ]
                            },
                            "value": {
                                "oneOf": [
                                    {
                                        "type": "integer"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "CardCommentSenderAndRecipients": {
                "title": "Card comment sender and recipients",
                "description": "Card comment recipients data",
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardCommentSender"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardCommentRecipients"
                    }
                ]
            },
            "CardCommentSender": {
                "title": "Card comment sender",
                "description": "Card comment sender data",
                "type": "object",
                "properties": {
                    "sender": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "internal",
                                    "external"
                                ]
                            },
                            "value": {
                                "oneOf": [
                                    {
                                        "type": "integer"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "CardCommentRecipients": {
                "title": "Card comment recipients",
                "description": "Card comment recipients data",
                "type": "object",
                "properties": {
                    "recipients": {
                        "type": "object",
                        "properties": {
                            "to": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "type": "string",
                                            "enum": [
                                                "internal",
                                                "external"
                                            ]
                                        },
                                        "value": {
                                            "oneOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ]
                                        }
                                    }
                                }
                            },
                            "cc": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "type": "string",
                                            "enum": [
                                                "internal",
                                                "external"
                                            ]
                                        },
                                        "value": {
                                            "oneOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ]
                                        }
                                    }
                                }
                            },
                            "bcc": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "type": "string",
                                            "enum": [
                                                "internal",
                                                "external"
                                            ]
                                        },
                                        "value": {
                                            "oneOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "CardOutcomeWithId": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "Card outcome",
                        "description": "Card outcome data",
                        "properties": {
                            "outcome_id": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardOutcome"
                    }
                ]
            },
            "CardOutcome": {
                "title": "Card outcome",
                "description": "Card outcome data",
                "type": "object",
                "properties": {
                    "field_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "starting_value": {
                        "format": "double",
                        "type": "number"
                    },
                    "target_value": {
                        "format": "double",
                        "type": "number"
                    },
                    "operator": {
                        "type": "string",
                        "enum": [
                            "or_less",
                            "or_more"
                        ]
                    },
                    "comment": {
                        "type": "string",
                        "default": null
                    },
                    "weight": {
                        "format": "int32",
                        "type": "integer",
                        "default": 1
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "checkpoints": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardOutcomeCheckpointWithId"
                        }
                    }
                }
            },
            "CardOutcomeCheckpoint": {
                "title": "Card outcome checkpoint",
                "description": "Card outcome checkpoint data",
                "type": "object",
                "properties": {
                    "time": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "value": {
                        "format": "double",
                        "type": "number",
                        "minimum": -1000000000000000,
                        "maximum": 1000000000000000
                    }
                }
            },
            "CardOutcomeCheckpointWithId": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "Card outcome checkpoint",
                        "description": "Card outcome checkpoint data",
                        "properties": {
                            "id": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardOutcomeCheckpoint"
                    }
                ]
            },
            "CardOutcomeValue": {
                "title": "Card outcome value",
                "description": "Card outcome value data",
                "type": "object",
                "properties": {
                    "value": {
                        "format": "double",
                        "type": "number",
                        "minimum": -1000000000000000,
                        "maximum": 1000000000000000
                    },
                    "time": {
                        "format": "date-time",
                        "type": "string"
                    }
                }
            },
            "CardOutcomeValueWithIdAndOutcomeId": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "Card outcome value",
                        "description": "Card outcome value data",
                        "properties": {
                            "outcome_id": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardOutcomeValueWithId"
                    }
                ]
            },
            "CardOutcomeValueWithId": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "Card outcome value",
                        "description": "Card outcome value data",
                        "properties": {
                            "id": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardOutcomeValue"
                    }
                ]
            },
            "CardSubtaskWithId": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "Card subtask",
                        "description": "Card subtask data",
                        "properties": {
                            "subtask_id": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardSubtask"
                    }
                ]
            },
            "CardSubtask": {
                "title": "Card subtask",
                "description": "Card subtask data",
                "type": "object",
                "required": [
                    "description"
                ],
                "properties": {
                    "description": {
                        "type": "string",
                        "minLength": 1
                    },
                    "owner_user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "finished_at": {
                        "format": "date-time",
                        "type": "string",
                        "nullable": true
                    },
                    "position": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CardAttachmentWithPosition"
                        }
                    }
                }
            },
            "CardAttachment": {
                "title": "Card attachment",
                "description": "Card attachment data",
                "type": "object",
                "properties": {
                    "id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "file_name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "link": {
                        "type": "string"
                    }
                }
            },
            "CardAttachmentWithPosition": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardAttachment"
                    },
                    {
                        "type": "object",
                        "description": "Card attachment with included position value.",
                        "properties": {
                            "position": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                ]
            },
            "CardCommentAttachment": {
                "title": "Card comment attachment",
                "description": "Card comment attachment data",
                "type": "object",
                "properties": {
                    "file_name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "link": {
                        "type": "string"
                    }
                }
            },
            "CardCommentAttachmentWithId": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "Card comment attachment",
                        "description": "Card comment attachment data",
                        "properties": {
                            "id": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardCommentAttachment"
                    }
                ]
            },
            "CardSticker": {
                "title": "Card sticker",
                "description": "Card sticker data",
                "type": "object",
                "properties": {
                    "id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "card_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "sticker_id": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardTag": {
                "title": "Card tag",
                "description": "Card tag data",
                "type": "object",
                "properties": {
                    "card_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "tag_id": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardCustomFieldDataCommon": {
                "title": "Card Custom Field",
                "description": "Card custom field data",
                "type": "object",
                "properties": {
                    "field_id": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardCustomFieldDataSingleLine": {
                "title": "Card Custom Field - Single-Line Text",
                "description": "Card custom field data - single-line text",
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "display_value": {
                        "type": "string"
                    }
                }
            },
            "CardCustomFieldDataSingleLineWithFieldId": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardCustomFieldDataCommon"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardCustomFieldDataSingleLine"
                    }
                ]
            },
            "CardCustomFieldDataMultiLine": {
                "title": "Card Custom Field - Multi-Line Text",
                "description": "Card custom field data - multi-line text",
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                }
            },
            "CardCustomFieldDataMultiLineWithFieldId": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardCustomFieldDataCommon"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardCustomFieldDataMultiLine"
                    }
                ]
            },
            "CardCustomFieldDataNumber": {
                "title": "Card Custom Field - Number",
                "description": "Card custom field data - number",
                "type": "object",
                "properties": {
                    "value": {
                        "format": "double",
                        "type": "number"
                    },
                    "display_value": {
                        "type": "string"
                    }
                }
            },
            "CardCustomFieldDataNumberWithFieldId": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardCustomFieldDataCommon"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardCustomFieldDataNumber"
                    }
                ]
            },
            "CardCustomFieldDataDate": {
                "title": "Card Custom Field - Date",
                "description": "Card custom field data - date",
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                }
            },
            "CardCustomFieldDataDateWithFieldId": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardCustomFieldDataCommon"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardCustomFieldDataDate"
                    }
                ]
            },
            "CardCustomFieldDataLink": {
                "title": "Card Custom Field - Link",
                "description": "Card custom field data - link",
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                }
            },
            "CardCustomFieldDataLinkWithFieldId": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardCustomFieldDataCommon"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardCustomFieldDataLink"
                    }
                ]
            },
            "CardCustomFieldDataDropdown": {
                "title": "Card Custom Field - Dropdown",
                "description": "Card custom field data - dropdown",
                "type": "object",
                "properties": {
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "value_id": {
                                    "format": "int32",
                                    "type": "integer"
                                },
                                "position": {
                                    "format": "int32",
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            },
            "CardCustomFieldDataDropdownWithFieldId": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardCustomFieldDataCommon"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardCustomFieldDataDropdown"
                    }
                ]
            },
            "CardCustomFieldDataContributor": {
                "title": "Card Custom Field - Contributor",
                "description": "Card custom field data - contributor",
                "type": "object",
                "properties": {
                    "contributors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "user_id": {
                                    "format": "int32",
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            },
            "CardCustomFieldDataContributorWithFieldId": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardCustomFieldDataCommon"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardCustomFieldDataContributor"
                    }
                ]
            },
            "CardCustomFieldDataFile": {
                "title": "Card Custom Field - File",
                "description": "Card custom field data - file",
                "type": "object",
                "properties": {
                    "files": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "format": "int32",
                                    "type": "integer"
                                },
                                "file_name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 250
                                },
                                "link": {
                                    "type": "string"
                                },
                                "position": {
                                    "format": "int32",
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            },
            "CardCustomFieldDataFileWithFieldId": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardCustomFieldDataCommon"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardCustomFieldDataFile"
                    }
                ]
            },
            "CardCustomFieldDataVote": {
                "title": "Card Custom Field - Vote",
                "description": "Card custom field data - vote",
                "type": "object",
                "properties": {
                    "votes": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "vote": {
                                    "format": "int32",
                                    "type": "integer",
                                    "enum": [
                                        0,
                                        1
                                    ]
                                },
                                "comment": {
                                    "type": "string"
                                },
                                "user_id": {
                                    "format": "int32",
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            },
            "CardCustomFieldDataVoteWithFieldId": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardCustomFieldDataCommon"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardCustomFieldDataVote"
                    }
                ]
            },
            "CardCustomFieldDataCardPicker": {
                "title": "Card Custom Field - Card Picker",
                "description": "Card custom field data - card picker",
                "type": "object",
                "properties": {
                    "selected_cards": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "selected_card_id": {
                                    "format": "int32",
                                    "type": "integer"
                                },
                                "position": {
                                    "format": "int32",
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            },
            "CardCustomFieldDataCardPickerWithFieldId": {
                "allOf": [
                    {
                        "$ref": "#\/components\/schemas\/CardCustomFieldDataCommon"
                    },
                    {
                        "$ref": "#\/components\/schemas\/CardCustomFieldDataCardPicker"
                    }
                ]
            },
            "CardCustomFieldSelectedValue": {
                "title": "Card custom field selected value",
                "description": "Card custom field selected value data",
                "type": "object",
                "properties": {
                    "value_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "position": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardCustomFieldFile": {
                "title": "Card custom field file",
                "description": "Card custom field file data",
                "type": "object",
                "properties": {
                    "file_name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "link": {
                        "type": "string"
                    },
                    "position": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CardCustomFieldSelectedCard": {
                "title": "Card custom field selected card",
                "description": "Card custom field selected card data",
                "type": "object",
                "properties": {
                    "selected_card_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "position": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "LoggedTime": {
                "title": "Logged time",
                "description": "Logged time data",
                "type": "object",
                "properties": {
                    "logged_time_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "card_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "subtask_id": {
                        "format": "int32",
                        "type": "integer",
                        "nullable": true
                    },
                    "lane_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "column_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "date": {
                        "format": "date",
                        "type": "string"
                    },
                    "time": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "logged_at": {
                        "format": "date-time",
                        "type": "string"
                    }
                }
            },
            "LoggedTimeHistoryEvent": {
                "title": "Logged time history event",
                "description": "Logged time history event data",
                "type": "object",
                "properties": {
                    "history_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "logged_time_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "event_type": {
                        "type": "string"
                    },
                    "user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "details": {
                        "type": "object"
                    },
                    "time": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "LinkedCard": {
                "title": "Linked card",
                "description": "Linked card data",
                "type": "object",
                "properties": {
                    "position": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "LinkedCardWithType": {
                "title": "Linked card with type",
                "description": "Linked card data with type",
                "type": "object",
                "properties": {
                    "card_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "position": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "link_type": {
                        "type": "string",
                        "enum": [
                            "child",
                            "parent",
                            "relative",
                            "predecessor",
                            "successor"
                        ]
                    }
                }
            },
            "ParentChildLink": {
                "title": "Parent-Child link in a graph",
                "description": "Parent-Child link data",
                "type": "object",
                "properties": {
                    "parent_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "child_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "depth": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "PredecessorSuccessorLink": {
                "title": "Predecessor-Successor link in a graph",
                "description": "Predecessor-Successor link data",
                "type": "object",
                "properties": {
                    "predecessor_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "successor_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "depth": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "Webhook": {
                "title": "Webhook",
                "description": "Webhook data",
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250
                    },
                    "is_enabled": {
                        "format": "int32",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "board_id": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "WebhookHistoryEvent": {
                "title": "Webhook history event",
                "description": "An event recorded when an update, delete or create action is executed on webhooks resource",
                "type": "object",
                "properties": {
                    "id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "webhook_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "event_type": {
                        "type": "string"
                    },
                    "time": {
                        "type": "string",
                        "format": "date"
                    },
                    "details": {
                        "type": "object"
                    }
                }
            },
            "StickerHistoryEvent": {
                "title": "Sticker history event",
                "description": "An event recorded when an update, delete or create action is executed on stickers resource",
                "type": "object",
                "properties": {
                    "history_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "sticker_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "event_type": {
                        "type": "string"
                    },
                    "details": {
                        "type": "object"
                    },
                    "time": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "TagHistoryEvent": {
                "title": "Tag history event",
                "description": "An event recorded when an update, delete or create action is executed on tags resource",
                "type": "object",
                "properties": {
                    "history_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "tag_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "event_type": {
                        "type": "string"
                    },
                    "details": {
                        "type": "object"
                    },
                    "time": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "CardTemplateHistoryEvent": {
                "title": "Card template history event",
                "description": "An event recorded when an update, delete or create action is executed on card template resource",
                "type": "object",
                "properties": {
                    "history_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "type_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "event_type": {
                        "type": "string"
                    },
                    "details": {
                        "type": "object"
                    },
                    "time": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "CardTypeHistoryEvent": {
                "title": "Card type history event",
                "description": "An event recorded when an update, delete or create action is executed on card type resource",
                "type": "object",
                "properties": {
                    "history_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "type_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "event_type": {
                        "type": "string"
                    },
                    "details": {
                        "type": "object"
                    },
                    "time": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "CardOutcomeHistoryEvent": {
                "title": "Card outcome history event",
                "description": "An event recorded when an update, delete or create action is executed on card outcome resource",
                "type": "object",
                "properties": {
                    "history_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "outcome_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "event_type": {
                        "type": "string"
                    },
                    "details": {
                        "type": "object"
                    },
                    "time": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "BlockReasonHistoryEvent": {
                "title": "Block reason history event",
                "description": "An event recorded when an update, delete or create action is executed on block reasons resource",
                "type": "object",
                "properties": {
                    "history_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "reason_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "event_type": {
                        "type": "string"
                    },
                    "details": {
                        "type": "object"
                    },
                    "time": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "DiscardReasonHistoryEvent": {
                "title": "Discard reason history event",
                "description": "An event recorded when an update, delete or create action is executed on discard reasons resource",
                "type": "object",
                "properties": {
                    "history_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "reason_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "event_type": {
                        "type": "string"
                    },
                    "details": {
                        "type": "object"
                    },
                    "time": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "Setting": {
                "title": "Setting",
                "description": "Setting data",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "int",
                            "string",
                            "url",
                            "color"
                        ]
                    },
                    "restrictions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "multiple_values": {
                        "type": "boolean"
                    },
                    "default_value": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "string"
                            }
                        ],
                        "nullable": true
                    },
                    "value": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "string"
                            }
                        ],
                        "nullable": true
                    }
                }
            },
            "Permission": {
                "title": "Permission",
                "description": "Permission data",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "available": {
                        "type": "boolean"
                    }
                }
            },
            "Privilege": {
                "title": "Privilege",
                "description": "Privilege data",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "available": {
                        "type": "boolean"
                    }
                }
            },
            "BusinessRulesExecutionHistoryEvent": {
                "title": "Business rules history event",
                "description": "An event recorded for each business rules execution",
                "type": "object",
                "properties": {
                    "id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "business_rule_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "business_rule_name": {
                        "type": "string"
                    },
                    "executed_on_card_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "executed_at": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "EmailIntegrationError": {
                "title": "Email Integration Error",
                "description": "The details about an error which occurred while an email was being processed",
                "type": "object",
                "properties": {
                    "sender": {
                        "type": "string"
                    },
                    "receivers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "subject": {
                        "type": "string"
                    },
                    "error_message": {
                        "type": "string"
                    },
                    "received_at": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "EmailIntegrationHistoryEvent": {
                "title": "Email integration history event",
                "description": "An event recorded when an email is send through email integration",
                "type": "object",
                "properties": {
                    "sender": {
                        "format": "email",
                        "type": "string"
                    },
                    "receivers": {
                        "format": "email",
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "subject": {
                        "type": "string"
                    },
                    "received_at": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "CustomFieldHistoryEvent": {
                "title": "Custom Field History",
                "description": "An event recorded when an user management action is executed on Custom Fields",
                "type": "object",
                "properties": {
                    "history_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "field_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "event_type": {
                        "type": "string"
                    },
                    "user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "details": {
                        "type": "object"
                    },
                    "time": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "CompanyAddonTrial": {
                "title": "Company addon trial",
                "description": "Addon trial status",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "ended",
                            "active",
                            "available",
                            "unavailable"
                        ]
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date"
                    },
                    "settings": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CompanyFeatureSetting"
                        }
                    }
                }
            },
            "CompanyAddon": {
                "title": "Company addon",
                "description": "Addon trial",
                "type": "object",
                "properties": {
                    "feature_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "available",
                            "unavailable"
                        ]
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date"
                    },
                    "settings": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CompanyFeatureSetting"
                        }
                    }
                }
            },
            "CompanyFeatureSetting": {
                "title": "Company feature setting",
                "description": "Company feature setting",
                "type": "object",
                "properties": {
                    "setting_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "value": {
                        "oneOf": [
                            {
                                "format": "int32",
                                "type": "integer"
                            },
                            {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 100
                            }
                        ]
                    }
                }
            },
            "CompanyFeature": {
                "title": "Company feature",
                "description": "Company feature",
                "type": "object",
                "properties": {
                    "feature_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "settings": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CompanyFeatureSetting"
                        }
                    }
                }
            },
            "CompanyPlan": {
                "title": "Company plan",
                "description": "Company plan",
                "type": "object",
                "properties": {
                    "plan_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "available",
                            "unavailable"
                        ]
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CompanyFeature"
                        }
                    }
                }
            },
            "CompanyPlanTrial": {
                "title": "Company trial plan",
                "description": "Company trial plan",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "ended",
                            "active",
                            "available",
                            "unavailable"
                        ]
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date"
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CompanyFeature"
                        }
                    }
                }
            },
            "ApiRequestHistoryEvent": {
                "title": "Api request history event",
                "description": "An event recorded for each request execution torwards the api",
                "type": "object",
                "properties": {
                    "user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "resource": {
                        "type": "string"
                    },
                    "method": {
                        "type": "string"
                    },
                    "status_code": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "support_reference": {
                        "format": "string"
                    },
                    "time": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "OldApiRequestHistoryEvent": {
                "title": "Old Api request history event",
                "description": "An event recorded for each request execution torwards the old api",
                "type": "object",
                "properties": {
                    "user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "resource": {
                        "type": "string"
                    },
                    "method": {
                        "type": "string"
                    },
                    "time": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "ApiRequestHistoryAggregated": {
                "title": "An aggregated api request history event",
                "description": "An event recorded for each request execution torwards the api aggregated by parameters",
                "type": "object",
                "properties": {
                    "user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "aggregation_period": {
                        "type": "string"
                    },
                    "time": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "OldApiRequestHistoryAggregated": {
                "title": "An aggregated old api request history event",
                "description": "An event recorded for each request execution torwards the old api aggregated by parameters",
                "type": "object",
                "properties": {
                    "user_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "aggregation_period": {
                        "type": "string"
                    },
                    "time": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "ApiLimit": {
                "title": "Api request limit",
                "description": "An hourly or minutely api request limit.",
                "type": "object",
                "properties": {
                    "types": {
                        "type": "string"
                    },
                    "limit": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "OldApiLimit": {
                "title": "Old api request limit",
                "description": "An hourly request limit for the old api.",
                "type": "object",
                "properties": {
                    "function": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "limit": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "JsonExport": {
                "title": "Json export",
                "description": "Json export data",
                "type": "object",
                "properties": {
                    "pagination": {
                        "type": "object",
                        "properties": {
                            "all_pages": {
                                "description": "The number of pages the result is split into.",
                                "type": "integer"
                            },
                            "current_page": {
                                "description": "The current page.",
                                "type": "integer"
                            },
                            "results_per_page": {
                                "description": "The number of results per page.",
                                "type": "integer"
                            }
                        }
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "titles": {
                                "description": "The titles of the exported data.",
                                "type": "array",
                                "items": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            "items": {
                                "description": "The exported items.",
                                "type": "array",
                                "items": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "apikey": {
                "type": "apiKey",
                "name": "apikey",
                "in": "header"
            }
        }
    },
    "security": [
        {
            "apikey": []
        }
    ]
}